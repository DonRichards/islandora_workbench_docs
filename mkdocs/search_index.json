{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\n\nIslandora Workbench\n is a command-line tool that allows creation, updating, and deletion of Islandora content from CSV data. It is an alternative to using Drupal's built-in Migrate framework for \ningesting Islandora content from CSV files\n. Unlike the Migrate tools, Islandora Workbench can be run anywhere - it does not need to run on the Drupal server. Drupal's Migrate framework, however, is much more flexible than Islandora Workbench, and can be extended using plugins in ways that Workbench cannot.\n\n\n\n\nNote\n\n\nThis tool is not related in any way to the Drupal contrib module called \nWorkbench\n.\n\n\n\n\nFeatures\n\n\n\n\nAllows creation of Islandora nodes and media, updating of nodes, and deletion of nodes and media from CSV files\n\n\nAllows creation of paged/compound content\n\n\nCan run from anywhere - it communicates with Drupal via HTTP\n\n\nProvides robust data validation functionality\n\n\nSupports a variety of Drupal entity field types (text, integer, term reference, typed relation, geolocation)\n\n\nCan provide a CSV file template based on Drupal content type\n\n\nCan use a Google Sheet instead of a local CSV file as input\n\n\nAllows assignment of Drupal vocabulary terms using term IDs, term names, or term URIs\n\n\nAllows creation of new taxonomy terms from CSV field data\n\n\nAllows the assignment of URL aliases\n\n\nAllows adding alt text to images\n\n\nCross platform (written in Python)\n\n\nWell tested\n\n\nWell documented\n\n\nProvides both sensible default configuration values and rich configuation options for power users\n\n\nA companion project under development, \nIslandora Workbench Desktop\n, will add a graphical user interface that enables users not familiar or comfortable with the command line to use Workbench.\n\n\n\n\nUsage\n\n\n./workbench --config config.yml --check\n\n\n--check\n \nvalidates\n your configuration and input data. Typical output looks like:\n\n\nOK, connection to Drupal at http://localhost:8000 verified.\nOK, configuration file has all required values (did not check for optional values).\nOK, CSV file input_data/metadata.csv found.\nOK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\nOK, CSV column headers match Drupal field names.\nOK, required Drupal fields are present in the CSV file.\nOK, term IDs/names in CSV file exist in their respective taxonomies.\nOK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\nOK, files named in the CSV \"file\" column are all present.\nConfiguration and input data appear to be valid.\n\n\n\n\nIf \n--check\n hasn't identified any problems, you can then rerun Islandora Workbench without the \n--check\n option to create the nodes:\n\n\n./workbench --config config.yml\n\n\nWorkbench will then create a node and attached media for each record in your input CSV file. Typical output looks like:\n\n\nNode for 'Small boats in Havana Harbour' created at http://localhost:8000/node/52.\n+File media for IMG_1410.tif created.\nNode for 'Manhatten Island' created at http://localhost:8000/node/53.\n+File media for IMG_2549.jp2 created.\nNode for 'Looking across Burrard Inlet' created at http://localhost:8000/node/54.\n+Image media for IMG_2940.JPG created.\nNode for 'Amsterdam waterfront' created at http://localhost:8000/node/55.\n+Image media for IMG_2958.JPG created.\nNode for 'Alcatraz Island' created at http://localhost:8000/node/56.\n+Image media for IMG_5083.JPG created.\n\n\n\n\nLicense\n\n\nIslandora Workbench, and this documentation, are available under the terms of the Unlicense.\n\n\n\n\nContributing\n\n\nContibutions to this documentation are welcome. If you have a suggestion, please open an issue on the Islandora Workbench GitHub repository's \nqueue\n and tag your issue \"documentation\".",
            "title": "Home"
        },
        {
            "location": "/#overview",
            "text": "Islandora Workbench  is a command-line tool that allows creation, updating, and deletion of Islandora content from CSV data. It is an alternative to using Drupal's built-in Migrate framework for  ingesting Islandora content from CSV files . Unlike the Migrate tools, Islandora Workbench can be run anywhere - it does not need to run on the Drupal server. Drupal's Migrate framework, however, is much more flexible than Islandora Workbench, and can be extended using plugins in ways that Workbench cannot.   Note  This tool is not related in any way to the Drupal contrib module called  Workbench .",
            "title": "Overview"
        },
        {
            "location": "/#features",
            "text": "Allows creation of Islandora nodes and media, updating of nodes, and deletion of nodes and media from CSV files  Allows creation of paged/compound content  Can run from anywhere - it communicates with Drupal via HTTP  Provides robust data validation functionality  Supports a variety of Drupal entity field types (text, integer, term reference, typed relation, geolocation)  Can provide a CSV file template based on Drupal content type  Can use a Google Sheet instead of a local CSV file as input  Allows assignment of Drupal vocabulary terms using term IDs, term names, or term URIs  Allows creation of new taxonomy terms from CSV field data  Allows the assignment of URL aliases  Allows adding alt text to images  Cross platform (written in Python)  Well tested  Well documented  Provides both sensible default configuration values and rich configuation options for power users  A companion project under development,  Islandora Workbench Desktop , will add a graphical user interface that enables users not familiar or comfortable with the command line to use Workbench.",
            "title": "Features"
        },
        {
            "location": "/#usage",
            "text": "./workbench --config config.yml --check  --check   validates  your configuration and input data. Typical output looks like:  OK, connection to Drupal at http://localhost:8000 verified.\nOK, configuration file has all required values (did not check for optional values).\nOK, CSV file input_data/metadata.csv found.\nOK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\nOK, CSV column headers match Drupal field names.\nOK, required Drupal fields are present in the CSV file.\nOK, term IDs/names in CSV file exist in their respective taxonomies.\nOK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\nOK, files named in the CSV \"file\" column are all present.\nConfiguration and input data appear to be valid.  If  --check  hasn't identified any problems, you can then rerun Islandora Workbench without the  --check  option to create the nodes:  ./workbench --config config.yml  Workbench will then create a node and attached media for each record in your input CSV file. Typical output looks like:  Node for 'Small boats in Havana Harbour' created at http://localhost:8000/node/52.\n+File media for IMG_1410.tif created.\nNode for 'Manhatten Island' created at http://localhost:8000/node/53.\n+File media for IMG_2549.jp2 created.\nNode for 'Looking across Burrard Inlet' created at http://localhost:8000/node/54.\n+Image media for IMG_2940.JPG created.\nNode for 'Amsterdam waterfront' created at http://localhost:8000/node/55.\n+Image media for IMG_2958.JPG created.\nNode for 'Alcatraz Island' created at http://localhost:8000/node/56.\n+Image media for IMG_5083.JPG created.",
            "title": "Usage"
        },
        {
            "location": "/#license",
            "text": "Islandora Workbench, and this documentation, are available under the terms of the Unlicense.",
            "title": "License"
        },
        {
            "location": "/#contributing",
            "text": "Contibutions to this documentation are welcome. If you have a suggestion, please open an issue on the Islandora Workbench GitHub repository's  queue  and tag your issue \"documentation\".",
            "title": "Contributing"
        },
        {
            "location": "/installation/",
            "text": "Requirements\n\n\n\n\nPython 3.2 or higher\n\n\nThe \nruamel.yaml\n library\n\n\nThe \nRequests\n library\n\n\nPython's \nsetuptools\n\n\n\n\n\n\nAn \nIslandora\n repository\n\n\nThe \nIslandora Workbench Integration\n module.\n\n\n\n\nInstallation\n\n\n\n\ngit clone https://github.com/mjordan/islandora_workbench.git\n\n\n\n\nIf you don't already have the two required libraries installed, clone this repo as above, and then use \nsetup.py\n:\n\n\n\n\nsudo python3 setup.py install",
            "title": "Requirements and installation"
        },
        {
            "location": "/installation/#requirements",
            "text": "Python 3.2 or higher  The  ruamel.yaml  library  The  Requests  library  Python's  setuptools    An  Islandora  repository  The  Islandora Workbench Integration  module.",
            "title": "Requirements"
        },
        {
            "location": "/installation/#installation",
            "text": "git clone https://github.com/mjordan/islandora_workbench.git   If you don't already have the two required libraries installed, clone this repo as above, and then use  setup.py :   sudo python3 setup.py install",
            "title": "Installation"
        },
        {
            "location": "/configuration/",
            "text": "The configuration file\n\n\nWorkbench uses a YAML configuration whose location is indicated in the \n--config\n argument. This file defines the various options it will use to create, update, or delete Islandora content (such as which CSV file to use and what directory your images are in). The simplest configuration file would look like this:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n\n\n\nIn this example, the \ntask\n being performed is creating nodes (and optionally media). Other tasks are \ncreate_from_files\n, \nupdate\n, \ndelete\n, \nadd_media\n, and \ndelete_media\n. Some of the configuration settings documented below are used in all tasks, while others are only used in specific tasks.\n\n\nConfiguration settings\n\n\nThe settings defined in a configuration file are:\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntask\n\n\n\u2714\ufe0f\n\n\n\n\nOne of 'create', 'create_from_files', update', delete', 'add_media', or 'delete_media'\n\n\n\n\n\n\nhost\n\n\n\u2714\ufe0f\n\n\n\n\nThe hostname, including port number if not 80, of your Islandora repository.\n\n\n\n\n\n\nusername\n\n\n\u2714\ufe0f\n\n\n\n\nThe username used to authenticate the requests. This Drupal user should be a member of the \"Administrator\" role. If you want to create nodes that are owned by a specific Drupal user, include their numeric user ID in the \nuid\n column in your CSV.\n\n\n\n\n\n\npassword\n\n\n\u2714\ufe0f\n\n\n\n\nThe user's password.\n\n\n\n\n\n\ncontent_type\n\n\n\n\nislandora_object\n\n\nThe machine name of the Drupal node content type you are creating or updating.\n\n\n\n\n\n\ninput_dir\n\n\n\n\ninput_data\n\n\nThe full or relative path to the directory containing the files and metadata CSV file.\n\n\n\n\n\n\ninput_csv\n\n\n\n\nmetadata.csv\n\n\nPath to the CSV metadata file. Can be absolute, or if just the filename is provided, will be assumed to be in the directory named in \ninput_dir\n. Can also be the URL to a Google spreadsheet (see the \"Using Google Sheets as input data\" section below for more information).\n\n\n\n\n\n\ngoogle_sheets_csv_filename\n\n\n\n\ngoogle_sheet.csv\n\n\nLocal CSV filename for data from a Google spreadsheet. See the \"Using Google Sheets as input data\" section below for more information.\n\n\n\n\n\n\nlog_file_path\n\n\n\n\nworkbench.log\n\n\nThe path to the log file, absolute or relative to \nworkbench\n. See the \"Logging\" section below for more information.\n\n\n\n\n\n\nid_field\n\n\n\n\nid\n\n\nThe name of the field in the CSV that uniquely identifies each record.\n\n\n\n\n\n\ndelimiter\n\n\n\n\n, [comma]\n\n\nThe delimiter used in the CSV file, for example, \",\" or \"\\t\". If omitted, defaults to \",\".\n\n\n\n\n\n\nsubdelimiter\n\n\n\n\n| [pipe]\n\n\nThe subdelimiter used in the CSV file to define multiple values in one field. If omitted, defaults to \"|\".\n\n\n\n\n\n\nnodes_only\n\n\n\n\nfalse\n\n\nInclude this option in \ncreate\n tasks, set to \ntrue\n, if you want to only create nodes and not their accompanying media. See the \"Creating nodes but not media\" section below for more information. 'fedora://'.\n\n\n\n\n\n\ndrupal_filesystem\n\n\n\n\nfedora://\n\n\nOne of 'fedora://', 'public://', or 'private://'.\n\n\n\n\n\n\noutput_csv\n\n\n\n\n\n\nThe full or relative path to a CSV file with one record per node created by Workbench. See \"The output CSV file\" section below for more information.\n\n\n\n\n\n\nmedia_use_tid\n\n\n\n\nhttp://pcdm.org/use#OriginalFile\n\n\nThe term ID for the term from the \"Islandora Media Use\" vocabulary you want to apply to the media being created. You can provide a term URI instead of a term ID, for example \n\"http://pcdm.org/use#OriginalFile\"\n.\n\n\n\n\n\n\nmedia_type [singular]\n\n\n\n\n\n\nOverrides, for all media being created, Workbench's default definition of whether the media being created is an image, file, document, audio, or video. Used in the \ncreate\n, \nadd_media\n, and \ncreate_from_files\n tasks. More detail provided in the \"Setting Media Types\" section below.\n\n\n\n\n\n\nmedia_types [plural]\n\n\n\n\n\n\nOverrides default media type definitions on a per file extension basis. Used in the \ncreate\n, \nadd_media\n, and \ncreate_from_files\n tasks. More detail provided in the \"Setting Media Types\" section below.\n\n\n\n\n\n\nallow_missing_files\n\n\n\n\nfalse\n\n\nDetermines if empty \nfile\n values are allowed. If set to true, empty file values are allowed and will result in nodes without attached media. Defaults to false (which means all file values must contain the name of a file that exists in the \ninput_data\n directory).\n\n\n\n\n\n\nallow_adding_terms\n\n\n\n\nfalse\n\n\nDetermines if Workbench will add taxonomy terms if they do not exist in the target vocabulary. See more information in the \"Taxonomy fields\" section below.\n\n\n\n\n\n\npublished\n\n\n\n\ntrue\n\n\nWhether nodes are published or not. Applies to \ncreate\n task only. Set to false if you want the nodes to be unpublished. Note that whether or not a node is published can also be set at a node level in the CSV file in the status base field, as described in the \"Base Fields\" section below. Values in the CSV override the value of published set here.\n\n\n\n\n\n\nvalidate_title_length\n\n\n\n\ntrue\n\n\nWhether or not to check if title values in the CSV exceed Drupal's maximum allowed length of 255 characters. Defaults to true. Set to false if you are using a module that lets you override Drupal's maximum title length, such as \nNode Title Length\n or \nEntity Title Length\n. Also, if your task is \nupdate\n, you should set this to false if \ntitle\n is not one of the fields you are updating.\n\n\n\n\n\n\npause\n\n\n\n\n\n\nDefines the number of seconds to pause between each REST request to Drupal. Include it in your configuration to lessen the impact of Islandora Workbench on your site during large jobs, for example pause: 1.5.\n\n\n\n\n\n\ndelete_media_with_nodes\n\n\n\n\ntrue\n\n\nWhen a node is deleted using a \ndelete\n task, by default, all if its media are automatically deleted. Set this option to false to not delete all of a node's media (you do not generally want to keep the media without the node).\n\n\n\n\n\n\npaged_content_from_directories\n\n\n\n\nfalse\n\n\nSet to true if you are using the \"Without page-level metadata\" method of creating paged content. See the section \"Creating paged content\" below for more information.\n\n\n\n\n\n\npaged_content_sequence_seprator\n\n\n\n\n- [hyphen]\n\n\nThe character used to separate the page sequence number from the rest of the filename. Used when creating paged content with the \"Without page-level metadata\" method. See the section \"Creating paged content\" below for more information.\n\n\n\n\n\n\npaged_content_page_model_tid\n\n\n\n\n\n\nRequired if \npaged_content_from_directories\n is true. The the term ID from the Islandora Models taxonomy to assign to pages. See the section \"Creating paged content\" below for more information.\n\n\n\n\n\n\npaged_content_page_display_hints\n\n\n\n\n\n\nThe term ID from the Islandora Display taxonomy to assign to pages. If not included, defaults to the value of the \nfield_display_hints\n in the parent's record in the CSV file. See the section \"Creating paged content\" below for more information.\n\n\n\n\n\n\npaged_content_page_content_type\n\n\n\n\n\n\nSet to the machine name of the Drupal node content type for pages created using the \"Without page-level metadata\" method if it is different than the content type of the parent (which is specified in the content_type setting). See the section \"Creating paged content\" below for more information.\n\n\n\n\n\n\nlog_json\n\n\n\n\nfalse\n\n\nWhether or not to log the raw JSON POSTed, PUT, or PATCHed to Drupal. Useful for debugging.\n\n\n\n\n\n\nuser_agent\n\n\n\n\nIslandora Workbench\n\n\nString to use as the User-Agent header in HTTP requests.\n\n\n\n\n\n\nallow_redirects\n\n\n\n\ntrue\n\n\nWhether or not to allow Islandora Workbench to respond to HTTP redirects.\n\n\n\n\n\n\nbootstrap\n\n\n\n\n\n\nAbsolute path to one or more scripts that execute prior to Workbench connecting to Drupal. Scripts can be in any language, and need to be executable. For an example of using this feature to run a script that generates sample Islandora content, see the \"Generating sample Islandora content\" section below.\n\n\n\n\n\n\nmodel [singular]\n\n\n\n\n\n\nUsed in the \ncreate_from_files\n task only. Defines the term ID from the the \"Islandora Models\" vocabulary for all nodes created using this task. Note: one of \nmodel\n or \nmodels\n is required. More detail provided in the \"Creating nodes from files only\" section below.\n\n\n\n\n\n\nmodels [plural]\n\n\n\n\n\n\nUsed in the \ncreate_from_files\n task only. Provides a mapping bewteen file extensions and terms in the \"Islandora Models\" vocabulary. Note: one of \nmodel\n or \nmodels\n is required. More detail provided in the \"Creating nodes from files only\" section below.\n\n\n\n\n\n\ncsv_field_templates\n\n\n\n\n\n\nUsed in the \ncreate\n and \nupdate\n tasks only. A list of Drupal field machine names and corresponding values that are copied into the CSV input file. More detail provided in the \"Using CSV field templates\" section below.\n\n\n\n\n\n\n\n\nWhen you run Islandora Workbench with the \n--check\n argument, it will verify that all configuration options required for the current task are present, and if they aren't tell you so.",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#the-configuration-file",
            "text": "Workbench uses a YAML configuration whose location is indicated in the  --config  argument. This file defines the various options it will use to create, update, or delete Islandora content (such as which CSV file to use and what directory your images are in). The simplest configuration file would look like this:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora  In this example, the  task  being performed is creating nodes (and optionally media). Other tasks are  create_from_files ,  update ,  delete ,  add_media , and  delete_media . Some of the configuration settings documented below are used in all tasks, while others are only used in specific tasks.",
            "title": "The configuration file"
        },
        {
            "location": "/configuration/#configuration-settings",
            "text": "The settings defined in a configuration file are:     Setting  Required  Default value  Description      task  \u2714\ufe0f   One of 'create', 'create_from_files', update', delete', 'add_media', or 'delete_media'    host  \u2714\ufe0f   The hostname, including port number if not 80, of your Islandora repository.    username  \u2714\ufe0f   The username used to authenticate the requests. This Drupal user should be a member of the \"Administrator\" role. If you want to create nodes that are owned by a specific Drupal user, include their numeric user ID in the  uid  column in your CSV.    password  \u2714\ufe0f   The user's password.    content_type   islandora_object  The machine name of the Drupal node content type you are creating or updating.    input_dir   input_data  The full or relative path to the directory containing the files and metadata CSV file.    input_csv   metadata.csv  Path to the CSV metadata file. Can be absolute, or if just the filename is provided, will be assumed to be in the directory named in  input_dir . Can also be the URL to a Google spreadsheet (see the \"Using Google Sheets as input data\" section below for more information).    google_sheets_csv_filename   google_sheet.csv  Local CSV filename for data from a Google spreadsheet. See the \"Using Google Sheets as input data\" section below for more information.    log_file_path   workbench.log  The path to the log file, absolute or relative to  workbench . See the \"Logging\" section below for more information.    id_field   id  The name of the field in the CSV that uniquely identifies each record.    delimiter   , [comma]  The delimiter used in the CSV file, for example, \",\" or \"\\t\". If omitted, defaults to \",\".    subdelimiter   | [pipe]  The subdelimiter used in the CSV file to define multiple values in one field. If omitted, defaults to \"|\".    nodes_only   false  Include this option in  create  tasks, set to  true , if you want to only create nodes and not their accompanying media. See the \"Creating nodes but not media\" section below for more information. 'fedora://'.    drupal_filesystem   fedora://  One of 'fedora://', 'public://', or 'private://'.    output_csv    The full or relative path to a CSV file with one record per node created by Workbench. See \"The output CSV file\" section below for more information.    media_use_tid   http://pcdm.org/use#OriginalFile  The term ID for the term from the \"Islandora Media Use\" vocabulary you want to apply to the media being created. You can provide a term URI instead of a term ID, for example  \"http://pcdm.org/use#OriginalFile\" .    media_type [singular]    Overrides, for all media being created, Workbench's default definition of whether the media being created is an image, file, document, audio, or video. Used in the  create ,  add_media , and  create_from_files  tasks. More detail provided in the \"Setting Media Types\" section below.    media_types [plural]    Overrides default media type definitions on a per file extension basis. Used in the  create ,  add_media , and  create_from_files  tasks. More detail provided in the \"Setting Media Types\" section below.    allow_missing_files   false  Determines if empty  file  values are allowed. If set to true, empty file values are allowed and will result in nodes without attached media. Defaults to false (which means all file values must contain the name of a file that exists in the  input_data  directory).    allow_adding_terms   false  Determines if Workbench will add taxonomy terms if they do not exist in the target vocabulary. See more information in the \"Taxonomy fields\" section below.    published   true  Whether nodes are published or not. Applies to  create  task only. Set to false if you want the nodes to be unpublished. Note that whether or not a node is published can also be set at a node level in the CSV file in the status base field, as described in the \"Base Fields\" section below. Values in the CSV override the value of published set here.    validate_title_length   true  Whether or not to check if title values in the CSV exceed Drupal's maximum allowed length of 255 characters. Defaults to true. Set to false if you are using a module that lets you override Drupal's maximum title length, such as  Node Title Length  or  Entity Title Length . Also, if your task is  update , you should set this to false if  title  is not one of the fields you are updating.    pause    Defines the number of seconds to pause between each REST request to Drupal. Include it in your configuration to lessen the impact of Islandora Workbench on your site during large jobs, for example pause: 1.5.    delete_media_with_nodes   true  When a node is deleted using a  delete  task, by default, all if its media are automatically deleted. Set this option to false to not delete all of a node's media (you do not generally want to keep the media without the node).    paged_content_from_directories   false  Set to true if you are using the \"Without page-level metadata\" method of creating paged content. See the section \"Creating paged content\" below for more information.    paged_content_sequence_seprator   - [hyphen]  The character used to separate the page sequence number from the rest of the filename. Used when creating paged content with the \"Without page-level metadata\" method. See the section \"Creating paged content\" below for more information.    paged_content_page_model_tid    Required if  paged_content_from_directories  is true. The the term ID from the Islandora Models taxonomy to assign to pages. See the section \"Creating paged content\" below for more information.    paged_content_page_display_hints    The term ID from the Islandora Display taxonomy to assign to pages. If not included, defaults to the value of the  field_display_hints  in the parent's record in the CSV file. See the section \"Creating paged content\" below for more information.    paged_content_page_content_type    Set to the machine name of the Drupal node content type for pages created using the \"Without page-level metadata\" method if it is different than the content type of the parent (which is specified in the content_type setting). See the section \"Creating paged content\" below for more information.    log_json   false  Whether or not to log the raw JSON POSTed, PUT, or PATCHed to Drupal. Useful for debugging.    user_agent   Islandora Workbench  String to use as the User-Agent header in HTTP requests.    allow_redirects   true  Whether or not to allow Islandora Workbench to respond to HTTP redirects.    bootstrap    Absolute path to one or more scripts that execute prior to Workbench connecting to Drupal. Scripts can be in any language, and need to be executable. For an example of using this feature to run a script that generates sample Islandora content, see the \"Generating sample Islandora content\" section below.    model [singular]    Used in the  create_from_files  task only. Defines the term ID from the the \"Islandora Models\" vocabulary for all nodes created using this task. Note: one of  model  or  models  is required. More detail provided in the \"Creating nodes from files only\" section below.    models [plural]    Used in the  create_from_files  task only. Provides a mapping bewteen file extensions and terms in the \"Islandora Models\" vocabulary. Note: one of  model  or  models  is required. More detail provided in the \"Creating nodes from files only\" section below.    csv_field_templates    Used in the  create  and  update  tasks only. A list of Drupal field machine names and corresponding values that are copied into the CSV input file. More detail provided in the \"Using CSV field templates\" section below.     When you run Islandora Workbench with the  --check  argument, it will verify that all configuration options required for the current task are present, and if they aren't tell you so.",
            "title": "Configuration settings"
        },
        {
            "location": "/check/",
            "text": "Overview\n\n\nYou should always (always, \nI can't stress that enough\n) check your configuration and input prior to creating, updating, or deleting content. You can do this by running Workbench with the \n--check\n option, e.g.:\n\n\n./workbench --config config.yml --check\n\n\nIf you do this, Workbench will check the following and report any errors that require your attention before proceding:\n\n\n\n\nWhether your Drupal has the required \nWorkbench Integration\n module enabled.\n\n\nWhether your configuration file contains all required values.\n\n\nWhether the \nhost\n you provided will accept the \nusername\n and \npassword\n you provided.\n\n\nWhether your CSV file contains required columns headers, including the field defined as the unique ID for each record (defaults to \"id\" if the \nid_field\n key is not in your config file)\n\n\nWhether your CSV column headers correspond to existing Drupal field machine names.\n\n\nWhether all Drupal fields that are configured to be required are present in the CSV file.\n\n\nWhether multivalued fields exceed their allowed number of values.\n\n\nWhether the files named in the CSV file are present, or in the case of remote files, are accessible (but this check is skipped if \nallow_missing_files: true\n is present in your config file for \"create\" tasks). If \nnodes_only\n is true, this check is skipped.\n\n\nIf the \nlangcode\n field is present in your CSV, whether values in it are valid Drupal language codes.\n\n\nWhether values in the \ntitle\n field exceed Drupal's maximum length for titles of 255 characters (but this check is skipped if \nvalidate_title_length\n is set to \nFalse\n).\n\n\nWhether values in text-type fields exceed their configured maximum length.\n\n\nWhether each row contains the same number of columns as there are column headers.\n\n\nWhether the nodes refrenced in \nfield_member_of\n (if that field is present in the CSV) exist.\n\n\nWhether the columns required to create paged content are present (see \"Creating paged content\" below).\n\n\nWhether the term ID (or term URI) provided for \nmedia_use_tid\n is a member of the \"Islandora Media Use\" vocabulary.\n\n\nWhether term ID and term URIs used in CSV fields correspond to existing terms.\n\n\nWhether values used in typed relation fields are in the required format, whether values are namespaced when they need to be, and whether the term IDs/term names/term URIs used in the values exist in the vocabularies configured for the field.\n\n\nWhether values used in geolocation fields are valid lat,long coordinates.\n\n\nWhether values used in EDTF fields are valid EDTF date/time values (subset of date/time values only; see \ndocumentation\n for more detail).\n\n\nWhether the length of new terms exceeds 255 characters, which is the maximum length for a term name.\n\n\nWhether term names in your CSV require a vocabulary namespace.\n\n\nIf using the pages from directories configuration:\n\n\nWhether page filenames contain an occurance of the sequence separator.\n\n\nWhether any page directories are empty.\n\n\nIf the \ncreated\n field is present in your CSV file, whether the values in it are formatted correctly (like \"2020-11-15T23:49:22+00:00\") and whether the date is in the past (both of which are Drupal requirements).\n\n\nIf the \nuid\n field is present in your CSV file, whether the user IDs in that field exist in the target Drupal. Note that this check does not inspect permissions or roles, only that the user ID exists.\n\n\nWhether aliases in the \nurl_alias\n field in your CSV already exist, and whether they start with a leading slash (\n/\n).\n\n\n\n\nIf Workbench detects a configuration or input data violation, it will either stop and tell you why it stopped, or (if the violation will not cause Workbench's interaction with Drupal to fail), tell you that it found an anomoly and to check the log file for more detail.\n\n\nTypical (and recommended) Islandora Workbench usage\n\n\nYou will probably need to run Workbench using \n--check\n a few times before you will be ready to run it without \n--check\n and commit your data to Islandora. For example, you may need to correct errors in taxonomy term IDs or names, fix errors in media filenames, or wrap values in your CSV files in quotation marks.\n\n\nIt's also a good idea to check the Workbench log file after running \n--check\n. All warnings and errors are printed to the console, but the log file may contain additional information or detail that will help you resolve issues.\n\n\nOnce you have used \n--check\n to detect all of the problems with your CSV data, committing it to Islandora will work very reliably.\n\n\nAlso, it is good practice to check your log after each time you run Islandora Workbench, since it may contain information that is not printed to the caonsole.",
            "title": "Checking configuration and input data"
        },
        {
            "location": "/check/#overview",
            "text": "You should always (always,  I can't stress that enough ) check your configuration and input prior to creating, updating, or deleting content. You can do this by running Workbench with the  --check  option, e.g.:  ./workbench --config config.yml --check  If you do this, Workbench will check the following and report any errors that require your attention before proceding:   Whether your Drupal has the required  Workbench Integration  module enabled.  Whether your configuration file contains all required values.  Whether the  host  you provided will accept the  username  and  password  you provided.  Whether your CSV file contains required columns headers, including the field defined as the unique ID for each record (defaults to \"id\" if the  id_field  key is not in your config file)  Whether your CSV column headers correspond to existing Drupal field machine names.  Whether all Drupal fields that are configured to be required are present in the CSV file.  Whether multivalued fields exceed their allowed number of values.  Whether the files named in the CSV file are present, or in the case of remote files, are accessible (but this check is skipped if  allow_missing_files: true  is present in your config file for \"create\" tasks). If  nodes_only  is true, this check is skipped.  If the  langcode  field is present in your CSV, whether values in it are valid Drupal language codes.  Whether values in the  title  field exceed Drupal's maximum length for titles of 255 characters (but this check is skipped if  validate_title_length  is set to  False ).  Whether values in text-type fields exceed their configured maximum length.  Whether each row contains the same number of columns as there are column headers.  Whether the nodes refrenced in  field_member_of  (if that field is present in the CSV) exist.  Whether the columns required to create paged content are present (see \"Creating paged content\" below).  Whether the term ID (or term URI) provided for  media_use_tid  is a member of the \"Islandora Media Use\" vocabulary.  Whether term ID and term URIs used in CSV fields correspond to existing terms.  Whether values used in typed relation fields are in the required format, whether values are namespaced when they need to be, and whether the term IDs/term names/term URIs used in the values exist in the vocabularies configured for the field.  Whether values used in geolocation fields are valid lat,long coordinates.  Whether values used in EDTF fields are valid EDTF date/time values (subset of date/time values only; see  documentation  for more detail).  Whether the length of new terms exceeds 255 characters, which is the maximum length for a term name.  Whether term names in your CSV require a vocabulary namespace.  If using the pages from directories configuration:  Whether page filenames contain an occurance of the sequence separator.  Whether any page directories are empty.  If the  created  field is present in your CSV file, whether the values in it are formatted correctly (like \"2020-11-15T23:49:22+00:00\") and whether the date is in the past (both of which are Drupal requirements).  If the  uid  field is present in your CSV file, whether the user IDs in that field exist in the target Drupal. Note that this check does not inspect permissions or roles, only that the user ID exists.  Whether aliases in the  url_alias  field in your CSV already exist, and whether they start with a leading slash ( / ).   If Workbench detects a configuration or input data violation, it will either stop and tell you why it stopped, or (if the violation will not cause Workbench's interaction with Drupal to fail), tell you that it found an anomoly and to check the log file for more detail.",
            "title": "Overview"
        },
        {
            "location": "/check/#typical-and-recommended-islandora-workbench-usage",
            "text": "You will probably need to run Workbench using  --check  a few times before you will be ready to run it without  --check  and commit your data to Islandora. For example, you may need to correct errors in taxonomy term IDs or names, fix errors in media filenames, or wrap values in your CSV files in quotation marks.  It's also a good idea to check the Workbench log file after running  --check . All warnings and errors are printed to the console, but the log file may contain additional information or detail that will help you resolve issues.  Once you have used  --check  to detect all of the problems with your CSV data, committing it to Islandora will work very reliably.  Also, it is good practice to check your log after each time you run Islandora Workbench, since it may contain information that is not printed to the caonsole.",
            "title": "Typical (and recommended) Islandora Workbench usage"
        },
        {
            "location": "/preparing_data/",
            "text": "Islandora Workbench allows for arranging your input data in a variety of ways. The two basic sets of data you need to preare (depending on what task you are performing) are:\n\n\n\n\na CSV file, containing data that will populate node fields (or do other things depending on what task you are performing)\n\n\nfiles that will be used as Drupal media.\n\n\n\n\nUsing an input directory\n\n\nIn this configuration, you define an input directory (identified by the \ninput_dir\n config option) that contains a CSV file with field content (identified by the \ninput_csv\n config option) and any accompanying media files you want to add to the newly created nodes:\n\n\nyour_folder/\n\u251c\u2500\u2500 image1.JPG\n\u251c\u2500\u2500 pic_saturday.jpg\n\u251c\u2500\u2500 image-27262.jpg\n\u251c\u2500\u2500 IMG_2958.JPG\n\u251c\u2500\u2500 someimage.jpg\n\u2514\u2500\u2500 metadata.csv\n\n\n\n\nThe names of the image/PDF/video/etc. files can take any form you want since they are included in the \nfile\n column of the CSV file. Files of any extension are allowed. Islandora Workbench reads the CSV file and iterates throught it, performing the current task for each record. Files other than the CSV and your media files are allowed in this directory.\n\n\nThis is Islandora Workbench's default configuration. If you do not specify an \ninput_dir\n or an \ninput_csv\n, as illustrated in this minimal configuration file:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n\n\n\nWorkbench will assume your files are in a directory named \"input_data\" in the same directory as the Workbench script, and that within that directory, your CSV file is named \"metadata.csv\".\n\n\nworkbench\nworkbench_utils.py\n\u251c\u2500\u2500 your_folder/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 pic_saturday.jpg\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 IMG_2958.JPG\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 metadata.csv\n\n\n\n\nUsing absolute file paths\n\n\nBoth your input CSV file and the values in its \nfile\n column can be absolute paths. In this configuration, your \ninput_csv\n configuration setting must specify the absolute path to your input CSV file, and each value within its \nfile\n column may point to a file to be used as the corresponding node's media file. You can also mix absolute and relative filenames in the same CSV file, but all relative filenames are considered to be in the directory named in \ninput_dir\n. An example configuration file for this is:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: /tmp/input.csv\n\n\n\n\nAnd within the \nfile\n column of the CSV, values like:\n\n\nid,file,title\n001,/tmp/mydata/file01.png,A very good file\n0002,/home/me/Documents/files/cat.jpg,My cat\n003,dog.png,My dog\n\n\n\n\nUsing URLs as file paths\n\n\nIn the \nfile\n column, you can also use URLs to files, like this:\n\n\nid,file,title\n001,http://www.mysite.com/file01.png,A very good file\n0002,https://mycatssite.org/images/cat.jpg,My cat\n003,dog.png,My dog\n\n\n\n\nMore information\n is available on using URLs in your \nfile\n column.\n\n\nUsing a Google Sheet as the input CSV file\n\n\nWith this option, your configuration's \ninput_csv\n option contains the URL to a publicly readable Google Sheet. To do this, simply provide the URL to the Google spreadsheet in your configuration file's \ninput_csv\n option, like this:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: 'https://docs.google.com/spreadsheets/d/13Mw7gtBy1A3ZhYEAlBzmkswIdaZvX18xoRBxfbgxqWc/edit#gid=0'\n\n\n\n\nThat's all you need to do. Every time Workbench runs, it fetches the CSV content of the spreadsheet and saves it to a local file in the directory named in your \ninput_directory\n configuration option, and from that point onward in its execution, uses the locally saved version of the spreadsheet. The default filename for this CSV file is \ngoogle_sheet.csv\n but you can change it if you need to by including the \ngoogle_sheets_csv_filename\n option in your configuration file, e.g., \ngoogle_sheets_csv_filename: my_filename.csv\n.\n\n\nIslandora Workbench fetches a new copy of the CSV data every time it runs (even with the \n--check\n option), so if you make changes to the contents of that local file, the changes will be overwritten with the data from the Google spreadsheet the next time you run Workbench. If you don't want to overwrite your local copy of the data, rename the local CSV file manually before running Workbench, and update the \ninput_csv\n option in your configuration file accordingly.\n\n\nAn advantage of this constant refreshing of the CSV data is that you can delete all the rows from the Google spreadsheet, repopulate them with new data, and use the same configuration later (or, at least use the same \ninput_csv\n URL).\n\n\nNote that:\n\n\n\n\nYou can use a Google spreadsheet in all tasks that use a CSV file as input.\n\n\nAll of the columns required in a local CSV file are also required in the Google spreadsheet.\n\n\nThe URL in the configuration file needs single or double quotes around it, like any other value that contains a colon.\n\n\nYou can use either the URL you copy from your browser when you are viewing the spreadsheet (which ends in \"/edit#gid=0\" or something similar), or the \"sharing\" URL you copy into your clipboard from within the \"Share\" dialog box (which ends in \"edit?usp=sharing\"). Either is OK.\n\n\nThe Google spreadsheet must be publicly readable, e.g. with \"Anyone on the Internet with this link can view\" permission.\n\n\nSpreadsheets work best for descriptive metadata if all cells are formatted as \"Plain text\". To do this, in Sheets, select all cells, then choose the menu items Format > Number > Plain text \nbefore adding any content to the cells\n.\n\n\nThe worksheet that the CSV data is taken from is the first one in the spreadsheet (i.e., the one named in the left-most tab).\n\n\nIf the values in the \nfile\n column of the spreadsheet are relative, they are assumed to point to files within your local \ninput_directory\n, just like they do in a local CSV input file. However, you can also use abosolute file paths and URLs in the \nfile\n column, as described above.\n\n\n\n\nBlank or missing \"file\" values\n\n\nBy defualt, if the \nfile\n value for a row is empty, Workbench's \n--check\n option will show an error. But, in some cases you may want to create a node but not add any media. If you add \nallow_missing_files: true\n to your config file for \"create\" tasks, you can leave the \nfile\n cell in your CSV for that item empty.\n\n\nCreating nodes but not media\n\n\nIf you want to only create nodes and not media, you can do so by including \nnodes_only: true\n in your configuration file. More detail \nis available\n.",
            "title": "Preparing your data"
        },
        {
            "location": "/preparing_data/#using-an-input-directory",
            "text": "In this configuration, you define an input directory (identified by the  input_dir  config option) that contains a CSV file with field content (identified by the  input_csv  config option) and any accompanying media files you want to add to the newly created nodes:  your_folder/\n\u251c\u2500\u2500 image1.JPG\n\u251c\u2500\u2500 pic_saturday.jpg\n\u251c\u2500\u2500 image-27262.jpg\n\u251c\u2500\u2500 IMG_2958.JPG\n\u251c\u2500\u2500 someimage.jpg\n\u2514\u2500\u2500 metadata.csv  The names of the image/PDF/video/etc. files can take any form you want since they are included in the  file  column of the CSV file. Files of any extension are allowed. Islandora Workbench reads the CSV file and iterates throught it, performing the current task for each record. Files other than the CSV and your media files are allowed in this directory.  This is Islandora Workbench's default configuration. If you do not specify an  input_dir  or an  input_csv , as illustrated in this minimal configuration file:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora  Workbench will assume your files are in a directory named \"input_data\" in the same directory as the Workbench script, and that within that directory, your CSV file is named \"metadata.csv\".  workbench\nworkbench_utils.py\n\u251c\u2500\u2500 your_folder/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 pic_saturday.jpg\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 IMG_2958.JPG\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 metadata.csv",
            "title": "Using an input directory"
        },
        {
            "location": "/preparing_data/#using-absolute-file-paths",
            "text": "Both your input CSV file and the values in its  file  column can be absolute paths. In this configuration, your  input_csv  configuration setting must specify the absolute path to your input CSV file, and each value within its  file  column may point to a file to be used as the corresponding node's media file. You can also mix absolute and relative filenames in the same CSV file, but all relative filenames are considered to be in the directory named in  input_dir . An example configuration file for this is:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: /tmp/input.csv  And within the  file  column of the CSV, values like:  id,file,title\n001,/tmp/mydata/file01.png,A very good file\n0002,/home/me/Documents/files/cat.jpg,My cat\n003,dog.png,My dog",
            "title": "Using absolute file paths"
        },
        {
            "location": "/preparing_data/#using-urls-as-file-paths",
            "text": "In the  file  column, you can also use URLs to files, like this:  id,file,title\n001,http://www.mysite.com/file01.png,A very good file\n0002,https://mycatssite.org/images/cat.jpg,My cat\n003,dog.png,My dog  More information  is available on using URLs in your  file  column.",
            "title": "Using URLs as file paths"
        },
        {
            "location": "/preparing_data/#using-a-google-sheet-as-the-input-csv-file",
            "text": "With this option, your configuration's  input_csv  option contains the URL to a publicly readable Google Sheet. To do this, simply provide the URL to the Google spreadsheet in your configuration file's  input_csv  option, like this:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: 'https://docs.google.com/spreadsheets/d/13Mw7gtBy1A3ZhYEAlBzmkswIdaZvX18xoRBxfbgxqWc/edit#gid=0'  That's all you need to do. Every time Workbench runs, it fetches the CSV content of the spreadsheet and saves it to a local file in the directory named in your  input_directory  configuration option, and from that point onward in its execution, uses the locally saved version of the spreadsheet. The default filename for this CSV file is  google_sheet.csv  but you can change it if you need to by including the  google_sheets_csv_filename  option in your configuration file, e.g.,  google_sheets_csv_filename: my_filename.csv .  Islandora Workbench fetches a new copy of the CSV data every time it runs (even with the  --check  option), so if you make changes to the contents of that local file, the changes will be overwritten with the data from the Google spreadsheet the next time you run Workbench. If you don't want to overwrite your local copy of the data, rename the local CSV file manually before running Workbench, and update the  input_csv  option in your configuration file accordingly.  An advantage of this constant refreshing of the CSV data is that you can delete all the rows from the Google spreadsheet, repopulate them with new data, and use the same configuration later (or, at least use the same  input_csv  URL).  Note that:   You can use a Google spreadsheet in all tasks that use a CSV file as input.  All of the columns required in a local CSV file are also required in the Google spreadsheet.  The URL in the configuration file needs single or double quotes around it, like any other value that contains a colon.  You can use either the URL you copy from your browser when you are viewing the spreadsheet (which ends in \"/edit#gid=0\" or something similar), or the \"sharing\" URL you copy into your clipboard from within the \"Share\" dialog box (which ends in \"edit?usp=sharing\"). Either is OK.  The Google spreadsheet must be publicly readable, e.g. with \"Anyone on the Internet with this link can view\" permission.  Spreadsheets work best for descriptive metadata if all cells are formatted as \"Plain text\". To do this, in Sheets, select all cells, then choose the menu items Format > Number > Plain text  before adding any content to the cells .  The worksheet that the CSV data is taken from is the first one in the spreadsheet (i.e., the one named in the left-most tab).  If the values in the  file  column of the spreadsheet are relative, they are assumed to point to files within your local  input_directory , just like they do in a local CSV input file. However, you can also use abosolute file paths and URLs in the  file  column, as described above.",
            "title": "Using a Google Sheet as the input CSV file"
        },
        {
            "location": "/preparing_data/#blank-or-missing-file-values",
            "text": "By defualt, if the  file  value for a row is empty, Workbench's  --check  option will show an error. But, in some cases you may want to create a node but not add any media. If you add  allow_missing_files: true  to your config file for \"create\" tasks, you can leave the  file  cell in your CSV for that item empty.",
            "title": "Blank or missing \"file\" values"
        },
        {
            "location": "/preparing_data/#creating-nodes-but-not-media",
            "text": "If you want to only create nodes and not media, you can do so by including  nodes_only: true  in your configuration file. More detail  is available .",
            "title": "Creating nodes but not media"
        },
        {
            "location": "/fields/",
            "text": "In addition to content files like images, the input data used by Workbench is a CSV file. This CSV file contains the metadata that is to be added to new or existing nodes, and some additional reserved columns specific to Workbench. Field values are either strings (for string or text fields) like \nI am a string\n, integers (for \nfield_weight\n, for example) like \n100\n or \n7281\n, \n1\n or \n0\n for binary fields, Drupal-generated IDs (term IDs taxonomy terms or node IDs for collections and parents), or structured strings (for typed relation and geolocation fields) like \n\"49.16667,-123.93333\"\n.\n\n\n\n\nNote\n\n\nAs is standard with CSV data, field values do not need to be wrapped in double quotation marks (\n\"\n), unless they contain an instance of the delimiter character (e.g., a comma). Spreadsheet applications such as Google Sheets and LibreOffice Calc will create valid CSV.\n\n\n\n\n\n\nNote\n\n\nAlso note that you can have Islandora Workbench \ngenerate\n a template CSV file for you.\n\n\n\n\nThe following types of fields can be used in your input CSV file:\n\n\n\n\nbase fields\n\n\ntext (plain, plain long, etc.) fields\n\n\ninteger fields\n\n\nboolean fields, with values 1 or 0\n\n\nEDTF date fields\n\n\nentity reference (taxonomy and linked node) fields\n\n\ntyped relation (taxonomy and linked node) fields\n\n\ngeolocation fields\n\n\n\n\nWhere Drupal's configuration allows, fields in your input CSV can contain single values or multiple values, as described below.\n\n\nRequired fields\n\n\nThe following columns in your CSV are required (depending on task):\n\n\n\n\n\n\n\n\nTask\n\n\nRequired in CSV\n\n\nNote\n\n\n\n\n\n\n\n\n\n\ncreate\n\n\nid\n\n\nOr the column name specified in the \nid_field\n configuration option\n\n\n\n\n\n\n\n\ntitle\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nEmpty values in the \nfile\n field are allowed if \nallow_missing_files\n is present in your configuration file, in which case a node will be created but it will have no attached media.\n\n\n\n\n\n\nupdate\n\n\nnode_id\n\n\n\n\n\n\n\n\ndelete\n\n\nnode_id\n\n\n\n\n\n\n\n\nadd_media\n\n\nnode_id\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nfile\n must contain a filename, file path, or URL. \nallow_missing_files\n does not work with the \nadd_media\n task.\n\n\n\n\n\n\n\n\nIf a required field is missing from your CSV, \n--check\n will tell you.\n\n\nValues in the \"file\" field\n\n\nValues in the \nfile\n field in your CSV can be relative to the directory named in \ninput_dir\n, abolute paths, or URLs. Examples of each:\n\n\n\n\nrelative to directory named in \"input_dir\": \nmyfile.png\n\n\nabsolute: \n/tmp/data/myfile.png\n\n\nURL: \nhttp://example.com/files/myfile.png\n\n\n\n\nRelative, absolute, and URL file locations can exist within the same CSV file.\n\n\nThings to note about URL paths:\n\n\n\n\nWorkbench downloads files identified by URLs and saves them in the directory named in \ninput_dir\n before processing them further. It does not delete the files after they have been ingested into Islandora.\n\n\nFiles identified by URLs must be accessible to the Workbench script, which means they must not require a username/password; however, they can be protected by a firewall, ACL, etc. as long as the computer running Workbench is allowed to retrieve the files without authenticating.\n\n\nCurrently Workbench requires that the URLs point directly to a file and not to a script, wrapper page, or other indirect route to the file.\n\n\n\n\nBase fields\n\n\nBase fields are basic node properties, shared by all content types. The base fields you can include in your CSV file are:\n\n\n\n\ntitle\n: This field is required for all rows in your CSV for the \ncreate\n task. Optional for the 'update' task. Drupal limits the title's length to 255 characters, and Workbench will check that titles are less than 255 characters unless your configuration file contains \nvalidate_title_length: False\n as described above.\n\n\nlangcode\n: The language of the node. Optional. If included, use one of Drupal's language codes as values (common values are 'en', 'fr', and 'es'; the entire list can be seen \nhere\n. If absent, Drupal sets the value to the default value for your content type.\n\n\nuid\n: The Drupal user ID to assign to the node and media created with the node. Optional. Only available in \ncreate\n tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).\n\n\ncreated\n: The timestamp to use in the node's \"created\" attribute and in the \"created\" attribute of the media created with the node. Optional, but if present, it must be in format 2020-11-15T23:49:22+00:00 (the +00:00 is the difference to Greenwich time/GMT). Only available in \ncreate\n tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).\n\n\n\n\nContent type-specific fields\n\n\nFor other Drupal fields, the column headings in the CSV file must match machine names of fields that exist in the target Islandora content type. Fields' machine names are visible within the \"Manage fields\" section of each content type's configuration, here circled in red: \n\n\n\n\nThese field names, plus the fields indicated in the \"Required fields\" section above, are the column headers in your CSV file. \n\n\nSingle and multi-valued fields\n\n\nDrupal allows for fields to have a single value, a specific maximum number of values, or unlimited number of values.\n\n\nSingle-valued fields\n\n\nIn your CSV file, single-valued fields simply contain the value, which, depending on the field type, can be a string or an integer. For example, using the fields defined by the Islandora Defaults module for the \"Repository Item\" content type, your CSV file could look like this:\n\n\nfile,title,id,field_model,field_description,field_rights,field_extent,field_access_terms,field_member_of\nmyfile.jpg,My nice image,obj_00001,24,\"A fine image, yes?\",Do whatever you want with it.,There's only one image.,27,45\n\n\n\n\nIn this example, the term ID for the tag you want to assign in \nfield_access_terms\n is 27, and the node ID of the collection you want to add the object to (in \nfield_member_of\n) is 45.\n\n\nMultivalued fields\n\n\nFor multivalued fields, you separate the values within a field with a pipe (\n|\n), like this:\n\n\nfile,title,field_my_multivalued_field\nIMG_1410.tif,Small boats in Havana Harbour,foo|bar\nIMG_2549.jp2,Manhatten Island,bif|bop|burp\n\n\n\n\nThis works for string fields as well as reference fields, e.g.:\n\n\nfile,title,field_my_multivalued_taxonomy_field\nIMG_1410.tif,Small boats in Havana Harbour,35|46\nIMG_2549.jp2,Manhatten Island,34|56|28\n\n\n\n\nDrupal strictly enforces the maximum number of values allowed in a field. If the number of values in your CSV file for a field exceed a field's configured maximum number of fields, Workbench will only populate the field to the field's configured limit.\n\n\nThe subdelimiter character defaults to a pipe (\n|\n) but can be set in your config file using the \nsubdelimiter: \";\"\n option.\n\n\nField types\n\n\nTaxonomy fields\n\n\nIn CSV columns for taxonomy fields, you can use either term IDs (integers) or term names (strings). You can even mix IDs and names in the same field:\n\n\nfile,title,field_my_multivalued_taxonomy_field\nimg001.png,Picture of cats and yarn,Cats|46\nimg002.png,Picture of dogs and sticks,Dogs|Sticks\nimg003.png,Picture of yarn and needles,\"Yarn, Balls of\"|Knitting needles\n\n\n\n\nBy default, if you use a term name in your CSV data that doesn't match a term name that exists in the referenced taxonomy, Workbench will detect this when you use \n--check\n and exit. However, if you add \nallow_adding_terms: true\n to your configuration file for \ncreate\n and \nupdate\n tasks, Workbench will create the new term. A few of things to note:\n\n\n\n\nTo create new terms, your target Drupal needs to have its \"Taxonomy term\" REST endpoint enabled as described in the \"Requirements\" section at the beginning of this README.\n\n\nIf multiple records in your CSV contain the same new term name in the same field, the term is only created once.\n\n\nWhen Workbench checks to see if the term with the new name exists in the target vocabulary, it normalizes it and compares it with existing term names in that vocabulary, applying these normalization rules to both the new term and the existing terms:\n\n\nIt strips all leading and trailing whitespace.\n\n\nIt replaces all other whitespace with a single space character.\n\n\nIt converts all text to lower case.\n\n\nIt removes all punctuation.\n\n\nIf the term name you provide in the CSV file does not match any existing term names in the vocabulary linked to the field after these normalization rules are applied, it is used to create a new taxonomy term. If it does match, Workbench populates the field in your nodes with the matching term.\n\n\n\n\n\n\n\n\nAdding new terms has some contraints:\n\n\n\n\nCreating taxonomy terms by including them in your CSV file adds new terms to the root of the applicable vocabulary. Workbench cannot create a new term that has another term as its parent (i.e. terms below the top leve of a hierarchical taxonomy). However, for existing terms, Workbench doesn't care where they are in a taxonomy's hierarchy.\n\n\nTerms created in this way do not have any external URIs. If you want your terms to have external URIs, you will need to either create the terms manually or add the URIs manually after the terms are created by Islandora Workbench.\n\n\n--check\n will identify any new terms that exceed Drupal's maxiumum allowed length for term names, 255 characters. If a term name is longer than 255 characters, Workbench will truncate it at that length, log that it has done so, and create the term.\n\n\nTaxonomy terms created with new nodes are not removed when you delete the nodes.\n\n\n\n\nUsing term names in multi-vocabulary fields\n\n\nWhile most node taxonomy fields reference only a single vocabulary, Drupal does allow fields to reference multiple vocabularies. This ability poses a problem when we use term names instead of term IDs in our CSV files: in a multi-vocabulary field, Workbench can't be sure which term name belongs in which of the multiple vocabularies referenced by that field. This applies to both existing terms and to new terms we want to add when creating node content.\n\n\nTo avoid this problem, we need to tell Workbench which of the multple vocabularies each term name should (or does) belong to. We do this by namespacing terms with the applicable vocabulary ID.\n\n\nFor example, let's imagine we have a node field whose name is \nfield_sample_tags\n, and this field references two taxonomies, \ncats\n and \ndogs\n. To use the terms \nTuxedo\n, \nTabby\n, \nGerman Shepherd\n in the CSV when adding new nodes, we would namespace them with vocabulary IDs like this:\n\n\nfield_sample_tags\ncats:Tabby\ncats:Tuxedo\ndogs:German Shepherd\n\n\n\n\nIf you want to use multiple terms in a single field, you would namespace them all:\n\n\ncats:Tuxedo|cats:Misbehaving|dogs:German Shepherd\n\n\n\n\nTerm names containing commas (\n,\n) in multi-valued, multi-vocabulary fields need special treatment (no surprise there): you need to wrap the entire field in quotation marks (like you would for any other CSV value that contains a comma), and in addition, specify the namespace within each of the values:\n\n\n\"tags:gum, Bubble|tags:candy, Hard\"\n\n\n\n\nUsing these conventions, Workbench will be certain which vocabulary the term names belong to. Workbench will remind you during its \n--check\n operation that you need to namespace terms. It determines 1) if the field references multiple vocabularies, and then checks to see 2) if the field's values in the CSV are term IDs or term names. If you use term names in multi-vocabulary fields, and the term names aren't namespaced, Workbench will warn you:\n\n\nError: Term names in multi-vocabulary CSV field \"field_tags\" require a vocabulary namespace; value \"Dogs\" in row 4 does not have one.\n\n\n\n\nNote that since \n:\n is a special character when you use term names in multi-vocabulary CSV fields, you can't add a namespaced term that itself contains a \n:\n. You need to add it manually to Drupal and then use its term ID (or name, or URI) in your CSV file.\n\n\nUsing term URIs instead of term IDs\n\n\nIslandora Workbench lets you use URIs assigned to terms instead of term IDs. You can use a term URI in the \nmedia_use_tid\n configuration option (for example, \n\"http://pcdm.org/use#OriginalFile\"\n) and in taxonomy fields in your metadata CSV file:\n\n\nfield_model\nhttps://schema.org/DigitalDocument\nhttp://purl.org/coar/resource_type/c_18cc\n\n\n\n\nDuring \n--check\n, Workbench will validate that URIs correspond to existing taxonomy terms.\n\n\nUsing term URIs has some constraints:\n\n\n\n\nYou cannot create a new term by providing a URI like you can by providing a term name.\n\n\nIf the same URI is registered with more than one term, Workbench will choose one and write a warning to the log indicating which term it chose and which terms the URI is registered with. However, \n--check\n will detect that a URI is registered with more than one term and warn you. At that point you can edit your CSV file to use the correct term ID rather than the URI.\n\n\n\n\nEDTF fields\n\n\n\n\nNote\n\n\nThe date types named below are a subset of the EDTF specification. If you need validatation of additional date types, please \nopen an issue\n.\n\n\n\n\nRunning Islandora Workbench with \n--check\n will validate the following subset of \nExtended Date/Time Format (EDTF) Specification\n date types in EDTF fields:\n\n\n\n\n\n\n\n\nType\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\nDate\n\n\n1976-04-23\n\n\n\n\n\n\n\n\n1976-04\n\n\n\n\n\n\n\n\n1976\n\n\n\n\n\n\nQualified date\n\n\n1976?\n\n\n\n\n\n\n\n\n1976-04~\n\n\n\n\n\n\n\n\n1976-04-24%\n\n\n\n\n\n\nDate and time\n\n\n1985-04-12T23:20:30\n\n\n\n\n\n\nInterval\n\n\n1964/2008\n\n\n\n\n\n\n\n\n2004-06/2006-08\n\n\n\n\n\n\n\n\n2004-06-04/2006-08-01\n\n\n\n\n\n\n\n\n2004-06/2006-08-01\n\n\n\n\n\n\nSet\n\n\n[1667,1668,1670..1672]\n\n\n\n\n\n\n\n\n[1672..1682]\n\n\n\n\n\n\n\n\n[1672,1673]\n\n\n\n\n\n\n\n\n[..1672]\n\n\n\n\n\n\n\n\nSubvalues in multivalued CSV fields are validated separately, e.g. if your CSV value is \n2004-06/2006-08|2007-01/2007-04\n, \n2004-06/2006-08\n and \n2007-01/2007-04\n are validated separately.\n\n\nTyped Relation fields\n\n\nUnlike most field types, which take a string or an integer as their value in the CSV file, fields that have the \"Typed Relation\" type take structured values that need to be entered in a specific way in the CSV file. An example of this type of field is the \"Linked Agent\" field in the Repository Item content type created by the Islandora Defaults module.\n\n\n\n\nWarning\n\n\nIn the following section, the word \"namespace\" is used to mean something additional to what it means in the \"Using term names in multi-vocabulary fields\" section above. Below, \"namespace\" is used both to refer to a vocabulary ID in the target Drupal and an ID for the authority list of relators maintained outside of Drupal, for example by the Library of Congress.\n\n\n\n\nThe structure of values for this field encode a namespace (indicating the external authority list the relation is from), a relation type, and a target (which identifies what the relation refers to, such as a specific taxonomy term in the target Drupal), each separated by a colon (\n:\n). The first two parts, the namespace and the relation type, come from the \"Available Relations\" section of the field's configuration, which looks like this (using the \"Linked Agent\" field's configuration as an example):\n\n\n\n\nIn the node edit form, this structure is represented as a select list of the types (the namespace is not shown) and, below that, an autocomplete field to indicate the relation target, e.g.:\n\n\n\n\nTo include these kind of values in a CSV field, we need to use a structured string as described above (namespace:relationtype:targetid). For example:\n\n\nrelators:art:30\n\n\nYou can also use taxonomy term names as targets:\n\n\n\"relators:art:Jordan, Mark\"\n\n\nHere's where we start to use \"namespace\" in two different ways. If the field you are populating references multiple vocabularies, you must include a Drupal vocabulary namespace with your term name:\n\n\n\"relators:art:person:Jordan, Mark\"\n\n\n(\nrelators\n is the external namespace, and \nperson\n is the Drupal vocabulary namespace.)\n\n\nYou can also use HTTP URIs as typed relation targets:\n\n\n\"relators:art:http://markjordan.net\n\n\n\n\nNote that the structure required for typed relation values in the CSV file is not the same as the structure of the relations configuration depicted in the first screenshot above; the CSV values use only colons to seprate the three parts, but the field configuration within Drupal uses a colon and then a pipe (|) to structure its values.\n\n\n\n\nIn this example of a CSV value, \nrelators\n is the namespace that the relation type \nart\n is from (the Library of Congress \nRelators\n vocabulary), and the target taxonomy term ID is \n30\n. In the screenshot above showing the \"Linked Agent\" field of a node, the value of the Relationship Type select list is \"Artist (art)\", and the value of the associated taxonomy term field is the person's name that has the taxonomy term ID \"30\" (in this case, \"Jordan, Mark\"):\n\n\nIf you want to include multiple typed relation values in a single field of your CSV file (such as in \"field_linked_agent\"), separate the three-part values with the same subdelimiter character you use in other fields, e.g. (\n|\n) (or whatever you have configured as your \nsubdelimiter\n):\n\n\nrelators:art:30|relators:art:45\n\n\nAdding new typed relation targets\n\n\nIslandora Workbench allows you to add new typed relation targets while creating and updating nodes. These targets are taxonomy terms. Your configuration file must include the \nallow_adding_terms: true\n option to add new targets. In general, adding new typed relation targets is just like adding new taxonomy terms as described above in the \"Taxonomy fields\" section.\n\n\nAn example of a CSV value that adds a new target term is:\n\n\n\"relators:art:person:Jordan, Mark\"\n\n\nYou can also add multiple new targets:\n\n\n\"relators:art:person:Annez, Melissa|relators:art:person:Jordan, Mark\"\n\n\nNote that:\n\n\n\n\nFor multi-vocabulary fields, new typed relator targets must be accommpanied by a vocabulary namespace (\nperson\n in the above examples).\n\n\nYou cannot add new relators (e.g. \nrelators:foo\n) in your CSV file, only new target terms.\n\n\n\n\nGeolocation fields\n\n\nThe Geolocation field type, managed by the \nGeolocation Field\n contrib module, stores latitude and longitude coordinates in separate data elements. To add or update fields of this type, Workbench needs to provide the latitude and longitude data in these separate elements.\n\n\nTo simplify entering geocoordinates in the CSV file, Workbench allows geocoordinates to be in \nlat,lng\n format, i.e., the latitude coordinate followed by a comma followed by the longitude coordinate. When Workbench reads your CSV file, it will split data on the comma into the required lat and lng parts. An example of a single geocoordinate in a field would be:\n\n\nfield_coordinates\n\"49.16667,-123.93333\"\n\n\n\n\nYou can include multiple pairs of geocoordinates in one CSV field if you separate them with the subdelimiter character:\n\n\nfield_coordinates\n\"49.16667,-123.93333|49.25,-124.8\"\n\n\n\n\nNote that:\n\n\n\n\nGeocoordinate values in your CSV need to be wrapped in double quotation marks, unless the \ndelimiter\n key in your configuration file is set to something other than a comma.\n\n\nIf you are entering geocoordinates into a spreadsheet, a leading \n+\n will make the spreadsheet application think you are entering a formula. You can work around this by escaping the \n+\n with a backslash (\n\\\n), e.g., \n49.16667,-123.93333\n should be \n\\+49.16667,-123.93333\n, and \n49.16667,-123.93333|49.25,-124.8\n should be \n\\+49.16667,-123.93333|\\+49.25,-124.8\n. Workbench will strip the leading \n\\\n before it populates the Drupal fields.",
            "title": "Fields"
        },
        {
            "location": "/fields/#required-fields",
            "text": "The following columns in your CSV are required (depending on task):     Task  Required in CSV  Note      create  id  Or the column name specified in the  id_field  configuration option     title      file  Empty values in the  file  field are allowed if  allow_missing_files  is present in your configuration file, in which case a node will be created but it will have no attached media.    update  node_id     delete  node_id     add_media  node_id      file  file  must contain a filename, file path, or URL.  allow_missing_files  does not work with the  add_media  task.     If a required field is missing from your CSV,  --check  will tell you.",
            "title": "Required fields"
        },
        {
            "location": "/fields/#values-in-the-file-field",
            "text": "Values in the  file  field in your CSV can be relative to the directory named in  input_dir , abolute paths, or URLs. Examples of each:   relative to directory named in \"input_dir\":  myfile.png  absolute:  /tmp/data/myfile.png  URL:  http://example.com/files/myfile.png   Relative, absolute, and URL file locations can exist within the same CSV file.  Things to note about URL paths:   Workbench downloads files identified by URLs and saves them in the directory named in  input_dir  before processing them further. It does not delete the files after they have been ingested into Islandora.  Files identified by URLs must be accessible to the Workbench script, which means they must not require a username/password; however, they can be protected by a firewall, ACL, etc. as long as the computer running Workbench is allowed to retrieve the files without authenticating.  Currently Workbench requires that the URLs point directly to a file and not to a script, wrapper page, or other indirect route to the file.",
            "title": "Values in the \"file\" field"
        },
        {
            "location": "/fields/#base-fields",
            "text": "Base fields are basic node properties, shared by all content types. The base fields you can include in your CSV file are:   title : This field is required for all rows in your CSV for the  create  task. Optional for the 'update' task. Drupal limits the title's length to 255 characters, and Workbench will check that titles are less than 255 characters unless your configuration file contains  validate_title_length: False  as described above.  langcode : The language of the node. Optional. If included, use one of Drupal's language codes as values (common values are 'en', 'fr', and 'es'; the entire list can be seen  here . If absent, Drupal sets the value to the default value for your content type.  uid : The Drupal user ID to assign to the node and media created with the node. Optional. Only available in  create  tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).  created : The timestamp to use in the node's \"created\" attribute and in the \"created\" attribute of the media created with the node. Optional, but if present, it must be in format 2020-11-15T23:49:22+00:00 (the +00:00 is the difference to Greenwich time/GMT). Only available in  create  tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).",
            "title": "Base fields"
        },
        {
            "location": "/fields/#content-type-specific-fields",
            "text": "For other Drupal fields, the column headings in the CSV file must match machine names of fields that exist in the target Islandora content type. Fields' machine names are visible within the \"Manage fields\" section of each content type's configuration, here circled in red:    These field names, plus the fields indicated in the \"Required fields\" section above, are the column headers in your CSV file.",
            "title": "Content type-specific fields"
        },
        {
            "location": "/fields/#single-and-multi-valued-fields",
            "text": "Drupal allows for fields to have a single value, a specific maximum number of values, or unlimited number of values.",
            "title": "Single and multi-valued fields"
        },
        {
            "location": "/fields/#single-valued-fields",
            "text": "In your CSV file, single-valued fields simply contain the value, which, depending on the field type, can be a string or an integer. For example, using the fields defined by the Islandora Defaults module for the \"Repository Item\" content type, your CSV file could look like this:  file,title,id,field_model,field_description,field_rights,field_extent,field_access_terms,field_member_of\nmyfile.jpg,My nice image,obj_00001,24,\"A fine image, yes?\",Do whatever you want with it.,There's only one image.,27,45  In this example, the term ID for the tag you want to assign in  field_access_terms  is 27, and the node ID of the collection you want to add the object to (in  field_member_of ) is 45.",
            "title": "Single-valued fields"
        },
        {
            "location": "/fields/#multivalued-fields",
            "text": "For multivalued fields, you separate the values within a field with a pipe ( | ), like this:  file,title,field_my_multivalued_field\nIMG_1410.tif,Small boats in Havana Harbour,foo|bar\nIMG_2549.jp2,Manhatten Island,bif|bop|burp  This works for string fields as well as reference fields, e.g.:  file,title,field_my_multivalued_taxonomy_field\nIMG_1410.tif,Small boats in Havana Harbour,35|46\nIMG_2549.jp2,Manhatten Island,34|56|28  Drupal strictly enforces the maximum number of values allowed in a field. If the number of values in your CSV file for a field exceed a field's configured maximum number of fields, Workbench will only populate the field to the field's configured limit.  The subdelimiter character defaults to a pipe ( | ) but can be set in your config file using the  subdelimiter: \";\"  option.",
            "title": "Multivalued fields"
        },
        {
            "location": "/fields/#field-types",
            "text": "",
            "title": "Field types"
        },
        {
            "location": "/fields/#taxonomy-fields",
            "text": "In CSV columns for taxonomy fields, you can use either term IDs (integers) or term names (strings). You can even mix IDs and names in the same field:  file,title,field_my_multivalued_taxonomy_field\nimg001.png,Picture of cats and yarn,Cats|46\nimg002.png,Picture of dogs and sticks,Dogs|Sticks\nimg003.png,Picture of yarn and needles,\"Yarn, Balls of\"|Knitting needles  By default, if you use a term name in your CSV data that doesn't match a term name that exists in the referenced taxonomy, Workbench will detect this when you use  --check  and exit. However, if you add  allow_adding_terms: true  to your configuration file for  create  and  update  tasks, Workbench will create the new term. A few of things to note:   To create new terms, your target Drupal needs to have its \"Taxonomy term\" REST endpoint enabled as described in the \"Requirements\" section at the beginning of this README.  If multiple records in your CSV contain the same new term name in the same field, the term is only created once.  When Workbench checks to see if the term with the new name exists in the target vocabulary, it normalizes it and compares it with existing term names in that vocabulary, applying these normalization rules to both the new term and the existing terms:  It strips all leading and trailing whitespace.  It replaces all other whitespace with a single space character.  It converts all text to lower case.  It removes all punctuation.  If the term name you provide in the CSV file does not match any existing term names in the vocabulary linked to the field after these normalization rules are applied, it is used to create a new taxonomy term. If it does match, Workbench populates the field in your nodes with the matching term.     Adding new terms has some contraints:   Creating taxonomy terms by including them in your CSV file adds new terms to the root of the applicable vocabulary. Workbench cannot create a new term that has another term as its parent (i.e. terms below the top leve of a hierarchical taxonomy). However, for existing terms, Workbench doesn't care where they are in a taxonomy's hierarchy.  Terms created in this way do not have any external URIs. If you want your terms to have external URIs, you will need to either create the terms manually or add the URIs manually after the terms are created by Islandora Workbench.  --check  will identify any new terms that exceed Drupal's maxiumum allowed length for term names, 255 characters. If a term name is longer than 255 characters, Workbench will truncate it at that length, log that it has done so, and create the term.  Taxonomy terms created with new nodes are not removed when you delete the nodes.",
            "title": "Taxonomy fields"
        },
        {
            "location": "/fields/#using-term-names-in-multi-vocabulary-fields",
            "text": "While most node taxonomy fields reference only a single vocabulary, Drupal does allow fields to reference multiple vocabularies. This ability poses a problem when we use term names instead of term IDs in our CSV files: in a multi-vocabulary field, Workbench can't be sure which term name belongs in which of the multiple vocabularies referenced by that field. This applies to both existing terms and to new terms we want to add when creating node content.  To avoid this problem, we need to tell Workbench which of the multple vocabularies each term name should (or does) belong to. We do this by namespacing terms with the applicable vocabulary ID.  For example, let's imagine we have a node field whose name is  field_sample_tags , and this field references two taxonomies,  cats  and  dogs . To use the terms  Tuxedo ,  Tabby ,  German Shepherd  in the CSV when adding new nodes, we would namespace them with vocabulary IDs like this:  field_sample_tags\ncats:Tabby\ncats:Tuxedo\ndogs:German Shepherd  If you want to use multiple terms in a single field, you would namespace them all:  cats:Tuxedo|cats:Misbehaving|dogs:German Shepherd  Term names containing commas ( , ) in multi-valued, multi-vocabulary fields need special treatment (no surprise there): you need to wrap the entire field in quotation marks (like you would for any other CSV value that contains a comma), and in addition, specify the namespace within each of the values:  \"tags:gum, Bubble|tags:candy, Hard\"  Using these conventions, Workbench will be certain which vocabulary the term names belong to. Workbench will remind you during its  --check  operation that you need to namespace terms. It determines 1) if the field references multiple vocabularies, and then checks to see 2) if the field's values in the CSV are term IDs or term names. If you use term names in multi-vocabulary fields, and the term names aren't namespaced, Workbench will warn you:  Error: Term names in multi-vocabulary CSV field \"field_tags\" require a vocabulary namespace; value \"Dogs\" in row 4 does not have one.  Note that since  :  is a special character when you use term names in multi-vocabulary CSV fields, you can't add a namespaced term that itself contains a  : . You need to add it manually to Drupal and then use its term ID (or name, or URI) in your CSV file.",
            "title": "Using term names in multi-vocabulary fields"
        },
        {
            "location": "/fields/#using-term-uris-instead-of-term-ids",
            "text": "Islandora Workbench lets you use URIs assigned to terms instead of term IDs. You can use a term URI in the  media_use_tid  configuration option (for example,  \"http://pcdm.org/use#OriginalFile\" ) and in taxonomy fields in your metadata CSV file:  field_model\nhttps://schema.org/DigitalDocument\nhttp://purl.org/coar/resource_type/c_18cc  During  --check , Workbench will validate that URIs correspond to existing taxonomy terms.  Using term URIs has some constraints:   You cannot create a new term by providing a URI like you can by providing a term name.  If the same URI is registered with more than one term, Workbench will choose one and write a warning to the log indicating which term it chose and which terms the URI is registered with. However,  --check  will detect that a URI is registered with more than one term and warn you. At that point you can edit your CSV file to use the correct term ID rather than the URI.",
            "title": "Using term URIs instead of term IDs"
        },
        {
            "location": "/fields/#edtf-fields",
            "text": "Note  The date types named below are a subset of the EDTF specification. If you need validatation of additional date types, please  open an issue .   Running Islandora Workbench with  --check  will validate the following subset of  Extended Date/Time Format (EDTF) Specification  date types in EDTF fields:     Type  Examples      Date  1976-04-23     1976-04     1976    Qualified date  1976?     1976-04~     1976-04-24%    Date and time  1985-04-12T23:20:30    Interval  1964/2008     2004-06/2006-08     2004-06-04/2006-08-01     2004-06/2006-08-01    Set  [1667,1668,1670..1672]     [1672..1682]     [1672,1673]     [..1672]     Subvalues in multivalued CSV fields are validated separately, e.g. if your CSV value is  2004-06/2006-08|2007-01/2007-04 ,  2004-06/2006-08  and  2007-01/2007-04  are validated separately.",
            "title": "EDTF fields"
        },
        {
            "location": "/fields/#typed-relation-fields",
            "text": "Unlike most field types, which take a string or an integer as their value in the CSV file, fields that have the \"Typed Relation\" type take structured values that need to be entered in a specific way in the CSV file. An example of this type of field is the \"Linked Agent\" field in the Repository Item content type created by the Islandora Defaults module.   Warning  In the following section, the word \"namespace\" is used to mean something additional to what it means in the \"Using term names in multi-vocabulary fields\" section above. Below, \"namespace\" is used both to refer to a vocabulary ID in the target Drupal and an ID for the authority list of relators maintained outside of Drupal, for example by the Library of Congress.   The structure of values for this field encode a namespace (indicating the external authority list the relation is from), a relation type, and a target (which identifies what the relation refers to, such as a specific taxonomy term in the target Drupal), each separated by a colon ( : ). The first two parts, the namespace and the relation type, come from the \"Available Relations\" section of the field's configuration, which looks like this (using the \"Linked Agent\" field's configuration as an example):   In the node edit form, this structure is represented as a select list of the types (the namespace is not shown) and, below that, an autocomplete field to indicate the relation target, e.g.:   To include these kind of values in a CSV field, we need to use a structured string as described above (namespace:relationtype:targetid). For example:  relators:art:30  You can also use taxonomy term names as targets:  \"relators:art:Jordan, Mark\"  Here's where we start to use \"namespace\" in two different ways. If the field you are populating references multiple vocabularies, you must include a Drupal vocabulary namespace with your term name:  \"relators:art:person:Jordan, Mark\"  ( relators  is the external namespace, and  person  is the Drupal vocabulary namespace.)  You can also use HTTP URIs as typed relation targets:  \"relators:art:http://markjordan.net   Note that the structure required for typed relation values in the CSV file is not the same as the structure of the relations configuration depicted in the first screenshot above; the CSV values use only colons to seprate the three parts, but the field configuration within Drupal uses a colon and then a pipe (|) to structure its values.   In this example of a CSV value,  relators  is the namespace that the relation type  art  is from (the Library of Congress  Relators  vocabulary), and the target taxonomy term ID is  30 . In the screenshot above showing the \"Linked Agent\" field of a node, the value of the Relationship Type select list is \"Artist (art)\", and the value of the associated taxonomy term field is the person's name that has the taxonomy term ID \"30\" (in this case, \"Jordan, Mark\"):  If you want to include multiple typed relation values in a single field of your CSV file (such as in \"field_linked_agent\"), separate the three-part values with the same subdelimiter character you use in other fields, e.g. ( | ) (or whatever you have configured as your  subdelimiter ):  relators:art:30|relators:art:45",
            "title": "Typed Relation fields"
        },
        {
            "location": "/fields/#adding-new-typed-relation-targets",
            "text": "Islandora Workbench allows you to add new typed relation targets while creating and updating nodes. These targets are taxonomy terms. Your configuration file must include the  allow_adding_terms: true  option to add new targets. In general, adding new typed relation targets is just like adding new taxonomy terms as described above in the \"Taxonomy fields\" section.  An example of a CSV value that adds a new target term is:  \"relators:art:person:Jordan, Mark\"  You can also add multiple new targets:  \"relators:art:person:Annez, Melissa|relators:art:person:Jordan, Mark\"  Note that:   For multi-vocabulary fields, new typed relator targets must be accommpanied by a vocabulary namespace ( person  in the above examples).  You cannot add new relators (e.g.  relators:foo ) in your CSV file, only new target terms.",
            "title": "Adding new typed relation targets"
        },
        {
            "location": "/fields/#geolocation-fields",
            "text": "The Geolocation field type, managed by the  Geolocation Field  contrib module, stores latitude and longitude coordinates in separate data elements. To add or update fields of this type, Workbench needs to provide the latitude and longitude data in these separate elements.  To simplify entering geocoordinates in the CSV file, Workbench allows geocoordinates to be in  lat,lng  format, i.e., the latitude coordinate followed by a comma followed by the longitude coordinate. When Workbench reads your CSV file, it will split data on the comma into the required lat and lng parts. An example of a single geocoordinate in a field would be:  field_coordinates\n\"49.16667,-123.93333\"  You can include multiple pairs of geocoordinates in one CSV field if you separate them with the subdelimiter character:  field_coordinates\n\"49.16667,-123.93333|49.25,-124.8\"  Note that:   Geocoordinate values in your CSV need to be wrapped in double quotation marks, unless the  delimiter  key in your configuration file is set to something other than a comma.  If you are entering geocoordinates into a spreadsheet, a leading  +  will make the spreadsheet application think you are entering a formula. You can work around this by escaping the  +  with a backslash ( \\ ), e.g.,  49.16667,-123.93333  should be  \\+49.16667,-123.93333 , and  49.16667,-123.93333|49.25,-124.8  should be  \\+49.16667,-123.93333|\\+49.25,-124.8 . Workbench will strip the leading  \\  before it populates the Drupal fields.",
            "title": "Geolocation fields"
        },
        {
            "location": "/csv_file_templates/",
            "text": "Note\n\n\nThis section describes creating CSV \nfile\n templates. For information on CSV \nfield\n templates, see the \"\nUsing CSV field templates\n\" section.\n\n\n\n\nYou can generate a template CSV file by running Workbench with the \n--get_csv_template\n argument:\n\n\n./workbench --config config.yml ----get_csv_template\n\n\nWith this option, Workbench will fetch the field definitions for the content type named in your configuration's \ncontent_type\n option and save a CSV file with a column for each of the content type's fields. You can then populate this template with values you want to use in a \ncreate\n task. The template file is saved in the directory indicated in your configuration's \ninput_dir\n option, using the filename defined in \ninput_csv\n with \n.csv_file_template\n appended.\n\n\nThe template also contains three additional rows:\n\n\n\n\nsample data\n\n\nnumber of values allowed (either a specific maximum number or 'unlimited')\n\n\nthe name of the section in the documentation covering the field type\n\n\n\n\nHere is a screenshot of this CSV file template loaded into a spreadsheet application:\n\n\n\n\nNote that the first column, and all the rows other than the field names, should be deleted before you use a popluated version of this CSV file in a \ncreate\n task.",
            "title": "CSV file templates"
        },
        {
            "location": "/field_templates/",
            "text": "Note\n\n\nThis section describes using CSV \nfield\n templates in your configuration file. For information on CSV \nfile\n templates, see the \"\nGenerating a template CSV file\n\" section.\n\n\n\n\nIn \ncreate\n and \nupdate\n tasks, you can configure field templates that are applied to each node as if the fields were present in your CSV file. The templates are configured in the \ncsv_field_templates\n option. An example looks like this:\n\n\ncsv_field_templates:\n - field_rights: \"The author of this work dedicate any and all copyright interest to the public domain.\"\n - field_member_of: 205\n - field_model: 25\n - field_tags: 231|257\n\n\n\n\nValues in CSV field templates are structured the same as field values in your CSV (e.g., in the example above, \nfield_tags\n is multivalued), and are validated against Drupal's configuration in the same way that values present in your CSV are validated.\n\n\nIf a column with the field name used in a template is present in the CSV file, Workbench ignores the template and uses the data in the CSV file.",
            "title": "CSV field templates"
        },
        {
            "location": "/aliases/",
            "text": "In \ncreate\n tasks, you can assign URL aliases to nodes by adding the \nurl_alias\n field to you CSV file, like this:\n\n\nfile,title,field_description,url_alias\nIMG_1410.tif,Small boats in Havana Harbour,Some are blue.,/havana_boats\nIMG_2549.jp2,Manhatten Island,Manhatten is part of New York City.,/manhatten\n\n\n\n\nYou can also assign URL aliases in \nupdate\n tasks:\n\n\nnode_id,url_alias\n345,/this_is_a_cool_item\n367,/soisthisone\n\n\n\n\nNo other configuration is required. URL aliases must start with a forward slash (\n/\n). When you run Workbench with its \n--check\n option, it will check whether each alias starts with this character, and whether the alias already exists.",
            "title": "Assigning URL aliases"
        },
        {
            "location": "/media_types/",
            "text": "By default Workbench defines the following file extention to media type mapping:\n\n\n\n\n\n\n\n\nFile extensions\n\n\nMedia type\n\n\n\n\n\n\n\n\n\n\npng, gif, jpg, jpeg\n\n\nimage\n\n\n\n\n\n\npdf, doc, docx, ppt, pptx\n\n\ndocument\n\n\n\n\n\n\ntif, tiff, jp2, zip, tar\n\n\nfile\n\n\n\n\n\n\nmp3, wav, aac\n\n\naudio\n\n\n\n\n\n\nmp4\n\n\nvideo\n\n\n\n\n\n\ntxt\n\n\nextracted_text\n\n\n\n\n\n\n\n\nIf you need to override this default mappping, you can do so in two ways:\n\n\n\n\nFor all media being created, via the \nmedia_type\n (singluar) configuration option. If this is present (for example \nmedia_type: document\n), all media created by Workbench will be assigned that media type. Use this option if all of the files in your batch are to be assigned the same media type, but their extensions are not defined in the default mapping.\n\n\n\n\nOn a per file extension basis, via a mapping in the \nmedia_types\n (plural) option in your configuration file like this one:\n\n\nmedia_types:\n - video: ['mp4', 'ogg']\n\n\nUse this option if all of the files in your batch are not to be assigned the same media type, and their extensions are not defined in the default mapping (or are in addition to the extensions in the default mapping, as in this example).\n\n\n\n\n\n\nNote that:\n\n\n\n\nIf a file's extension is not defined in either the default mapping, or in the \nmedia_type\n or \nmedia_types\n configuration options, the media is assigned the \nfile\n type.\n\n\nIf you use the \nmedia_types\n configuration option, your mapping replaces all of Workbench's default mappings. However, you may include multiple entries, e.g.:\n   ```\n   media_types:\n\n\nvideo: ['mp4', 'ogg']\n\n\nimage: ['png', 'gif', 'jpg', 'jpeg']\n   ```\n\n\n\n\n\n\nIf both \nmedia_type\n and \nmedia_types\n are included in the config file, the mapping is ignored and the media type assigned in \nmedia_type\n is used.",
            "title": "Setting media types"
        },
        {
            "location": "/alt_text/",
            "text": "Islandora image media require a value in their \"Alternative text\" field. This text is used as the \nalt\n text in the HTML markup rendering the image.\n\n\nYou can assign alt text values by adding the \nimage_alt_text\n field to you CSV file, like this:\n\n\nfile,title,field_description,image_alt_text\nIMG_1410.tif,Small boats in Havana Harbour,They are nice boats.Small boats in Havana Harbour.\nIMG_2549.jp2,Manhatten Island,It was windy that day.Picture of Manhatten Island.\n\n\n\n\nThe value will only be applied to image media. If you do not include this field in your CSV file, Workbench will use the node's title as the alt text. Note that Workbench strips out all HTML markup within the alt text. Also note that this feature is only available in the \ncreate\n task.",
            "title": "Adding alt text to images"
        },
        {
            "location": "/paged_and_compound/",
            "text": "Islandora Workbench provides two ways to create paged and compound content:\n\n\n\n\nusing a specific subdirectory structure to define the relationship between the parent item and its children\n\n\nusing page-level metadata in the CSV to establish that relationship\n\n\n\n\nUsing subdirectories\n\n\nEnable this method by including \npaged_content_from_directories: true\n in your configuration file. Use this method when you are creating books, newspaper issues, or other paged content where your pages don't have their own metadata. This method groups page-level files into subdirectories that correspond to each parent, and does not require (or allow) page-level metadata in the CSV file. Each parent (book, newspaper issue, etc.) has a row on the CSV file, e.g.:\n\n\nid,title,field_model,field_display_hints\nbook1,How to Use Islandora Workbench like a Pro,28,2\nbook2,Using Islandora Workbench for Fun and Profit,28,2\n\n\n\n\nEach parent's pages are located in a subdirectory of the input directory that is named to match the value of the \nid\n field of the parent item they are pages of:\n\n\nsamplebook/\n\u251c\u2500\u2500 book1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u251c\u2500\u2500 book2\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 isbn-1843341778-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 using-islandora-workbench-page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u2514\u2500\u2500 metadata.csv\n\n\n\n\nThe page filenames have significance. The sequence of the page is determined by the last segment of each filename before the extension, and is separated from the rest of the filename by a dash (\n-\n), although you can use another character by setting the \npaged_content_sequence_seprator\n option in your configuration file. For example, using the filenames for \"book1\" above, the sequence of \"page-001.jpg\" is \"001\". Dashes (or whatever your separator character is) can exist elsewhere in filenames, since Workbench will always use the string after the \nlast\n dash as the sequence number; for example, the sequence of \"isbn-1843341778-001.jpg\" for \"book2\" is also \"001\". Workbench takes this sequence number, strips of any leader zeros, and uses it to populate the \nfield_weight\n in the page nodes, so \"001\" becomes a weight value of 1, \"002\" becomes a weight value of 2, and so on.\n\n\nTitles for pages are generated automatically using the pattern \nparent_title\n + \n, page\n + \nsequence_number\n, where \"parent title\" is inherited from the page's parent node and \"sequence number\" is the page's sequence. For example, if a page's parent has the title \"How to Write a Book\" and its sequence number is 450, its automatically generated title will be \"How to Write a Book, page 450\".\n\n\nFinally, even though only minimal metadata is assigned to pages using this method (i.e., the automatically generated title and Islandora model), you can add additional metadata to pages using a separate \nupdate\n task.\n\n\nImportant things to note when using this method:\n\n\n\n\nTo use this method of creating paged content, you must include the following in your configuration file:\n\n\npaged_content_sequence_seprator: true\n\n\npaged_content_page_model_tid\n set to your Islandora's term ID for pages\n\n\nThe Islandora model of the parent is not set automatically. You need to include a \nfield_model\n value for each item in your CSV file.\n\n\nYou should also include a \nfield_display_hints\n column in your CSV. This value is applied to the parent nodes and also the page nodes, unless the \npaged_content_page_display_hints\n setting is present in you configuration file. However, if you normally don't set the \"Display hints\" field in your objects but use a Context to determine how objects display, you should not include a \nfield_display_hints\n column in your CSV file.\n\n\nUnlike every other Islandora Workbench configuration, the metadata CSV should not contain a \nfile\n column.\n\n\nid\n can be defined as another field name using the \nid_field\n configuration option. If you do define a different ID field using the \nid_field\n option, creating the parent/paged item relationships will still work.\n\n\nThe Drupal content type for page nodes is inherited from the parent, unless you specify a different content type in the \npaged_content_page_content_type\n setting in your configuration file.\n\n\n\n\nWith page/child-level metadata\n\n\nUsing this method, the metadata CSV file contains a row for each parent and all child items. You should use this method when you are creating books, newspaper issues, or other paged or compound content where each page has its own metadata, or when you are creating compound objects of any Islandora model. The files for each page are named explicitly in the \nfile\n column rather than being in a subdirectory. To link the pages to the parent, Workbench establishes parent/child relationships between items with \nparent_id\n values (the pages/children) with that are the same as the \nid\n value of another item (the parent). For this to work, your CSV file must contain a \nparent_id\n field plus the standard Islandora fields \nfield_weight\n, \nfield_member_of\n, and \nfield_model\n (the role of these last three fields will be explained below). The \nid\n field is required in all CSV files used to create content, so in this case, your CSV needs both an \nid\n field and a \nparent_id\n field.\n\n\nThe following example illustrates how this works. Here is the raw CSV data:\n\n\nid,parent_id,field_weight,file,title,field_description,field_model,field_member_of\n001,,,,Postcard 1,The first postcard,28,197\n003,001,1,image456.jpg,Front of postcard 1,The first postcard's front,29,\n004,001,2,image389.jpg,Back of postcard 1,The first postcard's back,29,\n002,,,,Postcard 2,The second postcard,28,197\n006,002,1,image2828.jpg,Front of postcard 2,The second postcard's front,29,\n007,002,2,image777.jpg,Back of postcard 2,The second postcard's back,29,\n\n\n\n\nThe empty cells make this CSV difficult to read. Here is the same data in a spreadsheet:\n\n\n\n\nThe data contains rows for two postcards (rows with \nid\n values \"001\" and \"002\") plus a back and front for each (the remaining four rows). The \nparent_id\n value for items with \nid\n values \"003\" and \"004\" is the same as the \nid\n value for item \"001\", which will tell Workbench to make both of those items children of item \"001\"; the \nparent_id\n value for items with \nid\n values \"006\" and \"007\" is the same as the \nid\n value for item \"002\", which will tell Workbench to make both of those items children of the item \"002\". We can't populate  \nfield_member_of\n for the child pages in our CSV because we won't have node IDs for the parents until they are created as part of the same batch as the children.\n\n\nIn this example, the rows for our postcard objects have empty \nparent_id\n, \nfield_weight\n, and \nfile\n columns because our postcards are not children of other nodes and don't have their own media. (However, the records for our postcard objects do have a value in \nfield_member_of\n, which is the node ID of the \"Postcards\" collection that already/hypothetically exists.) Rows for the postcard front and back image objects have a value in their \nfield_weight\n field, and they have values in their \nfile\n column because we are creating objects that contain image media. Importantly, they have no value in their \nfield_member_of\n field because the node ID of the parent isn't known when you create your CSV; instead, Islandora Workbench assigns each child's \nfield_member_of\n dynamically, just after its parent node is created.\n\n\nSome important things to note:\n\n\n\n\nid\n can be defined as another field name using the \nid_field\n configuration option. If you do define a different ID field using the \nid_field\n option, creating the parent/child relationships will still work.\n\n\nThe values of the \nid\n and \nparent_id\n columns do not have to follow any sequential pattern. Islandora Workbench treats them as simple strings and matches them on that basis, without looking for sequential relationships of any kind between the two fields.\n\n\nThe CSV records for children items don't need to come \nimmediately\n after the record for their parent, but they do need to come after that record. This is because Workbench creates nodes in the order their records are in the CSV file (top to bottom). As long as the parent node has already been created when a child node is created, the parent/child relationship via the child's \nfield_member_of\n will be correct.\n\n\nCurrently, you must include values in the children's \nfield_weight\n column. It may be possible to automatically generate values for this field (see \nthis issue\n).\n\n\nCurrently, Islandora model values (e.g. \"Paged Content\", \"Page\") are not automatically assigned. You must include the correct \"Islandora Models\" taxonomy term IDs in your \nfield_model\n column for all parent and child records, as you would for any other Islandora objects you are creating. Like for \nfield_weight\n, it may be possible to automatically generate values for this field (see \nthis issue\n).",
            "title": "Creating paged and compound content"
        },
        {
            "location": "/paged_and_compound/#using-subdirectories",
            "text": "Enable this method by including  paged_content_from_directories: true  in your configuration file. Use this method when you are creating books, newspaper issues, or other paged content where your pages don't have their own metadata. This method groups page-level files into subdirectories that correspond to each parent, and does not require (or allow) page-level metadata in the CSV file. Each parent (book, newspaper issue, etc.) has a row on the CSV file, e.g.:  id,title,field_model,field_display_hints\nbook1,How to Use Islandora Workbench like a Pro,28,2\nbook2,Using Islandora Workbench for Fun and Profit,28,2  Each parent's pages are located in a subdirectory of the input directory that is named to match the value of the  id  field of the parent item they are pages of:  samplebook/\n\u251c\u2500\u2500 book1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u251c\u2500\u2500 book2\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 isbn-1843341778-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 using-islandora-workbench-page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u2514\u2500\u2500 metadata.csv  The page filenames have significance. The sequence of the page is determined by the last segment of each filename before the extension, and is separated from the rest of the filename by a dash ( - ), although you can use another character by setting the  paged_content_sequence_seprator  option in your configuration file. For example, using the filenames for \"book1\" above, the sequence of \"page-001.jpg\" is \"001\". Dashes (or whatever your separator character is) can exist elsewhere in filenames, since Workbench will always use the string after the  last  dash as the sequence number; for example, the sequence of \"isbn-1843341778-001.jpg\" for \"book2\" is also \"001\". Workbench takes this sequence number, strips of any leader zeros, and uses it to populate the  field_weight  in the page nodes, so \"001\" becomes a weight value of 1, \"002\" becomes a weight value of 2, and so on.  Titles for pages are generated automatically using the pattern  parent_title  +  , page  +  sequence_number , where \"parent title\" is inherited from the page's parent node and \"sequence number\" is the page's sequence. For example, if a page's parent has the title \"How to Write a Book\" and its sequence number is 450, its automatically generated title will be \"How to Write a Book, page 450\".  Finally, even though only minimal metadata is assigned to pages using this method (i.e., the automatically generated title and Islandora model), you can add additional metadata to pages using a separate  update  task.  Important things to note when using this method:   To use this method of creating paged content, you must include the following in your configuration file:  paged_content_sequence_seprator: true  paged_content_page_model_tid  set to your Islandora's term ID for pages  The Islandora model of the parent is not set automatically. You need to include a  field_model  value for each item in your CSV file.  You should also include a  field_display_hints  column in your CSV. This value is applied to the parent nodes and also the page nodes, unless the  paged_content_page_display_hints  setting is present in you configuration file. However, if you normally don't set the \"Display hints\" field in your objects but use a Context to determine how objects display, you should not include a  field_display_hints  column in your CSV file.  Unlike every other Islandora Workbench configuration, the metadata CSV should not contain a  file  column.  id  can be defined as another field name using the  id_field  configuration option. If you do define a different ID field using the  id_field  option, creating the parent/paged item relationships will still work.  The Drupal content type for page nodes is inherited from the parent, unless you specify a different content type in the  paged_content_page_content_type  setting in your configuration file.",
            "title": "Using subdirectories"
        },
        {
            "location": "/paged_and_compound/#with-pagechild-level-metadata",
            "text": "Using this method, the metadata CSV file contains a row for each parent and all child items. You should use this method when you are creating books, newspaper issues, or other paged or compound content where each page has its own metadata, or when you are creating compound objects of any Islandora model. The files for each page are named explicitly in the  file  column rather than being in a subdirectory. To link the pages to the parent, Workbench establishes parent/child relationships between items with  parent_id  values (the pages/children) with that are the same as the  id  value of another item (the parent). For this to work, your CSV file must contain a  parent_id  field plus the standard Islandora fields  field_weight ,  field_member_of , and  field_model  (the role of these last three fields will be explained below). The  id  field is required in all CSV files used to create content, so in this case, your CSV needs both an  id  field and a  parent_id  field.  The following example illustrates how this works. Here is the raw CSV data:  id,parent_id,field_weight,file,title,field_description,field_model,field_member_of\n001,,,,Postcard 1,The first postcard,28,197\n003,001,1,image456.jpg,Front of postcard 1,The first postcard's front,29,\n004,001,2,image389.jpg,Back of postcard 1,The first postcard's back,29,\n002,,,,Postcard 2,The second postcard,28,197\n006,002,1,image2828.jpg,Front of postcard 2,The second postcard's front,29,\n007,002,2,image777.jpg,Back of postcard 2,The second postcard's back,29,  The empty cells make this CSV difficult to read. Here is the same data in a spreadsheet:   The data contains rows for two postcards (rows with  id  values \"001\" and \"002\") plus a back and front for each (the remaining four rows). The  parent_id  value for items with  id  values \"003\" and \"004\" is the same as the  id  value for item \"001\", which will tell Workbench to make both of those items children of item \"001\"; the  parent_id  value for items with  id  values \"006\" and \"007\" is the same as the  id  value for item \"002\", which will tell Workbench to make both of those items children of the item \"002\". We can't populate   field_member_of  for the child pages in our CSV because we won't have node IDs for the parents until they are created as part of the same batch as the children.  In this example, the rows for our postcard objects have empty  parent_id ,  field_weight , and  file  columns because our postcards are not children of other nodes and don't have their own media. (However, the records for our postcard objects do have a value in  field_member_of , which is the node ID of the \"Postcards\" collection that already/hypothetically exists.) Rows for the postcard front and back image objects have a value in their  field_weight  field, and they have values in their  file  column because we are creating objects that contain image media. Importantly, they have no value in their  field_member_of  field because the node ID of the parent isn't known when you create your CSV; instead, Islandora Workbench assigns each child's  field_member_of  dynamically, just after its parent node is created.  Some important things to note:   id  can be defined as another field name using the  id_field  configuration option. If you do define a different ID field using the  id_field  option, creating the parent/child relationships will still work.  The values of the  id  and  parent_id  columns do not have to follow any sequential pattern. Islandora Workbench treats them as simple strings and matches them on that basis, without looking for sequential relationships of any kind between the two fields.  The CSV records for children items don't need to come  immediately  after the record for their parent, but they do need to come after that record. This is because Workbench creates nodes in the order their records are in the CSV file (top to bottom). As long as the parent node has already been created when a child node is created, the parent/child relationship via the child's  field_member_of  will be correct.  Currently, you must include values in the children's  field_weight  column. It may be possible to automatically generate values for this field (see  this issue ).  Currently, Islandora model values (e.g. \"Paged Content\", \"Page\") are not automatically assigned. You must include the correct \"Islandora Models\" taxonomy term IDs in your  field_model  column for all parent and child records, as you would for any other Islandora objects you are creating. Like for  field_weight , it may be possible to automatically generate values for this field (see  this issue ).",
            "title": "With page/child-level metadata"
        },
        {
            "location": "/nodes_only/",
            "text": "During a \ncreate\n task, if you want to create nodes but not any accompanying media, for example if you are testing your metadata values or creating collection nodes, you can include the \nnodes_only: true\n option in your configuration file:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\nnodes_only: true\n\n\n\n\nIf this is present, Islandora Workbench will only create nodes and will skip all media creation. During \n--check\n, it will ignore anything in your CSV's \nfiles\n field (in fact, your CSV doesn't even need a \nfile\n column). If \nnodes_only\n is \ntrue\n, your configuration file for the \ncreate\n task doesn't need a \nmedia_use_tid\n, \ndrupal_filesystem\n, or \nmedia_type\n/\nmedia_types\n option.",
            "title": "Creating nodes without media"
        },
        {
            "location": "/creating_nodes_from_files/",
            "text": "If you want to ingest some files without a metadata CSV you can do so using the \ncreate_from_files\n. A common application of this ability is in automated workflows where Islandora objects are created from files saved to a watch folder, and metadata is added later.\n\n\nNodes created using this task have only the following properties/fields populated:\n\n\n\n\nContent type: this is defined in the configuration file, using the \ncontent_type\n setting.\n\n\nTitle: this is derived from the filename minus the extension. Spaces are allowed in the filenames.\n\n\nPublished: published by default, or overridden in the configuration file using the \npublished\n setting.\n\n\nModel: defined in the configuration file using either the \nmodel\n or \nmodels\n setting.\n\n\n\n\nThe media attached to the nodes is the file, with its type (image, document, audio, video, file) assigned by the \nmedia_types\n configuration setting and its Media Use tag defined in the \nmedia_use_tid\n setting.\n\n\nThe configuration options for the \ncreate_from_files\n task are the same as the options used in the \ncreate\n task (with one exception: \ninput_csv\n is not required). The only option specific to this task is \nmodels\n, which is a mapping from terms IDs (or term URIs) in the \"Islandora Models\" vocabulary to file extensions.\n\n\nNote that either the  \nmodels\n or \nmodel\n configuration option is required in the \ncreate_from_files\n task. Use \nmodels\n when your nodes will have different Islandora Model values. Here is a sample configuration file for this task:\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\noutput_csv: /tmp/output.csv\nmodels:\n - 23: ['zip', 'tar', '']\n - 27: ['pdf', 'doc', 'docx', 'ppt', 'pptx']\n - 25: ['tif', 'tiff', 'jp2', 'png', 'gif', 'jpg', 'jpeg']\n - 22: ['mp3', 'wav', 'aac']\n - 26: ['mp4']\n\n\n\n\nmodel\n is conventient when all of the objects you are creating are the same Islandora Model:\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\noutput_csv: /tmp/output.csv\nmodel: 25\n\n\n\n\nYou can also use the URIs assigned to terms in the Islandora Models vocabulary, for example:\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\noutput_csv: /tmp/output.csv\nmodels:\n - 'http://purl.org/coar/resource_type/c_1843': ['zip', 'tar', '']\n - 'https://schema.org/DigitalDocument': ['pdf', 'doc', 'docx', 'ppt', 'pptx']\n - 'http://purl.org/coar/resource_type/c_c513': ['tif', 'tiff', 'jp2', 'png', 'gif', 'jpg', 'jpeg']\n - 'http://purl.org/coar/resource_type/c_18cc': ['mp3', 'wav', 'aac']\n - 'http://purl.org/coar/resource_type/c_12ce': ['mp4']\n\n\n\n\n\n\nNote\n\n\nIn the workflow described at the beginning of this section, you might want to include the \noutput_csv\n option in the configuration file, since the resulting CSV file can be populated with metadata later and used in an \nupdate\n task to add it to the stub nodes.",
            "title": "Creating nodes from files"
        },
        {
            "location": "/rolling_back/",
            "text": "In the \ncreate\n and \ncreate_from_files\n tasks, Workbench generates a \nrollback.yml\n configuration file and a \nrollback.csv\n file in the format described in \"Deleting nodes\", below. These files allow you to easily roll back (i.e., delete) all the nodes and accompanying media you just created. Specifically, this configuration file defines a \ndelete\n task. See the \"Deleting nodes\" section below for more information.\n\n\nTo roll back all the nodes and media you just created, run \n./workbench --config rollback.yml\n.\n\n\nNote that Workbench overwrites the rollback configuration and CSV files each time it runs, so these files only apply to the most recent \ncreate\n and \ncreate_from_files\n runs.",
            "title": "Rolling back nodes and media"
        },
        {
            "location": "/updating_nodes/",
            "text": "You can update nodes by providing a CSV file with a \nnode_id\n column plus field data you want to update. Updates preserve any values in the fields, they don't replace the values (but see issue #47). The other column headings in the CSV file must match machine names of fields that exist in the target Islandora content type. Currently, text fields, taxonomy fields, linked node fields (e.g. \"Member of\" for collection nodes), and typed relation fields can be updated.\n\n\nFor example, using the fields defined by the Islandora Defaults module for the \"Repository Item\" content type, your CSV file could look like this:\n\n\nnode_id,field_description,field_rights,field_access_terms,field_member_of\n100,This is my new title,I have changed my mind. This item is yours to keep.,27,45\n\n\n\n\nMultivalued fields are also supported in the update task. See details in the \"Multivalued fields\" section above.\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'update'):\n\n\ntask: update\nvalidate_title_length: false\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: update.csv\n\n\n\n\nNote that you should include \nvalidate_title_length: false\n in your update configuration file, unless you are updating node titles.",
            "title": "Updating nodes"
        },
        {
            "location": "/deleting_nodes/",
            "text": "You can delete nodes by providing a CSV file that contains a single column, \nnode_id\n, like this:\n\n\nnode_id\n95\n96\n200\n\n\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'delete'):\n\n\ntask: delete\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: delete.csv\n\n\n\n\nNote that when you delete nodes using this method, all media associated with the nodes are also deleted, unless the \ndelete_media_with_nodes\n configuration option is set to \nfalse\n (it defaults to \ntrue\n). Typical output produced by a \ndelete\n task looks like this:\n\n\nNode http://localhost:8000/node/89 deleted.\n+ Media http://localhost:8000/media/329 deleted.\n+ Media http://localhost:8000/media/331 deleted.\n+ Media http://localhost:8000/media/335 deleted.\n\n\n\n\nNote that taxonomy terms created with new nodes are not removed when you delete the nodes.",
            "title": "Deleting nodes"
        },
        {
            "location": "/adding_media/",
            "text": "You can add media to nodes by providing a CSV file with a \nnode_id\n column plus a \nfile\n field that contains the name of the file you want to add. For example, your CSV file could look like this:\n\n\nnode_id,file\n100,test.txt\n\n\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'add_media'):\n\n\ntask: add_media\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: add_media.csv",
            "title": "Adding media to nodes"
        },
        {
            "location": "/deleting_media/",
            "text": "You can delete media and their associate files by providing a CSV file with a \nmedia_id\n column that contains the Drupal IDs of media you want to delete. For example, your CSV file could look like this:\n\n\nmedia_id\n100\n103\n104\n\n\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'delete_media'):\n\n\ntask: delete_media\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: delete_media.csv",
            "title": "Deleting media"
        },
        {
            "location": "/output_csv/",
            "text": "In some instances, you may want to create stub nodes that only have a small subset of fields, and then populate the remaining fields later. To faciliate this type of workflow, Workbench provides an option to generate a simple CSV file containig a record for every newly created node. This file can then be used later in \nupdate\n tasks to add additional metadata or in \nadd_media\n tasks to add media.\n\n\nYou tell Workbench to generate this file by including the optional \noutput_csv\n setting in your configuration file. If this setting is present, Workbench will write a CSV file at the specified location containing one record per node created. This CSV file contains the following fields:\n\n\n\n\nid\n (or whatever column is specified in your \nid_field\n setting): the value in your input CSV file's ID field\n\n\nnode_id\n: the node ID for the newly created node\n\n\nuuid\n: the new node's UUID\n\n\nstatus\n: true if the node is published, False if it is unpublished\n\n\ntitle\n: the node's title\n\n\n\n\nThe file will also contain empty columns corresponding to all of the fields in the target content type. An example, generated from a 2-record input CSV file, looks like this (only left-most part of the spreadsheet shown):\n\n\n\n\nThis CSV file is suitable as a template for subsequent \nupdate\n tasks, since it already contains the \nnode_id\ns for all the stub nodes plus column headers for all of the fields in those nodes. You can remove from the template any colums you do not want to include in your \nupdate\n task. You can also use the node IDs in this file as the basis for later \nadd_media\n tasks; all you will need to do is delete the other columns and add a \nfile\n column containing the new nodes' corresponding filenames.",
            "title": "The output CSV file"
        },
        {
            "location": "/sample_data/",
            "text": "Using the sample data and configuration file, the output of \n./workbench --config create.yml\n should look something like:\n\n\nNode for 'Small boats in Havana Harbour' created at http://localhost:8000/node/52.\n+File media for IMG_1410.tif created.\nNode for 'Manhatten Island' created at http://localhost:8000/node/53.\n+File media for IMG_2549.jp2 created.\nNode for 'Looking across Burrard Inlet' created at http://localhost:8000/node/54.\n+Image media for IMG_2940.JPG created.\nNode for 'Amsterdam waterfront' created at http://localhost:8000/node/55.\n+Image media for IMG_2958.JPG created.\nNode for 'Alcatraz Island' created at http://localhost:8000/node/56.\n+Image media for IMG_5083.JPG created.",
            "title": "Creating nodes from the sample data"
        },
        {
            "location": "/generating_sample_content/",
            "text": "generate_image_files.py\n will generate .png images from a list of titles. It and a sample list of titles are available Workbench's \nscripts\n directory. Running this script will result in a group of images whose filenames are normalized versions of the lines in the sample title file. You can then load this sample content into Islandora using the \ncreate_from_files\n task. If you want to have Workbench generate the sample content automatically, configure the \ngenerate_image_files.py\n script as a bootstrap script. See the \nautogen_content.yml\n configuration file for an example of how to do that.",
            "title": "Generating sample Islandora content"
        },
        {
            "location": "/logging/",
            "text": "Islandora Workbench writes a log file for all tasks to \nworkbench.log\n in the workbench directory, unless you specify an alternative log file location using the \nlog_file_path\n configuration option, e.g.:\n\n\nlog_file_path: /tmp/mylogfilepath.log\n\n\nThe log contains information that is similar to what you see when you run Workbench, but with time stamps:\n\n\n24-Dec-20 15:05:06 - INFO - Starting configuration check for \"create\" task using config file create.yml.\n24-Dec-20 15:05:07 - INFO - OK, configuration file has all required values (did not check for optional values).\n24-Dec-20 15:05:07 - INFO - OK, CSV file input_data/metadata.csv found.\n24-Dec-20 15:05:07 - INFO - OK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\n24-Dec-20 15:05:21 - INFO - OK, CSV column headers match Drupal field names.\n24-Dec-20 15:05:21 - INFO - OK, required Drupal fields are present in the CSV file.\n24-Dec-20 15:05:23 - INFO - OK, term IDs/names in CSV file exist in their respective taxonomies.\n24-Dec-20 15:05:23 - INFO - OK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\n24-Dec-20 15:05:23 - INFO - OK, files named in the CSV \"file\" column are all present.\n24-Dec-20 15:05:23 - INFO - Configuration checked for \"create\" task using config file create.yml, no problems found.\n\n\n\n\nIt may also contain additional detail that would clutter up the console output, for example which term is being added to a vocabulary.\n\n\nBy default, new entries are appended to this log, unless you indicate that the log file should be overwritten each time Workbench is run by providing the \nlog_file_mode\n configuration option with a value of \"w\":\n\n\nlog_file_mode: w",
            "title": "Logging"
        },
        {
            "location": "/workflows/",
            "text": "Islandora Workbench can be used in a variety of content ingest workflows. Several are outlined below.\n\n\nBatch ingest\n\n\nThis is the most common workflow. A user prepares a CSV file and accompanying media files, and runs Workbench to ingest the content:\n\n\n\n\nNote that within this basic workflow, options exist for creating nodes with \nno media\n, and creating stub nodes \nfrom files\n (i.e., no accompanying CSV file).\n\n\nDistributed batch ingest\n\n\nIt is possible to separate the tasks of creating a node and its accompanying media. This can be done in a couple of ways:\n\n\n\n\ncreating the nodes first, using the \nnodes_only: true\n configuration option, and \nadding media to those nodes\n separately\n\n\ncreating stub nodes \ndirectly from media files\n, and \nupdating the nodes\n separately\n\n\n\n\n\n\nIn this workflow, the person creating the nodes and the person updating them later need not be the same. In both cases, Workbench can create an \noutput CSV\n that can be used in the second half of the workflow.\n\n\nMigrations\n\n\nIslandora Workbench is not intended to replace Drupal's Migrate framework, but it can be used in conjunction with other tools and processes to create Islandora content using the output of a source repository platform, such as the \nIslandora Get CSV\n module for Islandora 7.x. This content can then be used as input for Islandora Workbench, as illustrated here:\n\n\n\n\nAn advantage of migrating to Islandora in this way is that the CSV file can be cleaned or supplemented (manually or otherwise) prior to using it as Workbench's input.\n\n\nWatch folders\n\n\nSince Islandora workbench is a command-line tool, it can be run in a scheduled job such as Linux \"cron\". If CSV and file content are present when Workbench runs, Workbench will operate on them in the same way as if a person ran Workbench manually. In the diagram below, the source of the files is the daily output of someone scanning images. If these images are saved in the directory that is specified in Workbench's \ninput_dir\n configuration option, and Workbench is run in a cron job using the \"\ncreate_from_files\n\" task, nodes will be created when the cron job executes (over night, for example):\n\n\n\n\nA variation on this workflow is to combine it with the \"Distributed\" workflow described above:\n\n\n\n\nIn this workflow, the nodes are created overnight and then updated with CSV data the next day.\n\n\n\n\nNote\n\n\nIslandora Workbench does not detect changes in directories. While tools to do so exist, Workbench's ability to ingest Islandora content in batches makes it useful to scheduled jobs, as opposed to realtime detection of new files in a directory.\n\n\n\n\nIntegrations with other systems\n\n\nA combination of the \"Migrations\" workflow and the \"Watch folder\" workflow can be used to automate the periodic movement of content from a source system (in the diagram below, Open Journal Systems or Archivematica) into Islandora:\n\n\n\n\nThe extraction of data from the source system, conversion of it into the CSV and file arrangement Workbench expects, and running of Workbench can all be scripted and executed in sequence using scheduled jobs.",
            "title": "Workflows"
        },
        {
            "location": "/workflows/#batch-ingest",
            "text": "This is the most common workflow. A user prepares a CSV file and accompanying media files, and runs Workbench to ingest the content:   Note that within this basic workflow, options exist for creating nodes with  no media , and creating stub nodes  from files  (i.e., no accompanying CSV file).",
            "title": "Batch ingest"
        },
        {
            "location": "/workflows/#distributed-batch-ingest",
            "text": "It is possible to separate the tasks of creating a node and its accompanying media. This can be done in a couple of ways:   creating the nodes first, using the  nodes_only: true  configuration option, and  adding media to those nodes  separately  creating stub nodes  directly from media files , and  updating the nodes  separately    In this workflow, the person creating the nodes and the person updating them later need not be the same. In both cases, Workbench can create an  output CSV  that can be used in the second half of the workflow.",
            "title": "Distributed batch ingest"
        },
        {
            "location": "/workflows/#migrations",
            "text": "Islandora Workbench is not intended to replace Drupal's Migrate framework, but it can be used in conjunction with other tools and processes to create Islandora content using the output of a source repository platform, such as the  Islandora Get CSV  module for Islandora 7.x. This content can then be used as input for Islandora Workbench, as illustrated here:   An advantage of migrating to Islandora in this way is that the CSV file can be cleaned or supplemented (manually or otherwise) prior to using it as Workbench's input.",
            "title": "Migrations"
        },
        {
            "location": "/workflows/#watch-folders",
            "text": "Since Islandora workbench is a command-line tool, it can be run in a scheduled job such as Linux \"cron\". If CSV and file content are present when Workbench runs, Workbench will operate on them in the same way as if a person ran Workbench manually. In the diagram below, the source of the files is the daily output of someone scanning images. If these images are saved in the directory that is specified in Workbench's  input_dir  configuration option, and Workbench is run in a cron job using the \" create_from_files \" task, nodes will be created when the cron job executes (over night, for example):   A variation on this workflow is to combine it with the \"Distributed\" workflow described above:   In this workflow, the nodes are created overnight and then updated with CSV data the next day.   Note  Islandora Workbench does not detect changes in directories. While tools to do so exist, Workbench's ability to ingest Islandora content in batches makes it useful to scheduled jobs, as opposed to realtime detection of new files in a directory.",
            "title": "Watch folders"
        },
        {
            "location": "/workflows/#integrations-with-other-systems",
            "text": "A combination of the \"Migrations\" workflow and the \"Watch folder\" workflow can be used to automate the periodic movement of content from a source system (in the diagram below, Open Journal Systems or Archivematica) into Islandora:   The extraction of data from the source system, conversion of it into the CSV and file arrangement Workbench expects, and running of Workbench can all be scripted and executed in sequence using scheduled jobs.",
            "title": "Integrations with other systems"
        },
        {
            "location": "/troubleshooting/",
            "text": "Note\n\n\nIf you are encountering problems not described here, please \nopen an issue\n and help improve Islandora Workbench!\n\n\n\n\nWorkbench is failing to ingest some nodes and is leaving messages mentioning HTTP response code 422.\n\n\nThis is probably caused by unexpected data in your CSV file that Workbench's \n--check\n validation is not finding. If you encounter these messages, please \nopen an issue\n and share your CSV input file and configuration file so we can track down the problem.\n\n\n--check is telling me that one the rows in my CSV file has more columns than headers\n\n\nThe most likely problem is that one of your CSV values contains a comma but is not wrapped in double quotes.",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#workbench-is-failing-to-ingest-some-nodes-and-is-leaving-messages-mentioning-http-response-code-422",
            "text": "This is probably caused by unexpected data in your CSV file that Workbench's  --check  validation is not finding. If you encounter these messages, please  open an issue  and share your CSV input file and configuration file so we can track down the problem.",
            "title": "Workbench is failing to ingest some nodes and is leaving messages mentioning HTTP response code 422."
        },
        {
            "location": "/troubleshooting/#-check-is-telling-me-that-one-the-rows-in-my-csv-file-has-more-columns-than-headers",
            "text": "The most likely problem is that one of your CSV values contains a comma but is not wrapped in double quotes.",
            "title": "--check is telling me that one the rows in my CSV file has more columns than headers"
        }
    ]
}