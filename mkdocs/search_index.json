{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\n\nIslandora Workbench\n is a command-line tool that allows creation, updating, and deletion of Islandora content from CSV data. It is an alternative to using Drupal's built-in Migrate framework for \ningesting Islandora content from CSV files\n. Unlike the Migrate tools, Islandora Workbench can be run anywhere - it does not need to run on the Drupal server. Drupal's Migrate framework, however, is much more flexible than Islandora Workbench, and can be extended using plugins in ways that Workbench cannot.\n\n\nNote that Islandora Workbench is not related in any way to the Drupal contrib module called \nWorkbench\n.\n\n\nFeatures\n\n\n\n\nAllows creation of Islandora nodes and media, updating of nodes, and deletion of nodes and media from CSV files\n\n\nAllows creation of paged/compound content\n\n\nCan run from anywhere - it does not need to be run from the Drupal server's command line\n\n\nProvides both sensible default configuration values and rich configuation options for power users\n\n\nProvides robust data validation functionality\n\n\nSupports a variety of Drupal entity field types (text, integer, term reference, typed relation, geolocation)\n\n\nCan generate a CSV file template based on Drupal content type\n\n\nCan use a Google Sheet or an Excel file instead of a CSV file as input\n\n\nAllows assignment of Drupal vocabulary terms using term IDs, term names, or term URIs\n\n\nAllows creation of new taxonomy terms from CSV field data\n\n\nAllows the assignment of URL aliases\n\n\nAllows adding alt text to images\n\n\nCross platform (Windows, Mac, and Linux)\n\n\nWell documented\n\n\nWell tested\n\n\nA companion project under development, \nIslandora Workbench Desktop\n, will add a graphical user interface that enables users not familiar or comfortable with the command line to use Workbench.\n\n\n\n\nUsage\n\n\nWithin the \nislandora_workbench\n directory, run the following command, providing the name of your configuration file (\"config.yml\" in this example):\n\n\n./workbench --config config.yml --check\n\n\n\n\nNote\n\n\nIf you're on Windows, you will likely need to run Workbench by explicitly invoking Python, e.g. \npython workbench --config config.yml --check\n instead of using \n./workbench\n as illustrated above.\n\n\n\n\n--check\n \nvalidates\n your configuration and input data. Typical output looks like:\n\n\nOK, connection to Drupal at http://localhost:8000 verified.\nOK, configuration file has all required values (did not check for optional values).\nOK, CSV file input_data/metadata.csv found.\nOK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\nOK, CSV column headers match Drupal field names.\nOK, required Drupal fields are present in the CSV file.\nOK, term IDs/names in CSV file exist in their respective taxonomies.\nOK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\nOK, files named in the CSV \"file\" column are all present.\nConfiguration and input data appear to be valid.\n\n\n\n\nIf your configuration file is not in the same directory as the \nworkbench\n script, use its absolute path, e.g.:\n\n\n./workbench --config /home/mark/config.yml --check\n\n\nIf \n--check\n hasn't identified any problems, you can then rerun Islandora Workbench without the \n--check\n option to create the nodes:\n\n\n./workbench --config config.yml\n\n\nWorkbench will then create a node and attached media for each record in your input CSV file. Typical output looks like:\n\n\nNode for 'Small boats in Havana Harbour' created at http://localhost:8000/node/52.\n+File media for IMG_1410.tif created.\nNode for 'Manhatten Island' created at http://localhost:8000/node/53.\n+File media for IMG_2549.jp2 created.\nNode for 'Looking across Burrard Inlet' created at http://localhost:8000/node/54.\n+Image media for IMG_2940.JPG created.\nNode for 'Amsterdam waterfront' created at http://localhost:8000/node/55.\n+Image media for IMG_2958.JPG created.\nNode for 'Alcatraz Island' created at http://localhost:8000/node/56.\n+Image media for IMG_5083.JPG created.\n\n\n\n\nIf you'd rather not see all this detail, you can set an option in your configuration file to see a progress bar instead:\n\n\n [==================================>      40.0%                                         ]\n\n\n\n\nLicense\n\n\nIslandora Workbench, and this documentation, are available under the terms of the Unlicense.\n\n\n\n\nContributing\n\n\nContibutions to this documentation are welcome. If you have a suggestion, please open an issue on the Islandora Workbench GitHub repository's \nqueue\n and tag your issue \"documentation\".",
            "title": "Home"
        },
        {
            "location": "/#overview",
            "text": "Islandora Workbench  is a command-line tool that allows creation, updating, and deletion of Islandora content from CSV data. It is an alternative to using Drupal's built-in Migrate framework for  ingesting Islandora content from CSV files . Unlike the Migrate tools, Islandora Workbench can be run anywhere - it does not need to run on the Drupal server. Drupal's Migrate framework, however, is much more flexible than Islandora Workbench, and can be extended using plugins in ways that Workbench cannot.  Note that Islandora Workbench is not related in any way to the Drupal contrib module called  Workbench .",
            "title": "Overview"
        },
        {
            "location": "/#features",
            "text": "Allows creation of Islandora nodes and media, updating of nodes, and deletion of nodes and media from CSV files  Allows creation of paged/compound content  Can run from anywhere - it does not need to be run from the Drupal server's command line  Provides both sensible default configuration values and rich configuation options for power users  Provides robust data validation functionality  Supports a variety of Drupal entity field types (text, integer, term reference, typed relation, geolocation)  Can generate a CSV file template based on Drupal content type  Can use a Google Sheet or an Excel file instead of a CSV file as input  Allows assignment of Drupal vocabulary terms using term IDs, term names, or term URIs  Allows creation of new taxonomy terms from CSV field data  Allows the assignment of URL aliases  Allows adding alt text to images  Cross platform (Windows, Mac, and Linux)  Well documented  Well tested  A companion project under development,  Islandora Workbench Desktop , will add a graphical user interface that enables users not familiar or comfortable with the command line to use Workbench.",
            "title": "Features"
        },
        {
            "location": "/#usage",
            "text": "Within the  islandora_workbench  directory, run the following command, providing the name of your configuration file (\"config.yml\" in this example):  ./workbench --config config.yml --check   Note  If you're on Windows, you will likely need to run Workbench by explicitly invoking Python, e.g.  python workbench --config config.yml --check  instead of using  ./workbench  as illustrated above.   --check   validates  your configuration and input data. Typical output looks like:  OK, connection to Drupal at http://localhost:8000 verified.\nOK, configuration file has all required values (did not check for optional values).\nOK, CSV file input_data/metadata.csv found.\nOK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\nOK, CSV column headers match Drupal field names.\nOK, required Drupal fields are present in the CSV file.\nOK, term IDs/names in CSV file exist in their respective taxonomies.\nOK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\nOK, files named in the CSV \"file\" column are all present.\nConfiguration and input data appear to be valid.  If your configuration file is not in the same directory as the  workbench  script, use its absolute path, e.g.:  ./workbench --config /home/mark/config.yml --check  If  --check  hasn't identified any problems, you can then rerun Islandora Workbench without the  --check  option to create the nodes:  ./workbench --config config.yml  Workbench will then create a node and attached media for each record in your input CSV file. Typical output looks like:  Node for 'Small boats in Havana Harbour' created at http://localhost:8000/node/52.\n+File media for IMG_1410.tif created.\nNode for 'Manhatten Island' created at http://localhost:8000/node/53.\n+File media for IMG_2549.jp2 created.\nNode for 'Looking across Burrard Inlet' created at http://localhost:8000/node/54.\n+Image media for IMG_2940.JPG created.\nNode for 'Amsterdam waterfront' created at http://localhost:8000/node/55.\n+Image media for IMG_2958.JPG created.\nNode for 'Alcatraz Island' created at http://localhost:8000/node/56.\n+Image media for IMG_5083.JPG created.  If you'd rather not see all this detail, you can set an option in your configuration file to see a progress bar instead:   [==================================>      40.0%                                         ]",
            "title": "Usage"
        },
        {
            "location": "/#license",
            "text": "Islandora Workbench, and this documentation, are available under the terms of the Unlicense.",
            "title": "License"
        },
        {
            "location": "/#contributing",
            "text": "Contibutions to this documentation are welcome. If you have a suggestion, please open an issue on the Islandora Workbench GitHub repository's  queue  and tag your issue \"documentation\".",
            "title": "Contributing"
        },
        {
            "location": "/installation/",
            "text": "Requirements\n\n\n\n\nAn \nIslandora\n repository using Drupal 9.2 or higher, with the \nIslandora Workbench Integration\n module enabled. If you are using Drupal 9.1 or earlier, please refer to the \"Using Drupal 9.1 or earlier\" section below.\n\n\nPython 3.6 or higher\n\n\nThe following Python libraries:\n\n\nruamel.yaml\n\n\nRequests\n\n\nprogress_bar\n\n\nopenpyxl\n\n\nIf you want to have these libraries automatically installed, you will need Python's \nsetuptools\n\n\n\n\n\n\n\n\nIslandora Workbench has been installed and used on Linux, Mac, and Windows.\n\n\n\n\nWarning\n\n\nSome systems have both Python 2 and Python 3 installed. It's a good idea to check which version is used when you run \npython\n. To do this, run \npython --version\n, which will output something like \"Python 2.7.17\" or \"Python 3.6.9\". If \npython --version\n indicates you're running version 2, try running \npython3 --version\n to see if you have version 3 installed.\n\n\n\n\nInstalling Islandora Workbench\n\n\nIf you already have the required Python libraries installed, simply cloning Islandora Workbench from GitHub is all you need to do:\n\n\ngit clone https://github.com/mjordan/islandora_workbench.git\n\n\nThis will create a directory named \nislandora_workbench\n where you will run the \n./workbench\n command.\n\n\nIf you don't already have the required libraries installed, clone this repo as above, and then use \nsetup.py\n:\n\n\nsudo python3 setup.py install\n\n\nAfter you run this, all of the required Python libraries will be installed.\n\n\nUpdating Islandora Workbench\n\n\nSince Islandora Workbench is under development, you will want to update it often. To do this, run the following \ngit\n command:\n\n\ngit pull origin main\n\n\nAfter you pull in the latest changes using \ngit\n, it's a good idea to rerun the setup tools in case new Python libraries have been added since you last ran the setup tools (same command as above):\n\n\nsudo python3 setup.py install\n\n\nUsing Drupal 9.1 or earlier\n\n\nWhen ingesting media in Drupal versions 8.x - 9.1, Islandora Workbench has two significant limitations/bugs that you should be aware of:\n\n\n\n\nApproximately 10% of media creation attempts will likely fail. Workbench will log these failures. Additional information is available in this \nissue\n.\n\n\nA file with a filename that already exists in Islandora will overwrite the existing file, as reported in this \nissue\n.\n\n\n\n\nTo avoid these issues, you need to be running Drupal version 9.2 or higher.",
            "title": "Requirements and installation"
        },
        {
            "location": "/installation/#requirements",
            "text": "An  Islandora  repository using Drupal 9.2 or higher, with the  Islandora Workbench Integration  module enabled. If you are using Drupal 9.1 or earlier, please refer to the \"Using Drupal 9.1 or earlier\" section below.  Python 3.6 or higher  The following Python libraries:  ruamel.yaml  Requests  progress_bar  openpyxl  If you want to have these libraries automatically installed, you will need Python's  setuptools     Islandora Workbench has been installed and used on Linux, Mac, and Windows.   Warning  Some systems have both Python 2 and Python 3 installed. It's a good idea to check which version is used when you run  python . To do this, run  python --version , which will output something like \"Python 2.7.17\" or \"Python 3.6.9\". If  python --version  indicates you're running version 2, try running  python3 --version  to see if you have version 3 installed.",
            "title": "Requirements"
        },
        {
            "location": "/installation/#installing-islandora-workbench",
            "text": "If you already have the required Python libraries installed, simply cloning Islandora Workbench from GitHub is all you need to do:  git clone https://github.com/mjordan/islandora_workbench.git  This will create a directory named  islandora_workbench  where you will run the  ./workbench  command.  If you don't already have the required libraries installed, clone this repo as above, and then use  setup.py :  sudo python3 setup.py install  After you run this, all of the required Python libraries will be installed.",
            "title": "Installing Islandora Workbench"
        },
        {
            "location": "/installation/#updating-islandora-workbench",
            "text": "Since Islandora Workbench is under development, you will want to update it often. To do this, run the following  git  command:  git pull origin main  After you pull in the latest changes using  git , it's a good idea to rerun the setup tools in case new Python libraries have been added since you last ran the setup tools (same command as above):  sudo python3 setup.py install",
            "title": "Updating Islandora Workbench"
        },
        {
            "location": "/installation/#using-drupal-91-or-earlier",
            "text": "When ingesting media in Drupal versions 8.x - 9.1, Islandora Workbench has two significant limitations/bugs that you should be aware of:   Approximately 10% of media creation attempts will likely fail. Workbench will log these failures. Additional information is available in this  issue .  A file with a filename that already exists in Islandora will overwrite the existing file, as reported in this  issue .   To avoid these issues, you need to be running Drupal version 9.2 or higher.",
            "title": "Using Drupal 9.1 or earlier"
        },
        {
            "location": "/configuration/",
            "text": "The configuration file\n\n\nWorkbench uses a YAML configuration whose location is indicated in the \n--config\n argument. This file defines the various options it will use to create, update, or delete Islandora content (such as which CSV file to use and what directory your images are in). The simplest configuration file needs only the following four options:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n\n\n\nIn this example, the \ntask\n being performed is creating nodes (and optionally media). Other tasks are \ncreate_from_files\n, \nupdate\n, \ndelete\n, \nadd_media\n, and \ndelete_media\n. Some of the configuration settings documented below are used in all tasks, while others are only used in specific tasks.\n\n\nConfiguration settings\n\n\nThe settings defined in a configuration file are documented below, grouped into broad funcational categories for easier reference. The order of the options in the configuration file doesn't matter, and settings do not need to be grouped together in any specific way in the configuration file.\n\n\nRequired settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntask\n\n\n\u2714\ufe0f\n\n\n\n\nOne of 'create', 'create_from_files', update', delete', 'add_media', or 'delete_media'\n\n\n\n\n\n\nhost\n\n\n\u2714\ufe0f\n\n\n\n\nThe hostname, including \nhttp://\n or \nhttps://\n of your Islandora repository, and port number if not the default 80. This value must be wrapped in quotation marks.\n\n\n\n\n\n\nusername\n\n\n\u2714\ufe0f\n\n\n\n\nThe username used to authenticate the requests. This Drupal user should be a member of the \"Administrator\" role. If you want to create nodes that are owned by a specific Drupal user, include their numeric user ID in the \nuid\n column in your CSV.\n\n\n\n\n\n\npassword\n\n\n\u2714\ufe0f\n\n\n\n\nThe user's password.\n\n\n\n\n\n\n\n\nDrupal settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontent_type\n\n\n\n\nislandora_object\n\n\nThe machine name of the Drupal node content type you are creating or updating.\n\n\n\n\n\n\ndrupal_filesystem\n\n\n\n\nfedora://\n\n\nOne of 'fedora://', 'public://', or 'private://'. Only used with Drupal 8.x - 9.1; starting with Drupal 9.2, the filesystem is automatically detected from the media's configuration.\n\n\n\n\n\n\nallow_adding_terms\n\n\n\n\nfalse\n\n\nDetermines if Workbench will add taxonomy terms if they do not exist in the target vocabulary. See more information in the \"\nTaxonomy reference fields\n\" section.\n\n\n\n\n\n\npublished\n\n\n\n\ntrue\n\n\nWhether nodes are published or not. Applies to \ncreate\n task only. Set to false if you want the nodes to be unpublished. Note that whether or not a node is published can also be set at a node level in the CSV file in the status base field, as described in the \"Base Fields\" section. Values in the CSV override the value of published set here.\n\n\n\n\n\n\nvalidate_title_length\n\n\n\n\ntrue\n\n\nWhether or not to check if title values in the CSV exceed Drupal's maximum allowed length of 255 characters. Defaults to true. Set to false if you are using a module that lets you override Drupal's maximum title length, such as \nNode Title Length\n or \nEntity Title Length\n. Also, if your task is \nupdate\n, you should set this to false if \ntitle\n is not one of the fields you are updating.\n\n\n\n\n\n\nlist_missing_drupal_fields\n\n\n\n\nfalse\n\n\nSet to \ntrue\n to tell Workbench to provide a list of fields that exist in your input CSV but that cannot be matched to Drupal field names (or reserved column names such as \"file\"). If \nfalse\n, Workbench will still check for CSV column headers that it can't match to Drupal fields, but will exit upon finding the first such field. This option produces a list of fields instead of exiting on detecting the first field.\n\n\n\n\n\n\n\n\nInput data location settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput_dir\n\n\n\n\ninput_data\n\n\nThe full or relative path to the directory containing the files and metadata CSV file.\n\n\n\n\n\n\ninput_csv\n\n\n\n\nmetadata.csv\n\n\nPath to the CSV metadata file. Can be absolute, or if just the filename is provided, will be assumed to be in the directory named in \ninput_dir\n. Can also be the URL to a Google spreadsheet (see the \"\nUsing Google Sheets as input data\n\" section for more information).\n\n\n\n\n\n\ngoogle_sheets_csv_filename\n\n\n\n\ngoogle_sheet.csv\n\n\nLocal CSV filename for data from a Google spreadsheet. See the \"\nUsing Google Sheets as input data\n\" section for more information.\n\n\n\n\n\n\ngoogle_sheets_gid\n\n\n\n\n0\n\n\nThe \"gid\" of the worksheet to use in a Google Sheet. See  \"\nUsing Google Sheets as input data\n\" section for more information.\n\n\n\n\n\n\nexcel_worksheet\n\n\n\n\nSheet1\n\n\nIf using an Excel file as your input CSV file, the name of the worksheet that the CSV data will be extracted from.\n\n\n\n\n\n\n\n\nOutput CSV settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noutput_csv\n\n\n\n\n\n\nThe full or relative path to a CSV file with one record per node created by Workbench. See \"\nThe output CSV file\n\" section for more information.\n\n\n\n\n\n\n\n\nCSV input file settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid_field\n\n\n\n\nid\n\n\nThe name of the field in the CSV that uniquely identifies each record.\n\n\n\n\n\n\ndelimiter\n\n\n\n\n, [comma]\n\n\nThe delimiter used in the CSV file, for example, \",\" or \"\\t\". If omitted, defaults to \",\".\n\n\n\n\n\n\nsubdelimiter\n\n\n\n\n| [pipe]\n\n\nThe subdelimiter used in the CSV file to define multiple values in one field. If omitted, defaults to \"|\".\n\n\n\n\n\n\ncsv_field_templates\n\n\n\n\n\n\nUsed in the \ncreate\n and \nupdate\n tasks only. A list of Drupal field machine names and corresponding values that are copied into the CSV input file. More detail provided in the \"\nCSV field templates\n\" section.\n\n\n\n\n\n\nignore_csv_columns\n\n\n\n\n\n\nUsed in the \ncreate\n and \nupdate\n tasks only. A list of CSV column headers that Workbench should ignore.\n\n\n\n\n\n\n\n\nMedia settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnodes_only\n\n\n\n\nfalse\n\n\nInclude this option in \ncreate\n tasks, set to \ntrue\n, if you want to only create nodes and not their accompanying media. See the \"Creating nodes but not media\" section for more information. 'fedora://'.\n\n\n\n\n\n\nallow_missing_files\n\n\n\n\nfalse\n\n\nDetermines if empty \nfile\n values are allowed. If set to true, empty file values are allowed and will result in nodes without attached media. Defaults to false (which means all file values must contain the name of a file that exists in the \ninput_data\n directory).\n\n\n\n\n\n\nmedia_use_tid\n\n\n\n\nhttp://pcdm.org/use#OriginalFile\n\n\nThe term ID for the term from the \"Islandora Media Use\" vocabulary you want to apply to the media being created. You can provide a term URI instead of a term ID, for example \n\"http://pcdm.org/use#OriginalFile\"\n. You can specify multiple values for this setting by joining them with the subdelimiter configured in the \nsubdelimiter\n setting; for example, \nmedia_use_tid: 17|18\n. You can also set this at the object level by including \nmedia_use_tid\n in your CSV file; values there will override the value set in your configuration file.\n\n\n\n\n\n\nmedia_type [singular]\n\n\n\n\n\n\nOverrides, for all media being created, Workbench's default definition of whether the media being created is an image, file, document, audio, or video. Used in the \ncreate\n, \nadd_media\n, and \ncreate_from_files\n tasks. More detail provided in the \"[Setting Media Types]\n\n\n\n\n\n\nmedia_types [plural]\n\n\n\n\n\n\nOverrides default media type definitions on a per file extension basis. Used in the \ncreate\n, \nadd_media\n, and \ncreate_from_files\n tasks. More detail provided in the \"Setting Media Types\" section.\n\n\n\n\n\n\ndelete_media_with_nodes\n\n\n\n\ntrue\n\n\nWhen a node is deleted using a \ndelete\n task, by default, all if its media are automatically deleted. Set this option to false to not delete all of a node's media (you do not generally want to keep the media without the node).\n\n\n\n\n\n\nuse_node_title_for_media\n\n\n\n\nfalse\n\n\nFor remote files, if set to \ntrue\n, name the downloaded copy using the parent node's title value. If \nfalse\n, downloaded file's name will depend on the application/website that is serving up the file.\n\n\n\n\n\n\ndelete_tmp_upload\n\n\n\n\nfalse\n\n\nFor remote files, if set to \ntrue\n, remote file is deleted after it is used to create media. If \nfalse\n, downloaded file will remain in your \ninput_dir\n.\n\n\n\n\n\n\nmedia_file_fields\n\n\n\n\n\n\nDefines the name of the field that refers to the file in an Islandora media. For more information, see this \nTroubleshooting entry\n.\n\n\n\n\n\n\n\n\nIslandora model settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodel [singular]\n\n\n\n\n\n\nUsed in the \ncreate_from_files\n task only. Defines the term ID from the the \"Islandora Models\" vocabulary for all nodes created using this task. Note: one of \nmodel\n or \nmodels\n is required. More detail provided in the \"\nCreating nodes from files\n\" section.\n\n\n\n\n\n\nmodels [plural]\n\n\n\n\n\n\nUsed in the \ncreate_from_files\n task only. Provides a mapping bewteen file extensions and terms in the \"Islandora Models\" vocabulary. Note: one of \nmodel\n or \nmodels\n is required. More detail provided in the \nCreating nodes from files\n\" section.\n\n\n\n\n\n\n\n\nPaged and compound content settings\n\n\nSee the section \"\nCreating paged content\n\" for more information.\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npaged_content_from_directories\n\n\n\n\nfalse\n\n\nSet to true if you are using the \"\nUsing subdirectories\n\" method of creating paged content.\n\n\n\n\n\n\npaged_content_sequence_seprator\n\n\n\n\n- [hyphen]\n\n\nThe character used to separate the page sequence number from the rest of the filename. Used when creating paged content with the \"\nUsing subdirectories\n\" method.\n\n\n\n\n\n\npaged_content_page_model_tid\n\n\n\n\n\n\nRequired if \npaged_content_from_directories\n is true. The the term ID from the Islandora Models taxonomy to assign to pages.\n\n\n\n\n\n\npaged_content_page_display_hints\n\n\n\n\n\n\nThe term ID from the Islandora Display taxonomy to assign to pages. If not included, defaults to the value of the \nfield_display_hints\n in the parent's record in the CSV file.\n\n\n\n\n\n\npaged_content_page_content_type\n\n\n\n\n\n\nSet to the machine name of the Drupal node content type for pages created using the \"\nUsing subdirectories\n\" method if it is different than the content type of the parent (which is specified in the content_type setting).\n\n\n\n\n\n\nsecondary_tasks\n\n\n\n\n\n\nA list of configuration file names that are executed as secondary tasks after the primary task to create compound objects. See \"\nUsing a secondary task\n\" for more information.\n\n\n\n\n\n\n\n\nLogging settings\n\n\nSee the \"\nLogging\n\" section for more information.\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog_file_path\n\n\n\n\nworkbench.log\n\n\nThe path to the log file, absolute or relative to \nworkbench\n.\n\n\n\n\n\n\nlog_file_mode\n\n\n\n\na [append]\n\n\nSet to \"w\" to overwrite the log file, if it exists.\n\n\n\n\n\n\nlog_json\n\n\n\n\nfalse\n\n\nWhether or not to log the raw JSON POSTed, PUT, or PATCHed to Drupal. Useful for debugging.\n\n\n\n\n\n\n\n\nMiscellaneous settings\n\n\n\n\n\n\n\n\nSetting\n\n\nRequired\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npause\n\n\n\n\n\n\nDefines the number of seconds to pause between each REST request to Drupal. Include it in your configuration to lessen the impact of Islandora Workbench on your site during large jobs, for example pause: 1.5.\n\n\n\n\n\n\nuser_agent\n\n\n\n\nIslandora Workbench\n\n\nString to use as the User-Agent header in HTTP requests.\n\n\n\n\n\n\nallow_redirects\n\n\n\n\ntrue\n\n\nWhether or not to allow Islandora Workbench to respond to HTTP redirects.\n\n\n\n\n\n\nbootstrap\n\n\n\n\n\n\nAbsolute path to one or more scripts that execute prior to Workbench connecting to Drupal. Scripts can be in any language, and need to be executable. For an example of using this feature to run a script that generates sample Islandora content, see the \"\nGenerating sample Islandora content\n\" section.\n\n\n\n\n\n\nprogress_bar\n\n\n\n\nfalse\n\n\nShow a progress bar when running Workbench instead of row-by-row output.\n\n\n\n\n\n\ndrupal_8\n\n\n\n\nfalse\n\n\nTells Workbench that it is communicating with a Drupal version lower than 9.2. Intended to be used in integration tests only.\n\n\n\n\n\n\n\n\nWhen you run Islandora Workbench with the \n--check\n argument, it will verify that all configuration options required for the current task are present, and if they aren't tell you so.\n\n\n\n\nNote\n\n\nIslandora Workbench automatically converts any configuration keys to lowercase, e.g., \nTask\n is equivalent to \ntask\n.\n\n\n\n\nValidating the syntax of the configuration file\n\n\nWhen you run Workbench, it confirms that your configuration file is valid YAML. This is a syntax check only, not a content check. If the file is valid YAML, Workbench then goes on to perform a long list of application-specific \nchecks\n.\n\n\nIf this syntax check fails, some detail about the problem will be displayed to the user. The same information plus the entire Python stack trace is also logged to a file named \"workbench.log\" in the Islandora Workbench directory. This file name is Workbench's default log file name, but in this case (validating the config file's YAML syntax), that file name is used regardless of the log file location defined in the configuation's \nlog_file_path\n option. The reason the error is logged in the default location instead of the value in the configuration file (if one is present) is that the configuration file isn't valid YAML and therefore can't be parsed.\n\n\nExample configuration files\n\n\nThese examples provide inline annotations explaining why the settings are included in the configuration file. Spaces are included for readability.\n\n\nCreate nodes only, no media\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# This setting tells Workbench to create nodes with no media.\n# Also, this tells --check to skip all validation of \"file\" locations.\n# Other media settings, like \"media_use_tid\", are also ignored.\nnodes_only: true\n\n\n\n\nUse a custom log file location\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# This setting tells Workbench to write its log file to the location specified\n# instead of the default \"workbench.log\" within the \"islandora_workbench\" directory.\nlog_file_path: /home/mark/workbench_log.txt\n\n\n\n\nInclude some CSV field templates\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# The values in this list of field templates are applied to every row in the\n# input CSV file before the CSV file is used to populate Drupal fields. The\n# field templates are also applied during the \"--check\" in order to validate\n# the values of the fields.\ncsv_field_templates:\n - field_member_of: 205\n - field_model: 25\n\n\n\n\nCreate nodes and media from files (no input CSV file)\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# The files to create the nodes from are in this directory.\ninput_dir: /tmp/sample_files\n\n# This tells Workbench to write a CSV file containing node IDs of the\n# created nodes, plus the field names used in the target content type\n# (\"islandora_object\" by default).\noutput_csv: /tmp/sample_files.csv\n\n# All nodes should get the \"Model\" value corresponding to this URI.\nmodel: 'https://schema.org/DigitalDocument'",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#the-configuration-file",
            "text": "Workbench uses a YAML configuration whose location is indicated in the  --config  argument. This file defines the various options it will use to create, update, or delete Islandora content (such as which CSV file to use and what directory your images are in). The simplest configuration file needs only the following four options:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora  In this example, the  task  being performed is creating nodes (and optionally media). Other tasks are  create_from_files ,  update ,  delete ,  add_media , and  delete_media . Some of the configuration settings documented below are used in all tasks, while others are only used in specific tasks.",
            "title": "The configuration file"
        },
        {
            "location": "/configuration/#configuration-settings",
            "text": "The settings defined in a configuration file are documented below, grouped into broad funcational categories for easier reference. The order of the options in the configuration file doesn't matter, and settings do not need to be grouped together in any specific way in the configuration file.",
            "title": "Configuration settings"
        },
        {
            "location": "/configuration/#required-settings",
            "text": "Setting  Required  Default value  Description      task  \u2714\ufe0f   One of 'create', 'create_from_files', update', delete', 'add_media', or 'delete_media'    host  \u2714\ufe0f   The hostname, including  http://  or  https://  of your Islandora repository, and port number if not the default 80. This value must be wrapped in quotation marks.    username  \u2714\ufe0f   The username used to authenticate the requests. This Drupal user should be a member of the \"Administrator\" role. If you want to create nodes that are owned by a specific Drupal user, include their numeric user ID in the  uid  column in your CSV.    password  \u2714\ufe0f   The user's password.",
            "title": "Required settings"
        },
        {
            "location": "/configuration/#drupal-settings",
            "text": "Setting  Required  Default value  Description      content_type   islandora_object  The machine name of the Drupal node content type you are creating or updating.    drupal_filesystem   fedora://  One of 'fedora://', 'public://', or 'private://'. Only used with Drupal 8.x - 9.1; starting with Drupal 9.2, the filesystem is automatically detected from the media's configuration.    allow_adding_terms   false  Determines if Workbench will add taxonomy terms if they do not exist in the target vocabulary. See more information in the \" Taxonomy reference fields \" section.    published   true  Whether nodes are published or not. Applies to  create  task only. Set to false if you want the nodes to be unpublished. Note that whether or not a node is published can also be set at a node level in the CSV file in the status base field, as described in the \"Base Fields\" section. Values in the CSV override the value of published set here.    validate_title_length   true  Whether or not to check if title values in the CSV exceed Drupal's maximum allowed length of 255 characters. Defaults to true. Set to false if you are using a module that lets you override Drupal's maximum title length, such as  Node Title Length  or  Entity Title Length . Also, if your task is  update , you should set this to false if  title  is not one of the fields you are updating.    list_missing_drupal_fields   false  Set to  true  to tell Workbench to provide a list of fields that exist in your input CSV but that cannot be matched to Drupal field names (or reserved column names such as \"file\"). If  false , Workbench will still check for CSV column headers that it can't match to Drupal fields, but will exit upon finding the first such field. This option produces a list of fields instead of exiting on detecting the first field.",
            "title": "Drupal settings"
        },
        {
            "location": "/configuration/#input-data-location-settings",
            "text": "Setting  Required  Default value  Description      input_dir   input_data  The full or relative path to the directory containing the files and metadata CSV file.    input_csv   metadata.csv  Path to the CSV metadata file. Can be absolute, or if just the filename is provided, will be assumed to be in the directory named in  input_dir . Can also be the URL to a Google spreadsheet (see the \" Using Google Sheets as input data \" section for more information).    google_sheets_csv_filename   google_sheet.csv  Local CSV filename for data from a Google spreadsheet. See the \" Using Google Sheets as input data \" section for more information.    google_sheets_gid   0  The \"gid\" of the worksheet to use in a Google Sheet. See  \" Using Google Sheets as input data \" section for more information.    excel_worksheet   Sheet1  If using an Excel file as your input CSV file, the name of the worksheet that the CSV data will be extracted from.",
            "title": "Input data location settings"
        },
        {
            "location": "/configuration/#output-csv-settings",
            "text": "Setting  Required  Default value  Description      output_csv    The full or relative path to a CSV file with one record per node created by Workbench. See \" The output CSV file \" section for more information.",
            "title": "Output CSV settings"
        },
        {
            "location": "/configuration/#csv-input-file-settings",
            "text": "Setting  Required  Default value  Description      id_field   id  The name of the field in the CSV that uniquely identifies each record.    delimiter   , [comma]  The delimiter used in the CSV file, for example, \",\" or \"\\t\". If omitted, defaults to \",\".    subdelimiter   | [pipe]  The subdelimiter used in the CSV file to define multiple values in one field. If omitted, defaults to \"|\".    csv_field_templates    Used in the  create  and  update  tasks only. A list of Drupal field machine names and corresponding values that are copied into the CSV input file. More detail provided in the \" CSV field templates \" section.    ignore_csv_columns    Used in the  create  and  update  tasks only. A list of CSV column headers that Workbench should ignore.",
            "title": "CSV input file settings"
        },
        {
            "location": "/configuration/#media-settings",
            "text": "Setting  Required  Default value  Description      nodes_only   false  Include this option in  create  tasks, set to  true , if you want to only create nodes and not their accompanying media. See the \"Creating nodes but not media\" section for more information. 'fedora://'.    allow_missing_files   false  Determines if empty  file  values are allowed. If set to true, empty file values are allowed and will result in nodes without attached media. Defaults to false (which means all file values must contain the name of a file that exists in the  input_data  directory).    media_use_tid   http://pcdm.org/use#OriginalFile  The term ID for the term from the \"Islandora Media Use\" vocabulary you want to apply to the media being created. You can provide a term URI instead of a term ID, for example  \"http://pcdm.org/use#OriginalFile\" . You can specify multiple values for this setting by joining them with the subdelimiter configured in the  subdelimiter  setting; for example,  media_use_tid: 17|18 . You can also set this at the object level by including  media_use_tid  in your CSV file; values there will override the value set in your configuration file.    media_type [singular]    Overrides, for all media being created, Workbench's default definition of whether the media being created is an image, file, document, audio, or video. Used in the  create ,  add_media , and  create_from_files  tasks. More detail provided in the \"[Setting Media Types]    media_types [plural]    Overrides default media type definitions on a per file extension basis. Used in the  create ,  add_media , and  create_from_files  tasks. More detail provided in the \"Setting Media Types\" section.    delete_media_with_nodes   true  When a node is deleted using a  delete  task, by default, all if its media are automatically deleted. Set this option to false to not delete all of a node's media (you do not generally want to keep the media without the node).    use_node_title_for_media   false  For remote files, if set to  true , name the downloaded copy using the parent node's title value. If  false , downloaded file's name will depend on the application/website that is serving up the file.    delete_tmp_upload   false  For remote files, if set to  true , remote file is deleted after it is used to create media. If  false , downloaded file will remain in your  input_dir .    media_file_fields    Defines the name of the field that refers to the file in an Islandora media. For more information, see this  Troubleshooting entry .",
            "title": "Media settings"
        },
        {
            "location": "/configuration/#islandora-model-settings",
            "text": "Setting  Required  Default value  Description      model [singular]    Used in the  create_from_files  task only. Defines the term ID from the the \"Islandora Models\" vocabulary for all nodes created using this task. Note: one of  model  or  models  is required. More detail provided in the \" Creating nodes from files \" section.    models [plural]    Used in the  create_from_files  task only. Provides a mapping bewteen file extensions and terms in the \"Islandora Models\" vocabulary. Note: one of  model  or  models  is required. More detail provided in the  Creating nodes from files \" section.",
            "title": "Islandora model settings"
        },
        {
            "location": "/configuration/#paged-and-compound-content-settings",
            "text": "See the section \" Creating paged content \" for more information.     Setting  Required  Default value  Description      paged_content_from_directories   false  Set to true if you are using the \" Using subdirectories \" method of creating paged content.    paged_content_sequence_seprator   - [hyphen]  The character used to separate the page sequence number from the rest of the filename. Used when creating paged content with the \" Using subdirectories \" method.    paged_content_page_model_tid    Required if  paged_content_from_directories  is true. The the term ID from the Islandora Models taxonomy to assign to pages.    paged_content_page_display_hints    The term ID from the Islandora Display taxonomy to assign to pages. If not included, defaults to the value of the  field_display_hints  in the parent's record in the CSV file.    paged_content_page_content_type    Set to the machine name of the Drupal node content type for pages created using the \" Using subdirectories \" method if it is different than the content type of the parent (which is specified in the content_type setting).    secondary_tasks    A list of configuration file names that are executed as secondary tasks after the primary task to create compound objects. See \" Using a secondary task \" for more information.",
            "title": "Paged and compound content settings"
        },
        {
            "location": "/configuration/#logging-settings",
            "text": "See the \" Logging \" section for more information.     Setting  Required  Default value  Description      log_file_path   workbench.log  The path to the log file, absolute or relative to  workbench .    log_file_mode   a [append]  Set to \"w\" to overwrite the log file, if it exists.    log_json   false  Whether or not to log the raw JSON POSTed, PUT, or PATCHed to Drupal. Useful for debugging.",
            "title": "Logging settings"
        },
        {
            "location": "/configuration/#miscellaneous-settings",
            "text": "Setting  Required  Default value  Description      pause    Defines the number of seconds to pause between each REST request to Drupal. Include it in your configuration to lessen the impact of Islandora Workbench on your site during large jobs, for example pause: 1.5.    user_agent   Islandora Workbench  String to use as the User-Agent header in HTTP requests.    allow_redirects   true  Whether or not to allow Islandora Workbench to respond to HTTP redirects.    bootstrap    Absolute path to one or more scripts that execute prior to Workbench connecting to Drupal. Scripts can be in any language, and need to be executable. For an example of using this feature to run a script that generates sample Islandora content, see the \" Generating sample Islandora content \" section.    progress_bar   false  Show a progress bar when running Workbench instead of row-by-row output.    drupal_8   false  Tells Workbench that it is communicating with a Drupal version lower than 9.2. Intended to be used in integration tests only.     When you run Islandora Workbench with the  --check  argument, it will verify that all configuration options required for the current task are present, and if they aren't tell you so.   Note  Islandora Workbench automatically converts any configuration keys to lowercase, e.g.,  Task  is equivalent to  task .",
            "title": "Miscellaneous settings"
        },
        {
            "location": "/configuration/#validating-the-syntax-of-the-configuration-file",
            "text": "When you run Workbench, it confirms that your configuration file is valid YAML. This is a syntax check only, not a content check. If the file is valid YAML, Workbench then goes on to perform a long list of application-specific  checks .  If this syntax check fails, some detail about the problem will be displayed to the user. The same information plus the entire Python stack trace is also logged to a file named \"workbench.log\" in the Islandora Workbench directory. This file name is Workbench's default log file name, but in this case (validating the config file's YAML syntax), that file name is used regardless of the log file location defined in the configuation's  log_file_path  option. The reason the error is logged in the default location instead of the value in the configuration file (if one is present) is that the configuration file isn't valid YAML and therefore can't be parsed.",
            "title": "Validating the syntax of the configuration file"
        },
        {
            "location": "/configuration/#example-configuration-files",
            "text": "These examples provide inline annotations explaining why the settings are included in the configuration file. Spaces are included for readability.",
            "title": "Example configuration files"
        },
        {
            "location": "/configuration/#create-nodes-only-no-media",
            "text": "task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# This setting tells Workbench to create nodes with no media.\n# Also, this tells --check to skip all validation of \"file\" locations.\n# Other media settings, like \"media_use_tid\", are also ignored.\nnodes_only: true",
            "title": "Create nodes only, no media"
        },
        {
            "location": "/configuration/#use-a-custom-log-file-location",
            "text": "task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# This setting tells Workbench to write its log file to the location specified\n# instead of the default \"workbench.log\" within the \"islandora_workbench\" directory.\nlog_file_path: /home/mark/workbench_log.txt",
            "title": "Use a custom log file location"
        },
        {
            "location": "/configuration/#include-some-csv-field-templates",
            "text": "task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# The values in this list of field templates are applied to every row in the\n# input CSV file before the CSV file is used to populate Drupal fields. The\n# field templates are also applied during the \"--check\" in order to validate\n# the values of the fields.\ncsv_field_templates:\n - field_member_of: 205\n - field_model: 25",
            "title": "Include some CSV field templates"
        },
        {
            "location": "/configuration/#create-nodes-and-media-from-files-no-input-csv-file",
            "text": "task: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n# The files to create the nodes from are in this directory.\ninput_dir: /tmp/sample_files\n\n# This tells Workbench to write a CSV file containing node IDs of the\n# created nodes, plus the field names used in the target content type\n# (\"islandora_object\" by default).\noutput_csv: /tmp/sample_files.csv\n\n# All nodes should get the \"Model\" value corresponding to this URI.\nmodel: 'https://schema.org/DigitalDocument'",
            "title": "Create nodes and media from files (no input CSV file)"
        },
        {
            "location": "/check/",
            "text": "Overview\n\n\nYou should always (always, \nI can't stress that enough\n) check your configuration and input prior to creating, updating, or deleting content. You can do this by running Workbench with the \n--check\n option, e.g.:\n\n\n./workbench --config config.yml --check\n\n\n\n\nNote\n\n\nIf you're on Windows, you will likely need to run Workbench by explicitly invoking Python, e.g. \npython workbench --config config.yml --check\n instead of using \n./workbench\n as illustrated above.\n\n\n\n\nIf you do this, Workbench will check the following and report any errors that require your attention before proceding:\n\n\n\n\nConfiguration file\n\n\nWhether your configuration file is valid YAML (i.e., no YAML syntax errors).\n\n\nWhether your configuration file contains all required values.\n\n\n\n\n\n\nConnection to Drupal\n\n\nWhether your Drupal has the required \nWorkbench Integration\n module enabled.\n\n\nWhether the \nhost\n you provided will accept the \nusername\n and \npassword\n you provided.\n\n\n\n\n\n\nCSV file\n\n\nWhether the CSV file is encoded in either ASCII or UTF-8.  \n\n\nWhether each row contains the same number of columns as there are column headers.\n\n\nWhether your CSV file contains required columns headers, including the field defined as the unique ID for each record (defaults to \"id\" if the \nid_field\n key is not in your config file)\n\n\nWhether your CSV column headers correspond to existing Drupal field machine names.\n\n\nWhether all Drupal fields that are configured to be required are present in the CSV file.\n\n\nWhether the columns required to create paged content are present (see \"Creating paged content\" below).\n\n\n\n\n\n\nMedia files\n\n\nWhether the files named in the CSV file are present, or in the case of remote files, are accessible (but this check is skipped if \nallow_missing_files: true\n is present in your config file for \"create\" tasks). If \nnodes_only\n is true, this check is skipped.\n\n\n\n\n\n\nField values\n\n\nBase fields\n\n\nIf the \nlangcode\n field is present in your CSV, whether values in it are valid Drupal language codes.\n\n\nWhether your CSV file contains a  \ntitle\n field (\ncreate\n task only)\n\n\nWhether values in the \ntitle\n field exceed Drupal's maximum length for titles of 255 characters (but this check is skipped if \nvalidate_title_length\n is set to \nFalse\n).\n\n\nIf the \ncreated\n field is present in your CSV file, whether the values in it are formatted correctly (like \"2020-11-15T23:49:22+00:00\") and whether the date is in the past (both of which are Drupal requirements).\n\n\nIf the \nuid\n field is present in your CSV file, whether the user IDs in that field exist in the target Drupal. Note that this check does not inspect permissions or roles, only that the user ID exists.\n\n\n\n\n\n\nWhether aliases in the \nurl_alias\n field in your CSV already exist, and whether they start with a leading slash (\n/\n).\n\n\nTaxonomy\n\n\nWhether term ID and term URIs used in CSV fields correspond to existing terms.\n\n\nWhether the length of new terms exceeds 255 characters, which is the maximum length for a term name.\n\n\nWhether the term ID (or term URI) provided for \nmedia_use_tid\n is a member of the \"Islandora Media Use\" vocabulary.\n\n\nWhether term names in your CSV require a vocabulary namespace.\n\n\n\n\n\n\nTyped Relation fields\n\n\nWhether values used in typed relation fields are in the required format\n\n\nWhether values need to be namespaced\n\n\nWhether the term IDs/term names/term URIs used in the values exist in the vocabularies configured for the field.\n\n\n\n\n\n\nIf using the pages from directories configuration (\npaged_content_from_directories: true\n):\n\n\nWhether page filenames contain an occurance of the sequence separator.\n\n\nWhether any page directories are empty.\n\n\n\n\n\n\nWhether multivalued fields exceed their allowed number of values.\n\n\nWhether values in text-type fields exceed their configured maximum length.\n\n\nWhether the nodes refrenced in \nfield_member_of\n (if that field is present in the CSV) exist.\n\n\nWhether values used in geolocation fields are valid lat,long coordinates.\n\n\nWhether values used in EDTF fields are valid EDTF date/time values (subset of date/time values only; see \ndocumentation\n for more detail). Also validates whether dates are valid Gregorian calendar dates.\n\n\n\n\n\n\n\n\nIf Workbench detects a configuration or input data violation, it will either stop and tell you why it stopped, or (if the violation will not cause Workbench's interaction with Drupal to fail), tell you that it found an anomoly and to check the log file for more detail.\n\n\nTypical (and recommended) Islandora Workbench usage\n\n\nYou will probably need to run Workbench using \n--check\n a few times before you will be ready to run it without \n--check\n and commit your data to Islandora. For example, you may need to correct errors in taxonomy term IDs or names, fix errors in media filenames, or wrap values in your CSV files in quotation marks.\n\n\nIt's also a good idea to check the Workbench log file after running \n--check\n. All warnings and errors are printed to the console, but the log file may contain additional information or detail that will help you resolve issues.\n\n\nOnce you have used \n--check\n to detect all of the problems with your CSV data, committing it to Islandora will work very reliably.\n\n\nAlso, it is good practice to check your log after each time you run Islandora Workbench, since it may contain information that is not printed to the caonsole.",
            "title": "Checking configuration and input data"
        },
        {
            "location": "/check/#overview",
            "text": "You should always (always,  I can't stress that enough ) check your configuration and input prior to creating, updating, or deleting content. You can do this by running Workbench with the  --check  option, e.g.:  ./workbench --config config.yml --check   Note  If you're on Windows, you will likely need to run Workbench by explicitly invoking Python, e.g.  python workbench --config config.yml --check  instead of using  ./workbench  as illustrated above.   If you do this, Workbench will check the following and report any errors that require your attention before proceding:   Configuration file  Whether your configuration file is valid YAML (i.e., no YAML syntax errors).  Whether your configuration file contains all required values.    Connection to Drupal  Whether your Drupal has the required  Workbench Integration  module enabled.  Whether the  host  you provided will accept the  username  and  password  you provided.    CSV file  Whether the CSV file is encoded in either ASCII or UTF-8.    Whether each row contains the same number of columns as there are column headers.  Whether your CSV file contains required columns headers, including the field defined as the unique ID for each record (defaults to \"id\" if the  id_field  key is not in your config file)  Whether your CSV column headers correspond to existing Drupal field machine names.  Whether all Drupal fields that are configured to be required are present in the CSV file.  Whether the columns required to create paged content are present (see \"Creating paged content\" below).    Media files  Whether the files named in the CSV file are present, or in the case of remote files, are accessible (but this check is skipped if  allow_missing_files: true  is present in your config file for \"create\" tasks). If  nodes_only  is true, this check is skipped.    Field values  Base fields  If the  langcode  field is present in your CSV, whether values in it are valid Drupal language codes.  Whether your CSV file contains a   title  field ( create  task only)  Whether values in the  title  field exceed Drupal's maximum length for titles of 255 characters (but this check is skipped if  validate_title_length  is set to  False ).  If the  created  field is present in your CSV file, whether the values in it are formatted correctly (like \"2020-11-15T23:49:22+00:00\") and whether the date is in the past (both of which are Drupal requirements).  If the  uid  field is present in your CSV file, whether the user IDs in that field exist in the target Drupal. Note that this check does not inspect permissions or roles, only that the user ID exists.    Whether aliases in the  url_alias  field in your CSV already exist, and whether they start with a leading slash ( / ).  Taxonomy  Whether term ID and term URIs used in CSV fields correspond to existing terms.  Whether the length of new terms exceeds 255 characters, which is the maximum length for a term name.  Whether the term ID (or term URI) provided for  media_use_tid  is a member of the \"Islandora Media Use\" vocabulary.  Whether term names in your CSV require a vocabulary namespace.    Typed Relation fields  Whether values used in typed relation fields are in the required format  Whether values need to be namespaced  Whether the term IDs/term names/term URIs used in the values exist in the vocabularies configured for the field.    If using the pages from directories configuration ( paged_content_from_directories: true ):  Whether page filenames contain an occurance of the sequence separator.  Whether any page directories are empty.    Whether multivalued fields exceed their allowed number of values.  Whether values in text-type fields exceed their configured maximum length.  Whether the nodes refrenced in  field_member_of  (if that field is present in the CSV) exist.  Whether values used in geolocation fields are valid lat,long coordinates.  Whether values used in EDTF fields are valid EDTF date/time values (subset of date/time values only; see  documentation  for more detail). Also validates whether dates are valid Gregorian calendar dates.     If Workbench detects a configuration or input data violation, it will either stop and tell you why it stopped, or (if the violation will not cause Workbench's interaction with Drupal to fail), tell you that it found an anomoly and to check the log file for more detail.",
            "title": "Overview"
        },
        {
            "location": "/check/#typical-and-recommended-islandora-workbench-usage",
            "text": "You will probably need to run Workbench using  --check  a few times before you will be ready to run it without  --check  and commit your data to Islandora. For example, you may need to correct errors in taxonomy term IDs or names, fix errors in media filenames, or wrap values in your CSV files in quotation marks.  It's also a good idea to check the Workbench log file after running  --check . All warnings and errors are printed to the console, but the log file may contain additional information or detail that will help you resolve issues.  Once you have used  --check  to detect all of the problems with your CSV data, committing it to Islandora will work very reliably.  Also, it is good practice to check your log after each time you run Islandora Workbench, since it may contain information that is not printed to the caonsole.",
            "title": "Typical (and recommended) Islandora Workbench usage"
        },
        {
            "location": "/preparing_data/",
            "text": "Islandora Workbench allows you to arrange your input data in a variety of ways. The two basic sets of data you need to prepare (depending on what task you are performing) are:\n\n\n\n\na CSV file, containing data that will populate node fields (or do other things depending on what task you are performing)\n\n\nfiles that will be used as Drupal media.\n\n\n\n\nThe options for arranging your data are detailed below.\n\n\nUsing an input directory\n\n\nIn this configuration, you define an input directory (identified by the \ninput_dir\n config option) that contains a CSV file with field content (identified by the \ninput_csv\n config option) and any accompanying media files you want to add to the newly created nodes:\n\n\ninput_data/\n\u251c\u2500\u2500 image1.JPG\n\u251c\u2500\u2500 pic_saturday.jpg\n\u251c\u2500\u2500 image-27262.jpg\n\u251c\u2500\u2500 IMG_2958.JPG\n\u251c\u2500\u2500 someimage.jpg\n\u2514\u2500\u2500 metadata.csv\n\n\n\n\nHere is the same input directory, with some explanation of how the files relate to each other:\n\n\ninput_data/         <-- This is the directory named in the \"input_dir\" configuration setting.\n\u251c\u2500\u2500 image1.JPG      <-- This and the other JPEG files are named in the \"file\" column in the CSV file.\n\u251c\u2500\u2500 pic_saturday.jpg\n\u251c\u2500\u2500 image-27262.jpg\n\u251c\u2500\u2500 IMG_2958.JPG\n\u251c\u2500\u2500 someimage.jpg\n\u2514\u2500\u2500 metadata.csv    <-- This is the CSV file named in the \"input_csv\" configuration setting.\n\n\n\n\nThe names of the image/PDF/video/etc. files are included in the \nfile\n column of the CSV file. Files with any extension that you can upload to Drupal are allowed. Islandora Workbench reads the CSV file and iterates throught it, performing the current task for each record. In this configuration, files other than the CSV and your media files are allowed in this directory (although for some configurations, your input directory should not contain any files that are not going to be ingested).\n\n\nThis is Islandora Workbench's default configuration. If you do not specify an \ninput_dir\n or an \ninput_csv\n, as illustrated in following minimal configuration file, Workbench will assume your files are in a directory named \"input_data\" in the same directory as the Workbench script, and that within that directory, your CSV file is named \"metadata.csv\":\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n\n\n\n\nWorkbench ignores the other files in the input directory, and only looks for files in that directory if the filenname alone (no directory component) is in \nfile\n column.\n\n\nworkbench           <-- The \"workbench\" script.\n\u251c\u2500\u2500 input_data/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 pic_saturday.jpg\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 IMG_2958.JPG\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 metadata.csv\n\n\n\n\nFor example, in this configuration, in the following \"metadata.csv\" file, Workbench looks for \"image1.JPG\", \"image-27626.jpg\", and \"someimage.jpg\" at \"input_data/image1.JPG\", \"input_data/image1.JPG\", and \"input_data/someimage.jpg\" respectively, relative to the location of the \"workbench\" script:\n\n\nid,file,title\n001,image1.JPG,A very good file\n0002,image-27262.jpg,My cat\n003,someimage.jpg,My dog\n\n\n\n\nWorkbench complete igonores \"pic_saturday.jpg\" and \"IMG_2958.JPG\" because they are not named in any of the \nfile\n columns in the \"metadata.csv\" file.\n\n\nIf the configuration file specified an \ninput_dir\n value, or identified a CSV file in \ninput_csv\n,  Workbench would use those values:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_dir: myfiles\ninput_csv: mymetadata.csv\n\n\n\n\nworkbench         <-- The \"workbench\" script.\n\u251c\u2500\u2500 myfiles/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 pic_saturday.jpg\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 IMG_2958.JPG\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 mymetadata.csv\n\n\n\n\nThe value of \ninput_dir\n doesn't need to be relative to the \nworkbench\n script, it can be absolute:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_dir: /tmp/myfiles\n\n\n\n\n\u251c\u2500\u2500 /tmp/myfiles/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 mymetadata.csv\n\n\n\n\nid,file,title\n001,image1.JPG,A very good file\n0002,image-27262.jpg,My cat\n003,someimage.jpg,My dog\n\n\n\n\nIn this case, even though only the CSV \nfile\n entries contain only filenames and no path information, Workbench looks for the image files at \"/tmp/myfiles/image1.JPG\", \"/tmp/myfiles/image1.JPG\", and \"/tmp/myfiles/someimage.jpg\".\n\n\nUsing absolute file paths\n\n\nWe saw in the previous section that the path specified in your configuration file's \ninput_dir\n configuration option need not be relative to the location of the \nworkbench\n script, it can be absolute. That is also true for both the configuration value of \ninput_csv\n and for the values in your input CSV's \nfile\n column.\n\n\nYou can also mix absolute and relative filenames in the same CSV file, but all relative filenames are considered to be in the directory named in \ninput_dir\n. An example configuration file for this is:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_dir: media_files\ninput_csv: /tmp/input.csv\n\n\n\n\nAnd within the \nfile\n column of the CSV, values like:\n\n\nid,file,title\n001,/tmp/mydata/file01.png,A very good file\n0002,/home/me/Documents/files/cat.jpg,My cat\n003,dog.png,My dog\n\n\n\n\nNotice that the \nfile\n values in the first two rows are absolute, but the \nfile\n value in the last row is relative. Workbench will look for that file at \"media_files/dog.png\".\n\n\n\n\nNote\n\n\nIn general, Workbench doesn't care if any file path used in configuration or CSV data is relative or absolute, but if it's relative, it's relative to the directory where the \nworkbench\n script lives.\n\n\n\n\n\n\nNote\n\n\nMost of the example paths used in this documentation are Linux paths. In general, paths on Mac computers look and work the same way. On Windows, absolute paths like \nC:\\Users\\Mark\\Downloads\\myfile.pdf\n work fine. Windows paths like this also work in Workbench configuration files.\n\n\n\n\nUsing URLs as file paths\n\n\nIn the \nfile\n column, you can also use URLs to files, like this:\n\n\nid,file,title\n001,http://www.mysite.com/file01.png,A very good file\n0002,https://mycatssite.org/images/cat.jpg,My cat\n003,dog.png,My dog\n\n\n\n\nMore information\n is available on using URLs in your \nfile\n column.\n\n\nUsing a Google Sheet as the input CSV file\n\n\nWith this option, your configuration's \ninput_csv\n option contains the URL to a publicly readable Google Sheet. To do this, simply provide the URL to the Google spreadsheet in your configuration file's \ninput_csv\n option, like this:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: 'https://docs.google.com/spreadsheets/d/13Mw7gtBy1A3ZhYEAlBzmkswIdaZvX18xoRBxfbgxqWc/edit#gid=0'\n\n\n\n\nThat's all you need to do. Every time Workbench runs, it fetches the CSV content of the spreadsheet and saves it to a local file in the directory named in your \ninput_directory\n configuration option, and from that point onward in its execution, uses the locally saved version of the spreadsheet. The default filename for this CSV file is \ngoogle_sheet.csv\n but you can change it if you need to by including the \ngoogle_sheets_csv_filename\n option in your configuration file, e.g., \ngoogle_sheets_csv_filename: my_filename.csv\n.\n\n\nIslandora Workbench fetches a new copy of the CSV data every time it runs (even with the \n--check\n option), so if you make changes to the contents of that local file, the changes will be overwritten with the data from the Google spreadsheet the next time you run Workbench. If you don't want to overwrite your local copy of the data, rename the local CSV file manually before running Workbench, and update the \ninput_csv\n option in your configuration file to use the name of the CSV file you copied.\n\n\n\n\nNote\n\n\nUsing a Google Sheet is currently the fastest and most convenient way of managing CSV data for use with Islandora Workbench. Since Sheets saves changes in realtime, and since Workbench fetches a fresh copy of the CSV data every time you run it, it's easy to iterate by making changes to your data in Sheets, running Workbench (don't forget to use \n--check\n first to identify any problems!), seeing the effects of your changes in the nodes you've just created, \nrolling back your nodes\n, tweaking your data in Sheets, and starting a new cycle.\n\n\nIf you are focused on refining your CSV metadata, you can save time by skipping the creation of media by including \nnodes_only: true\n in your configuration file.\n\n\n\n\nSelecting a specific worksheet within a Google Sheet\n\n\nWorksheets within a given Google Sheet are identified by a \"gid\". If a Sheet has only a single worksheet, its \"gid\" is \"0\" (zero):\n\n\nhttps://docs.google.com/spreadsheets/d/1RLrjb5BrlJNaasFIKrKV4l2rw/edit#gid=0\n\n\nIf you add additinal worksheets, they get a randomly generated \"gid\", such as \"1094504353\". You can see this \"gid\" in the URL when you are in the worksheet:\n\n\nhttps://docs.google.com/spreadsheets/d/1RLrjb5BrlJNaasFIKrKV4l2rw/edit#gid=1094504353\n\n\nBy default, Workbench extracts CSV data from the worksheet with a \"gid\" of \"0\". If you want Workbench to extract the CSV data from a specific worksheet that is not the one with a \"gid\" of \"0\", specify the \"gid\" in your configuration file using the \ngoogle_sheets_gid\n option, like this:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: 'https://docs.google.com/spreadsheets/d/1RLrjb5BrlJNaasFIKrKV4l2rw/edit?usp=sharing'\ngoogle_sheets_gid: 1094504353\n\n\n\n\nSome things to note about using Google Sheets:\n\n\n\n\nYou can use a Google Sheet in all tasks that use a CSV file as input.\n\n\nAll of the columns required in a local CSV file are also required in the Google spreadsheet.\n\n\nThe URL in the configuration file needs single or double quotes around it, like any other value that contains a colon.\n\n\nYou can use either the URL you copy from your browser when you are viewing the spreadsheet (which ends in \"/edit#gid=0\" or something similar), or the \"sharing\" URL you copy into your clipboard from within the \"Share\" dialog box (which ends in \"edit?usp=sharing\"). Either is OK.\n\n\nThe Google spreadsheet must be publicly readable, e.g. with \"Anyone on the Internet with this link can view\" permission.\n\n\nSpreadsheets work best for descriptive metadata if all cells are formatted as \"Plain text\". To do this in Google Sheets, select all cells, then choose the menu items Format > Number > Plain text \nbefore adding any content to the cells\n.\n\n\nIf the values in the \nfile\n column of the spreadsheet are relative, they are assumed to point to files within your local \ninput_directory\n, just like they do in a local CSV input file. However, you can also use abosolute file paths and URLs in the \nfile\n column, as described above.\n\n\n\n\nUsing an Excel file as the input CSV file\n\n\nWith this option, your configuration's \ninput_csv\n option contains the filename of an Excel 2010 (or higher) file, like this:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: my_file.xlsx\n\n\n\n\nIslandora Workbench extracts the content of this file as CSV data, and uses that extracted data as its input the same way it would use a raw CSV file.\n\n\nNote that:\n\n\n\n\nYou can use an Excel file in all tasks that use a CSV file as input.\n\n\nAll of the columns required in a local CSV file are also required in the Excel spreadsheet.\n\n\nSpreadsheets work best for descriptive metadata if all cells are formatted as \"text\". To do this, in Excel, select all cells, alt-click on the selected area, then choose the \"Format Cells\" context menu item. In the \"Number\" tab, choose \"Text\", then click on the \"OK\" button.\n\n\nThe worksheet that the CSV data is taken from is the one named \"Sheet1\", unless you specify another worksheet using the \nexcel_worksheet\n configuration option.\n\n\nIf the values in the \nfile\n column of the spreadsheet are relative, they are assumed to point to files within your local \ninput_directory\n, just like they do in a local CSV input file. However, you can also use abosolute file paths and URLs in the \nfile\n column, as described above.\n\n\n\n\nBlank or missing \"file\" values\n\n\nBy default, if the \nfile\n value for a row is empty, Workbench's \n--check\n option will show an error. But, in some cases you may want to create nodes but not add any media. If you add \nallow_missing_files: true\n to your config file for \"create\" tasks, you can leave the \nfile\n column in your CSV empty.\n\n\nCreating nodes but not media\n\n\nIf you want to only create nodes and not media, you can do so by including \nnodes_only: true\n in your configuration file. More detail \nis available\n.",
            "title": "Preparing your data"
        },
        {
            "location": "/preparing_data/#using-an-input-directory",
            "text": "In this configuration, you define an input directory (identified by the  input_dir  config option) that contains a CSV file with field content (identified by the  input_csv  config option) and any accompanying media files you want to add to the newly created nodes:  input_data/\n\u251c\u2500\u2500 image1.JPG\n\u251c\u2500\u2500 pic_saturday.jpg\n\u251c\u2500\u2500 image-27262.jpg\n\u251c\u2500\u2500 IMG_2958.JPG\n\u251c\u2500\u2500 someimage.jpg\n\u2514\u2500\u2500 metadata.csv  Here is the same input directory, with some explanation of how the files relate to each other:  input_data/         <-- This is the directory named in the \"input_dir\" configuration setting.\n\u251c\u2500\u2500 image1.JPG      <-- This and the other JPEG files are named in the \"file\" column in the CSV file.\n\u251c\u2500\u2500 pic_saturday.jpg\n\u251c\u2500\u2500 image-27262.jpg\n\u251c\u2500\u2500 IMG_2958.JPG\n\u251c\u2500\u2500 someimage.jpg\n\u2514\u2500\u2500 metadata.csv    <-- This is the CSV file named in the \"input_csv\" configuration setting.  The names of the image/PDF/video/etc. files are included in the  file  column of the CSV file. Files with any extension that you can upload to Drupal are allowed. Islandora Workbench reads the CSV file and iterates throught it, performing the current task for each record. In this configuration, files other than the CSV and your media files are allowed in this directory (although for some configurations, your input directory should not contain any files that are not going to be ingested).  This is Islandora Workbench's default configuration. If you do not specify an  input_dir  or an  input_csv , as illustrated in following minimal configuration file, Workbench will assume your files are in a directory named \"input_data\" in the same directory as the Workbench script, and that within that directory, your CSV file is named \"metadata.csv\":  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora  Workbench ignores the other files in the input directory, and only looks for files in that directory if the filenname alone (no directory component) is in  file  column.  workbench           <-- The \"workbench\" script.\n\u251c\u2500\u2500 input_data/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 pic_saturday.jpg\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 IMG_2958.JPG\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 metadata.csv  For example, in this configuration, in the following \"metadata.csv\" file, Workbench looks for \"image1.JPG\", \"image-27626.jpg\", and \"someimage.jpg\" at \"input_data/image1.JPG\", \"input_data/image1.JPG\", and \"input_data/someimage.jpg\" respectively, relative to the location of the \"workbench\" script:  id,file,title\n001,image1.JPG,A very good file\n0002,image-27262.jpg,My cat\n003,someimage.jpg,My dog  Workbench complete igonores \"pic_saturday.jpg\" and \"IMG_2958.JPG\" because they are not named in any of the  file  columns in the \"metadata.csv\" file.  If the configuration file specified an  input_dir  value, or identified a CSV file in  input_csv ,  Workbench would use those values:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_dir: myfiles\ninput_csv: mymetadata.csv  workbench         <-- The \"workbench\" script.\n\u251c\u2500\u2500 myfiles/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 pic_saturday.jpg\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 IMG_2958.JPG\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 mymetadata.csv  The value of  input_dir  doesn't need to be relative to the  workbench  script, it can be absolute:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_dir: /tmp/myfiles  \u251c\u2500\u2500 /tmp/myfiles/\n   \u251c\u2500\u2500 image1.JPG\n   \u251c\u2500\u2500 image-27262.jpg\n   \u251c\u2500\u2500 someimage.jpg\n   \u2514\u2500\u2500 mymetadata.csv  id,file,title\n001,image1.JPG,A very good file\n0002,image-27262.jpg,My cat\n003,someimage.jpg,My dog  In this case, even though only the CSV  file  entries contain only filenames and no path information, Workbench looks for the image files at \"/tmp/myfiles/image1.JPG\", \"/tmp/myfiles/image1.JPG\", and \"/tmp/myfiles/someimage.jpg\".",
            "title": "Using an input directory"
        },
        {
            "location": "/preparing_data/#using-absolute-file-paths",
            "text": "We saw in the previous section that the path specified in your configuration file's  input_dir  configuration option need not be relative to the location of the  workbench  script, it can be absolute. That is also true for both the configuration value of  input_csv  and for the values in your input CSV's  file  column.  You can also mix absolute and relative filenames in the same CSV file, but all relative filenames are considered to be in the directory named in  input_dir . An example configuration file for this is:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_dir: media_files\ninput_csv: /tmp/input.csv  And within the  file  column of the CSV, values like:  id,file,title\n001,/tmp/mydata/file01.png,A very good file\n0002,/home/me/Documents/files/cat.jpg,My cat\n003,dog.png,My dog  Notice that the  file  values in the first two rows are absolute, but the  file  value in the last row is relative. Workbench will look for that file at \"media_files/dog.png\".   Note  In general, Workbench doesn't care if any file path used in configuration or CSV data is relative or absolute, but if it's relative, it's relative to the directory where the  workbench  script lives.    Note  Most of the example paths used in this documentation are Linux paths. In general, paths on Mac computers look and work the same way. On Windows, absolute paths like  C:\\Users\\Mark\\Downloads\\myfile.pdf  work fine. Windows paths like this also work in Workbench configuration files.",
            "title": "Using absolute file paths"
        },
        {
            "location": "/preparing_data/#using-urls-as-file-paths",
            "text": "In the  file  column, you can also use URLs to files, like this:  id,file,title\n001,http://www.mysite.com/file01.png,A very good file\n0002,https://mycatssite.org/images/cat.jpg,My cat\n003,dog.png,My dog  More information  is available on using URLs in your  file  column.",
            "title": "Using URLs as file paths"
        },
        {
            "location": "/preparing_data/#using-a-google-sheet-as-the-input-csv-file",
            "text": "With this option, your configuration's  input_csv  option contains the URL to a publicly readable Google Sheet. To do this, simply provide the URL to the Google spreadsheet in your configuration file's  input_csv  option, like this:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: 'https://docs.google.com/spreadsheets/d/13Mw7gtBy1A3ZhYEAlBzmkswIdaZvX18xoRBxfbgxqWc/edit#gid=0'  That's all you need to do. Every time Workbench runs, it fetches the CSV content of the spreadsheet and saves it to a local file in the directory named in your  input_directory  configuration option, and from that point onward in its execution, uses the locally saved version of the spreadsheet. The default filename for this CSV file is  google_sheet.csv  but you can change it if you need to by including the  google_sheets_csv_filename  option in your configuration file, e.g.,  google_sheets_csv_filename: my_filename.csv .  Islandora Workbench fetches a new copy of the CSV data every time it runs (even with the  --check  option), so if you make changes to the contents of that local file, the changes will be overwritten with the data from the Google spreadsheet the next time you run Workbench. If you don't want to overwrite your local copy of the data, rename the local CSV file manually before running Workbench, and update the  input_csv  option in your configuration file to use the name of the CSV file you copied.   Note  Using a Google Sheet is currently the fastest and most convenient way of managing CSV data for use with Islandora Workbench. Since Sheets saves changes in realtime, and since Workbench fetches a fresh copy of the CSV data every time you run it, it's easy to iterate by making changes to your data in Sheets, running Workbench (don't forget to use  --check  first to identify any problems!), seeing the effects of your changes in the nodes you've just created,  rolling back your nodes , tweaking your data in Sheets, and starting a new cycle.  If you are focused on refining your CSV metadata, you can save time by skipping the creation of media by including  nodes_only: true  in your configuration file.",
            "title": "Using a Google Sheet as the input CSV file"
        },
        {
            "location": "/preparing_data/#selecting-a-specific-worksheet-within-a-google-sheet",
            "text": "Worksheets within a given Google Sheet are identified by a \"gid\". If a Sheet has only a single worksheet, its \"gid\" is \"0\" (zero):  https://docs.google.com/spreadsheets/d/1RLrjb5BrlJNaasFIKrKV4l2rw/edit#gid=0  If you add additinal worksheets, they get a randomly generated \"gid\", such as \"1094504353\". You can see this \"gid\" in the URL when you are in the worksheet:  https://docs.google.com/spreadsheets/d/1RLrjb5BrlJNaasFIKrKV4l2rw/edit#gid=1094504353  By default, Workbench extracts CSV data from the worksheet with a \"gid\" of \"0\". If you want Workbench to extract the CSV data from a specific worksheet that is not the one with a \"gid\" of \"0\", specify the \"gid\" in your configuration file using the  google_sheets_gid  option, like this:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: 'https://docs.google.com/spreadsheets/d/1RLrjb5BrlJNaasFIKrKV4l2rw/edit?usp=sharing'\ngoogle_sheets_gid: 1094504353  Some things to note about using Google Sheets:   You can use a Google Sheet in all tasks that use a CSV file as input.  All of the columns required in a local CSV file are also required in the Google spreadsheet.  The URL in the configuration file needs single or double quotes around it, like any other value that contains a colon.  You can use either the URL you copy from your browser when you are viewing the spreadsheet (which ends in \"/edit#gid=0\" or something similar), or the \"sharing\" URL you copy into your clipboard from within the \"Share\" dialog box (which ends in \"edit?usp=sharing\"). Either is OK.  The Google spreadsheet must be publicly readable, e.g. with \"Anyone on the Internet with this link can view\" permission.  Spreadsheets work best for descriptive metadata if all cells are formatted as \"Plain text\". To do this in Google Sheets, select all cells, then choose the menu items Format > Number > Plain text  before adding any content to the cells .  If the values in the  file  column of the spreadsheet are relative, they are assumed to point to files within your local  input_directory , just like they do in a local CSV input file. However, you can also use abosolute file paths and URLs in the  file  column, as described above.",
            "title": "Selecting a specific worksheet within a Google Sheet"
        },
        {
            "location": "/preparing_data/#using-an-excel-file-as-the-input-csv-file",
            "text": "With this option, your configuration's  input_csv  option contains the filename of an Excel 2010 (or higher) file, like this:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: my_file.xlsx  Islandora Workbench extracts the content of this file as CSV data, and uses that extracted data as its input the same way it would use a raw CSV file.  Note that:   You can use an Excel file in all tasks that use a CSV file as input.  All of the columns required in a local CSV file are also required in the Excel spreadsheet.  Spreadsheets work best for descriptive metadata if all cells are formatted as \"text\". To do this, in Excel, select all cells, alt-click on the selected area, then choose the \"Format Cells\" context menu item. In the \"Number\" tab, choose \"Text\", then click on the \"OK\" button.  The worksheet that the CSV data is taken from is the one named \"Sheet1\", unless you specify another worksheet using the  excel_worksheet  configuration option.  If the values in the  file  column of the spreadsheet are relative, they are assumed to point to files within your local  input_directory , just like they do in a local CSV input file. However, you can also use abosolute file paths and URLs in the  file  column, as described above.",
            "title": "Using an Excel file as the input CSV file"
        },
        {
            "location": "/preparing_data/#blank-or-missing-file-values",
            "text": "By default, if the  file  value for a row is empty, Workbench's  --check  option will show an error. But, in some cases you may want to create nodes but not add any media. If you add  allow_missing_files: true  to your config file for \"create\" tasks, you can leave the  file  column in your CSV empty.",
            "title": "Blank or missing \"file\" values"
        },
        {
            "location": "/preparing_data/#creating-nodes-but-not-media",
            "text": "If you want to only create nodes and not media, you can do so by including  nodes_only: true  in your configuration file. More detail  is available .",
            "title": "Creating nodes but not media"
        },
        {
            "location": "/fields/",
            "text": "Workbench uses a CSV file to populate Islandora objects' metadata. This file contains the field values that is to be added to new or existing nodes, and some additional reserved columns specific to Workbench. Data in this CSV file can be:\n\n\n\n\nstrings (for string or text fields) like \nUsing Islandora Workbench for Fun and Profit\n\n\nintegers (for \nfield_weight\n, for example) like \n1\n or \n7281\n\n\nthe binary values \n1\n or \n0\n\n\nExisting Drupal-generated entity IDs (term IDs for taxonomy terms or node IDs for collections and parents), which are integers like \n10\n or \n3549\n\n\nstructured strings, for typed relation (e.g., \nrelators:art:30\n), link fields (e.g., \nhttps://acme.net%%Acme Products\n), and geolocation fields (e.g., \n\"49.16667,-123.93333\"\n)\n\n\n\n\n\n\nNote\n\n\nAs is standard with CSV data, values do not need to be wrapped in double quotation marks (\n\"\n) unless they contain an instance of the delimiter character (e.g., a comma) or line breaks. Spreadsheet applications such as Google Sheets, LibreOffice Calc, and Excel will output valid CSV data.\nIf you are using a spreadsheet application, it will take care of wrapping the CSV values in double quotation marks when they are necessary - you do not need to wrap the field values yourself.\n\n\n\n\nReserved CSV columns\n\n\nThe following CSV columns are used for specific purposes and in some cases are required in your CSV file, depending on the task you are performing (see below for specific cases). Data in them does not directly populate Drupal content-type fields.\n\n\n\n\n\n\n\n\nCSV field name\n\n\nTask(s)\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nid\n\n\ncreate\n\n\nThis CSV field is used by Workbench for internal purposes, and is not added to the metadata of your Islandora objects. Therefore, it doesn't need to have any relationship to the item described in the rest of the fields in the CSV file. You can configure this CSV field name to be something other than \nid\n by using the \nid_field\n option in your configuration file.\n\n\n\n\n\n\nnode_id\n\n\nupdate, delete, add_media\n\n\nThe ID of the node you are updating, deleting, or adding media to.\n\n\n\n\n\n\nfile\n\n\ncreate, add_media\n\n\nSee detail in \"Values in the 'file' column\", below.\n\n\n\n\n\n\nurl_alias\n\n\ncreate, update\n\n\nSee detail in \"\nAssigning URL aliases\n\".\n\n\n\n\n\n\nimage_alt_text\n\n\ncreate\n\n\nSee detail in \"\nAdding alt text to images\n\".\n\n\n\n\n\n\n\n\nValues in the \"file\" column\n\n\nValues in the \nfile\n field contain the location of files that are used to create Drupal Media. Workbench can create only one media per CSV record; the type of media is determined by identifying in your configuration file a value from the \"Islandora Media Use\" vocabulary. File locations can be relative to the directory named in \ninput_dir\n, abolute paths, or URLs. Examples of each:\n\n\n\n\nrelative to directory named in the \ninput_dir\n configuration setting: \nmyfile.png\n\n\nabsolute: \n/tmp/data/myfile.png\n\n\nURL: \nhttp://example.com/files/myfile.png\n\n\n\n\nThings to note about \nfile\n values in general:\n\n\n\n\nRelative, absolute, and URL file locations can exist within the same CSV file.\n\n\nBy default, if the \nfile\n value for a row is empty, Workbench's \n--check\n option will show an error. But, in some cases you may want to create nodes but not add any media. If you add \nallow_missing_files: true\n to your config file for \"create\" tasks, you can leave the \nfile\n column in your CSV empty.\n\n\nIf you want do not want to create media for any of the rows in your CSV file, include \nnodes_only: true\n in your configuration file. More detail \nis available\n.\n\n\nCurrently, \nfile\n values can only contain characters in the ASCII or \nLatin-1\n character sets (see \nthis issue\n). The following characters with diacritics should be safe in filenames: \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d0 \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff.\n\n\n\n\nThings to note about URLs as \nfile\n values:\n\n\n\n\nWorkbench downloads files identified by URLs and saves them in the directory named in \ninput_dir\n before processing them further; within this directory, each file is saved in a subdirectory named after the value in the row's \nid_field\n field. It does not delete the files from these locations after they have been ingested into Islandora unless the \ndelete_tmp_upload\n configuration option is set to \ntrue\n.\n\n\nFiles identified by URLs must be accessible to the Workbench script, which means they must not require a username/password; however, they can be protected by a firewall, etc. as long as the computer running Workbench is allowed to retrieve the files without authenticating.\n\n\nCurrently Workbench requires that the URLs point directly to a file or a service that generates a file, and not a wrapper page or other indirect route to the file.\n\n\n\n\nRequired columns\n\n\nA small number of columns are required in your CSV, depending on the task you are performing:\n\n\n\n\n\n\n\n\nTask\n\n\nRequired in CSV\n\n\nNote\n\n\n\n\n\n\n\n\n\n\ncreate\n\n\nid\n\n\nSee detail in \"Reserved CSV fields\", above\n\n\n\n\n\n\n\n\ntitle\n\n\nThe node title.\n\n\n\n\n\n\n\n\nfile\n\n\nEmpty values in the \nfile\n field are allowed if \nallow_missing_files\n is present in your configuration file, in which case a node will be created but it will have no attached media.\n\n\n\n\n\n\nupdate\n\n\nnode_id\n\n\nThe node ID of an existing node you are updating.\n\n\n\n\n\n\ndelete\n\n\nnode_id\n\n\nThe node ID of an existing node you are deleting.\n\n\n\n\n\n\nadd_media\n\n\nnode_id\n\n\nThe node ID of an existing node you are attaching media to.\n\n\n\n\n\n\n\n\nfile\n\n\nMust contain a filename, file path, or URL. \nallow_missing_files\n only works with the \ncreate\n task.\n\n\n\n\n\n\n\n\nIf a required field is missing from your CSV, \n--check\n will tell you.\n\n\nCSV fields that contain Drupal field data\n\n\nThese are of two types of Drupal fields, base fields and content-type specific fields.\n\n\nBase fields\n\n\nBase fields are basic node properties, shared by all content types. The base fields you can include in your CSV file are:\n\n\n\n\ntitle\n: This field is required for all rows in your CSV for the \ncreate\n task. Optional for the 'update' task. Drupal limits the title's length to 255 characters, and Workbench will check that titles are less than 255 characters unless your configuration file contains \nvalidate_title_length: false\n as described above.\n\n\nlangcode\n: The language of the node. Optional. If included, use one of Drupal's language codes as values (common values are 'en', 'fr', and 'es'; the entire list can be seen \nhere\n. If absent, Drupal sets the value to the default value for your content type.\n\n\nuid\n: The Drupal user ID to assign to the node and media created with the node. Optional. Only available in \ncreate\n tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).\n\n\ncreated\n: The timestamp to use in the node's \"created\" attribute and in the \"created\" attribute of the media created with the node. Optional, but if present, it must be in format 2020-11-15T23:49:22+00:00 (the +00:00 is the difference to Greenwich time/GMT). Only available in \ncreate\n tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).\n\n\n\n\nContent type-specific fields\n\n\nThese fields correspond directly to fields configured in Drupal nodes, and data you provide in them populates their equivalent field in Drupal entities. The column headings in the CSV file must match machine names of fields that exist in the target node content type. Fields' machine names are visible within the \"Manage fields\" section of each content type's configuration, here circled in red:\n\n\n\n\nThese field names, plus the fields indicated in the \"Reserved CSV fields\" section above, are the column headers in your CSV file, like this:\n\n\nfile,id,title,field_model,field_description\nIMG_1410.tif,01,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\nIMG_2549.jp2,02,Manhatten Island,25,\"Taken from the ferry from downtown New York to Highlands, NJ. Weather was windy.\"\nIMG_2940.JPG,03,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain. Simon Fraser University is visible on the top of the mountain in the distance.\nIMG_2958.JPG,04,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\nIMG_5083.JPG,05,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"\n\n\n\n\n\n\nNote\n\n\nIf content-type field values apply to all of the rows in your CSV file, you can avoid including them in the CSV and instead use \"\nCSV field templates\n\".\n\n\n\n\nSingle and multi-valued fields\n\n\nDrupal allows for fields to have a single value, a specific maximum number of values, or unlimited number of values. In the CSV input file, each Drupal field corresponds to a single CSV field. In other words, the CSV column names must be unique, even if a Drupal field allows multiple values. Populating multivalued fields is explained below.\n\n\nSingle-valued fields\n\n\nIn your CSV file, single-valued fields simply contain the value, which, depending on the field type, can be a string or an integer. For example, using the fields defined by the Islandora Defaults module for the \"Repository Item\" content type, your CSV file could look like this:\n\n\nfile,title,id,field_model,field_description,field_rights,field_extent,field_access_terms,field_member_of\nmyfile.jpg,My nice image,obj_00001,24,\"A fine image, yes?\",Do whatever you want with it.,There's only one image.,27,45\n\n\n\n\nIn this example, the term ID for the tag you want to assign in \nfield_access_terms\n is 27, and the node ID of the collection you want to add the object to (in \nfield_member_of\n) is 45.\n\n\nMultivalued fields\n\n\nFor multivalued fields, you separate the values within a field with a pipe (\n|\n), like this:\n\n\nfile,title,field_something\nIMG_1410.tif,Small boats in Havana Harbour,One subvalue|Another subvalue\nIMG_2549.jp2,Manhatten Island,first subvalue|second subvalue|third subvalue\n\n\n\n\nThis works for string fields as well as taxonomy reference fields, e.g.:\n\n\nfile,title,field_my_multivalued_taxonomy_field\nIMG_1410.tif,Small boats in Havana Harbour,35|46\nIMG_2549.jp2,Manhatten Island,34|56|28\n\n\n\n\nDrupal strictly enforces the maximum number of values allowed in a field. If the number of values in your CSV file for a field exceed a field's configured maximum number of fields, Workbench will only populate the field to the field's configured limit.\n\n\nThe subdelimiter character defaults to a pipe (\n|\n) but can be set in your config file using the \nsubdelimiter: \";\"\n option.\n\n\nDrupal field types\n\n\nThe following types of Drupal fields can be popualted from data in your input CSV file:\n\n\n\n\ntext (plain, plain long, etc.) fields\n\n\ninteger fields\n\n\nboolean fields, with values 1 or 0\n\n\nEDTF date fields\n\n\nentity reference (taxonomy and linked node) fields\n\n\ntyped relation (taxonomy and linked node) fields\n\n\nlink fields\n\n\ngeolocation fields\n\n\n\n\nDrupal is very strict about not accepting malformed data. Therefore, Islandora Workbench needs to provide data to Drupal that is consistent with field types (string, taxonomy reference, EDTF, etc.) we are populating. This applies not only to Drupal's base fields (as we saw above) but to all fields. A field's type is indicated in the same place as its machine name, within the \"Manage fields\" section of each content type's configuration. The field types are circled in red in the screen shot below:\n\n\n\n\nBelow are guidelines for preparing CSV data that is compatible with common field types configured in Islandora repositories.\n\n\nText fields\n\n\nGenerally speaking, any Drupal field where the user enters free text into a node add/edit form is configured to be one of the Drupal \"Text\" field types.\n\n\nIslandora Workbench supports non-Latin characters in CSV, provided the CSV file is encoded as ASCII or UTF-8. For example, the following non-Latin text will be added as expected to Drupal fields:\n\n\n\n\n\u4e00\u4e5d\u4e8c\u56db\u5e74\u516d\u6708\u5341\u4e8c\u65e5 (Traditional Chinese)\n\n\n\u0938\u0930\u0915\u093e\u0930\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u095b, \u0905\u0916\u092c\u093e\u0930\u094b\u0902 \u092e\u0947\u0902 \u091b\u092a\u0947 \u0932\u0947\u0916, \u0905\u0915\u093e\u0926\u092e\u093f\u0915 \u0915\u093f\u0924\u093e\u092c\u0947\u0902 (Hindi)\n\n\n\u140a\u1455\u1405\u14ef\u1585 \u14c4\u14c7, \u1405\u14c4\u1585\u1450\u1466 \u14c2\u1432\u1466 (Inuktitut)\n\n\n\n\nSome things to note about Drupal text fields:\n\n\n\n\nIslandora Workbench populates Drupal text fields verbatim with the content provided in the CSV file, but, depending on a field's configuration, Drupal may apply \ntext filters\n.\n\n\nText fields may be configured to have a maximum length. Running Workbench with \n--check\n will produce a warning if any of the values in your CSV file surpass the configured maximum length of a field.\n\n\nSome specialized forms of text fields, such as EDTF, enforce or prohibit the presence of specific types of characters (see below for EDTF's requirements).\n\n\n\n\nTaxonomy reference fields\n\n\n\n\nNote\n\n\nIn the list of a content type's fields, as pictured above, Drupal uses \"Entity reference\" for all types of entity reference fields, of which Taxonomy references are one. The other most common kink of entity reference field is a node reference field.  \n\n\n\n\nIslandora Workbench lets you assign both existing and new taxonomy terms to nodes. Creating new terms on demand during node creation reduces the need to prepopulate your vocabularies prior to creating nodes.\n\n\nIn CSV columns for taxonomy fields, you can use either term IDs (integers) or term names (strings). You can even mix IDs and names in the same field:\n\n\nfile,title,field_my_multivalued_taxonomy_field\nimg001.png,Picture of cats and yarn,Cats|46\nimg002.png,Picture of dogs and sticks,Dogs|Sticks\nimg003.png,Picture of yarn and needles,\"Yarn, Balls of|Knitting needles\"\n\n\n\n\nBy default, if you use a term name in your CSV data that doesn't match a term name that exists in the referenced taxonomy, Workbench will detect this when you use \n--check\n, warn you, and exit. This strict default is intended to prevent users from accidentally adding unwanted terms through data entry error.\n\n\nTerms can be from any level in a vocabulary's hierarchy. In other words, if you have a vocabulary whose structure looks like this:\n\n\n\n\nyou can use the terms IDs or labels for \"Automobiles\", \"Sports cars\", or \"Land Rover\" in your CSV. The term name (or ID) is all you need; no indication of the term's place in the hierarchy is required.\n\n\nIf you add \nallow_adding_terms: true\n to your configuration file for \ncreate\n and \nupdate\n tasks, Workbench will create the new term the first time it is used in the CSV file following these rultes:\n\n\n\n\nIf multiple records in your CSV contain the same new term name in the same field, the term is only created once.\n\n\nWhen Workbench checks to see if the term with the new name exists in the target vocabulary, it normalizes it and compares it with existing term names in that vocabulary, applying these normalization rules to both the new term and the existing terms:\n\n\nIt strips all leading and trailing whitespace.\n\n\nIt replaces all other whitespace with a single space character.\n\n\nIt converts all text to lower case.\n\n\nIt removes all punctuation.\n\n\nAfter normalizing the term name using the above four rules, if the term name you provide in the CSV file does not match any existing term names in the vocabulary linked to the field after these normalization rules are applied, it is used to create a new taxonomy term. If it does match, Workbench populates the field in your nodes with the matching term.\n\n\n\n\n\n\n\n\nAdding new terms has some contraints:\n\n\n\n\nTerms created in this way do not have any external URIs. If you want your terms to have external URIs, you will need to either create the terms manually or add the URIs manually after the terms are created by Islandora Workbench.\n\n\n--check\n will identify any new terms that exceed Drupal's maxiumum allowed length for term names, 255 characters. If a term name is longer than 255 characters, Workbench will truncate it at that length, log that it has done so, and create the term.\n\n\nTaxonomy terms created with new nodes are not removed when you delete the nodes.\n\n\nCurrently, Islandora Workbench has the following limitations:\n\n\nIt cannot create new taxonomy terms that have required fields other than the core term name field. \nThis issue\n addresses that limitation. As that issue documents, in order to support additional fields on taxonomy terms (both required and optional), Workbench will need a way to express complex term data in its input CSV. If you have an opinion on how this can be done, please leave a comment at that issue.\n\n\nWorkbench cannot currently create a new term that has another term as its parent (i.e. terms below the top leve of a hierarchical taxonomy). However, for existing terms, Workbench doesn't care where they are in a taxonomy's hierarchy. \nIssue 236\n will provide the ability to create terms at any level of a vocabulary's hierarchy. Creating taxonomy terms by including them in your CSV file adds new terms to the root of the applicable vocabulary.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf you woud rather import vocabularies before referencing them using Workbench, check out the \nTaxonomy Import\n contrib module.\n\n\n\n\nUsing term names in multi-vocabulary fields\n\n\nWhile most node taxonomy fields reference only a single vocabulary, Drupal does allow fields to reference multiple vocabularies. This ability poses a problem when we use term names instead of term IDs in our CSV files: in a multi-vocabulary field, Workbench can't be sure which term name belongs in which of the multiple vocabularies referenced by that field. This applies to both existing terms and to new terms we want to add when creating node content.\n\n\nTo avoid this problem, we need to tell Workbench which of the multple vocabularies each term name should (or does) belong to. We do this by namespacing terms with the applicable vocabulary ID.\n\n\nFor example, let's imagine we have a node field whose name is \nfield_sample_tags\n, and this field references two vocabularies, \"cats\" and \"dogs\". To use the terms \nTuxedo\n, \nTabby\n, \nGerman Shepherd\n in the CSV when adding new nodes, we need to namespace them with vocabulary IDs like this:\n\n\nfield_sample_tags\ncats:Tabby\ncats:Tuxedo\ndogs:German Shepherd\n\n\n\n\nIf you want to use multiple terms in a single field, you would namespace them all:\n\n\ncats:Tuxedo|cats:Misbehaving|dogs:German Shepherd\n\n\n\n\nCSV values containing term names that have commas (\n,\n) in multi-valued, multi-vocabulary fields need to be wrapped in quotation marks (like any CSV value containing a comma), and in addition, the need to specify the namespace within each of the subvalues:\n\n\n\"tags:gum, Bubble|tags:candy, Hard\"\n\n\n\n\nUsing these conventions, Workbench will be certain which vocabulary the term names belong to. Workbench will remind you during its \n--check\n operation that you need to namespace terms. It determines 1) if the field references multiple vocabularies, and then checks to see 2) if the field's values in the CSV are term IDs or term names. If you use term names in multi-vocabulary fields, and the term names aren't namespaced, Workbench will warn you:\n\n\nError: Term names in multi-vocabulary CSV field \"field_tags\" require a vocabulary namespace; value \"Dogs\" in row 4 does not have one.\n\n\n\n\nNote that since \n:\n is a special character when you use term names in multi-vocabulary CSV fields, you can't add a namespaced term that itself contains a \n:\n. You need to add it manually to Drupal and then use its term ID (or name, or URI) in your CSV file.\n\n\nUsing term URIs instead of term IDs\n\n\nIslandora Workbench lets you use URIs assigned to terms instead of term IDs. You can use a term URI in the \nmedia_use_tid\n configuration option (for example, \n\"http://pcdm.org/use#OriginalFile\"\n) and in taxonomy fields in your metadata CSV file:\n\n\nfield_model\nhttps://schema.org/DigitalDocument\nhttp://purl.org/coar/resource_type/c_18cc\n\n\n\n\nDuring \n--check\n, Workbench will validate that URIs correspond to existing taxonomy terms.\n\n\nUsing term URIs has some constraints:\n\n\n\n\nYou cannot create a new term by providing a URI like you can by providing a term name.\n\n\nIf the same URI is registered with more than one term, Workbench will choose one and write a warning to the log indicating which term it chose and which terms the URI is registered with. However, \n--check\n will detect that a URI is registered with more than one term and warn you. At that point you can edit your CSV file to use the correct term ID rather than the URI.\n\n\n\n\nTyped Relation fields\n\n\nTyped relation fields contain information about the relationship (or \"relation\") between a taxonomy term and the node it is attached to. For example, a term from the Person vocabulary, \"Jordan, Mark\", can be an author, illustrator, or editor of the book described in the node. In this example, \"author\", \"illustrator\", and \"editor\" are the typed relations.\n\n\nThe Controlled Access Terms module allows the relations to be sets of terms from external authority lists (for example like the \nMARC Relators\n list maintained by the Library of Congress). Within a Typed Relation field's configuration, the configured relations look like this:\n\n\n\n\nIn this screenshot, \"relators\" is a namespace for the MARC Relators authority list, the codes \"acp\", \"adi\", etc are the codes for each relator, and \"Art copyist\", \"Art director\", etc. are the human-readable label for each relator.\n\n\nWithin the edit form of a node that has a Typed Relation field, the user interface adds a select list of the relation (the target taxonomy term here is \"Jordan, Mark (30))\", like this:\n\n\n\n\nTo be able to populate Typed Relation fields using CSV data with the three pieces of required data (authority list, relation type, target term), Islandora Workbench supports CSV values that contain the corresponding namespace, relator code, and taxonomy term ID, each separated by a colon (\n:\n), like this:\n\n\nrelators:art:30\n\n\nIn this example CSV value, \nrelators\n is the namespace that the relation type \nart\n is from (the Library of Congress \nRelators\n vocabulary), and the target taxonomy term ID is \n30\n.\n\n\n\n\nNote\n\n\nNote that the structure required for typed relation values in the CSV file is not the same as the structure of the relations configuration depicted in the screenshot of the \"Available Relations\" list above.\n\n\n\n\nA second option for populating Typed Relation fields is to use taxonomy term names (as opposed to term IDs) as targets:\n\n\n\"relators:art:Jordan, Mark\"\n\n\n\n\nWarning\n\n\nIn the next few paragraphs, the word \"namespace\" is used to describe two different kinds of namespaces - first, a vocabulary ID in the local Drupal and second, an ID for the external authority list of relators, for example by the Library of Congress.\n\n\n\n\nAs we saw in the \"Using term names in multi-vocabulary fields\" section above, if the field that we are populating references multiple vocabularies, we need to tell Drupal which vocabulary we are referring to with a local vocabulary namespace. To add a local vocabulary namespace to Typed Relation field CSV structure, we prepend it to the term name, like this (note the addition of \"person\"):\n\n\n\"relators:art:person:Jordan, Mark\"\n\n\n(In ths example, \nrelators\n is the external authority lists's namespace, and \nperson\n is the local Drupal vocabulary namespace, prepended to the taxonomy term name, \"Jordan, Mark\".)\n\n\nIf this seems confusing and abstruse, don't worry. Running \n--check\n will tell you that you need to add the Drupal vocabulary namespace to values in specific CSV columns.\n\n\nThe final option for popluating Typed Relation field is to use HTTP URIs as typed relation targets:\n\n\nrelators:art:http://markjordan.net\n\n\nIf you want to include multiple typed relation values in a single field of your CSV file (such as in \"field_linked_agent\"), separate the three-part values with the same subdelimiter character you use in other fields, e.g. (\n|\n) (or whatever you have configured as your \nsubdelimiter\n):\n\n\nrelators:art:30|relators:art:45\n\n\nor\n\n\n\"relators:art:person:Jordan, Mark|relators:art:45\"\n\n\nAdding new typed relation targets\n\n\nIslandora Workbench allows you to add new typed relation targets while creating and updating nodes. These targets are taxonomy terms. Your configuration file must include the \nallow_adding_terms: true\n option to add new targets. In general, adding new typed relation targets is just like adding new taxonomy terms as described above in the \"Taxonomy relation fields\" section.\n\n\nAn example of a CSV value that adds a new target term is:\n\n\n\"relators:art:person:Jordan, Mark\"\n\n\nYou can also add multiple new targets:\n\n\n\"relators:art:person:Annez, Melissa|relators:art:person:Jordan, Mark\"\n\n\nNote that:\n\n\n\n\nFor multi-vocabulary fields, new typed relator targets must be accompanied by a vocabulary namespace (\nperson\n in the above examples).\n\n\nYou cannot add new relators (e.g. \nrelators:foo\n) in your CSV file, only new target terms.\n\n\n\n\nEDTF fields\n\n\n\n\nNote\n\n\nThe date types named below are a subset of the EDTF specification. If you need validatation of additional EDTF date types, please \nopen an issue\n.\n\n\n\n\nRunning Islandora Workbench with \n--check\n will validate the following subset of \nExtended Date/Time Format (EDTF) Specification\n date types in EDTF fields:\n\n\n\n\n\n\n\n\nType\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\nDate\n\n\n1976-04-23\n\n\n\n\n\n\n\n\n1976-04\n\n\n\n\n\n\n\n\n1976\n\n\n\n\n\n\nQualified date\n\n\n1976?\n\n\n\n\n\n\n\n\n1976-04~\n\n\n\n\n\n\n\n\n1976-04-24%\n\n\n\n\n\n\nDate and time\n\n\n1985-04-12T23:20:30\n\n\n\n\n\n\nInterval\n\n\n1964/2008\n\n\n\n\n\n\n\n\n2004-06/2006-08\n\n\n\n\n\n\n\n\n2004-06-04/2006-08-01\n\n\n\n\n\n\n\n\n2004-06/2006-08-01\n\n\n\n\n\n\nSet\n\n\n[1667,1668,1670..1672]\n\n\n\n\n\n\n\n\n[1672..1682]\n\n\n\n\n\n\n\n\n[1672,1673]\n\n\n\n\n\n\n\n\n[..1672]\n\n\n\n\n\n\n\n\n[1672..]\n\n\n\n\n\n\n\n\nSubvalues in multivalued CSV fields are validated separately, e.g. if your CSV value is \n2004-06/2006-08|2007-01/2007-04\n, \n2004-06/2006-08\n and \n2007-01/2007-04\n are validated separately.\n\n\nLink fields\n\n\nThe Link field type stores URLs (e.g. \nhttps://acme.com\n) and link text in separate data elements. To add or update fields of this type, Workbench needs to provide the URL and link text in the stucture Drupal expects. To accomplish this within a single CSV field, we separate the URL and link text pairs in CSV values with double percent signs (\n%%\n), like this:\n\n\nfield_related_websites\nhttp://acme.com%%Acme Products Inc.\n\n\n\n\nYou can include multiple pairs of URL/link text pais in one CSV field if you separate them with the subdelimiter character:\n\n\nfield_related_websites\nhttp://acme.com%%Acme Products Inc.|http://diy-first-aid.net%%DIY First Aid\n\n\n\n\nThe URL is required, but the link text is not. If you don't have or want any link text, omit it and the double quotation marks:\n\n\nfield_related_websites\nhttp://acme.com\n\n\n\n\nfield_related_websites\nhttp://acme.com|http://diy-first-aid.net%%DIY First Aid\n\n\n\n\nGeolocation fields\n\n\nThe Geolocation field type, managed by the \nGeolocation Field\n contrib module, stores latitude and longitude coordinates in separate data elements. To add or update fields of this type, Workbench needs to provide the latitude and longitude data in these separate elements.\n\n\nTo simplify entering geocoordinates in the CSV file, Workbench allows geocoordinates to be in \nlat,long\n format, i.e., the latitude coordinate followed by a comma followed by the longitude coordinate. When Workbench reads your CSV file, it will split data on the comma into the required lat and long parts. An example of a single geocoordinate in a field would be:\n\n\nfield_coordinates\n\"49.16667,-123.93333\"\n\n\n\n\nYou can include multiple pairs of geocoordinates in one CSV field if you separate them with the subdelimiter character:\n\n\nfield_coordinates\n\"49.16667,-123.93333|49.25,-124.8\"\n\n\n\n\nNote that:\n\n\n\n\nGeocoordinate values in your CSV need to be wrapped in double quotation marks, unless the \ndelimiter\n key in your configuration file is set to something other than a comma.\n\n\nIf you are entering geocoordinates into a spreadsheet, a leading \n+\n will make the spreadsheet application think you are entering a formula. You can work around this by escaping the \n+\n with a backslash (\n\\\n), e.g., \n49.16667,-123.93333\n should be \n\\+49.16667,-123.93333\n, and \n49.16667,-123.93333|49.25,-124.8\n should be \n\\+49.16667,-123.93333|\\+49.25,-124.8\n. Workbench will strip the leading \n\\\n before it populates the Drupal fields.\n\n\n\n\nCommenting out CSV rows\n\n\nYou can comment out rows in your input CSV, Excel file, or Google Sheet by adding a hash mark (\n#\n) as the first character of the value in the first column. Workbench ignores these rows, both when it is run with and without \n--check\n. Commenting out rows works in all tasks that use CSV data.\n\n\nFor example, the third row in the following CSV file is commented out:\n\n\nfile,id,title,field_model,field_description\nIMG_1410.tif,01,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\nIMG_2549.jp2,02,Manhatten Island,25,Weather was windy.\n#IMG_2940.JPG,03,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain.\nIMG_2958.JPG,04,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\nIMG_5083.JPG,05,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"\n\n\n\n\nSince column order doesn't matter to Workbench, the same row is commented out in both the previous example and in this one:\n\n\nid,file,title,field_model,field_description\n01,IMG_1410.tif,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\n02,IMG_2549.jp2,Manhatten Island,25,Weather was windy.\n# 03,IMG_2940.JPG,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain.\n04,IMG_2958.JPG,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\n05,IMG_5083.JPG,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"\n\n\n\n\nCommenting works the same with in Excel and Google Sheets. Here is the CSV file used above in a Google Sheet:\n\n\n\n\nYou can also use commenting to include actual \ncomments\n in your CSV/Google Sheet/Excel file:\n\n\nid,file,title,field_model,field_description\n01,IMG_1410.tif,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\n02,IMG_2549.jp2,Manhatten Island,25,Weather was windy.\n# Let's not load the following record right now.\n# 03,IMG_2940.JPG,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain.\n04,IMG_2958.JPG,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\n05,IMG_5083.JPG,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"",
            "title": "Drupal fields and CSV fields"
        },
        {
            "location": "/fields/#reserved-csv-columns",
            "text": "The following CSV columns are used for specific purposes and in some cases are required in your CSV file, depending on the task you are performing (see below for specific cases). Data in them does not directly populate Drupal content-type fields.     CSV field name  Task(s)  Note      id  create  This CSV field is used by Workbench for internal purposes, and is not added to the metadata of your Islandora objects. Therefore, it doesn't need to have any relationship to the item described in the rest of the fields in the CSV file. You can configure this CSV field name to be something other than  id  by using the  id_field  option in your configuration file.    node_id  update, delete, add_media  The ID of the node you are updating, deleting, or adding media to.    file  create, add_media  See detail in \"Values in the 'file' column\", below.    url_alias  create, update  See detail in \" Assigning URL aliases \".    image_alt_text  create  See detail in \" Adding alt text to images \".",
            "title": "Reserved CSV columns"
        },
        {
            "location": "/fields/#values-in-the-file-column",
            "text": "Values in the  file  field contain the location of files that are used to create Drupal Media. Workbench can create only one media per CSV record; the type of media is determined by identifying in your configuration file a value from the \"Islandora Media Use\" vocabulary. File locations can be relative to the directory named in  input_dir , abolute paths, or URLs. Examples of each:   relative to directory named in the  input_dir  configuration setting:  myfile.png  absolute:  /tmp/data/myfile.png  URL:  http://example.com/files/myfile.png   Things to note about  file  values in general:   Relative, absolute, and URL file locations can exist within the same CSV file.  By default, if the  file  value for a row is empty, Workbench's  --check  option will show an error. But, in some cases you may want to create nodes but not add any media. If you add  allow_missing_files: true  to your config file for \"create\" tasks, you can leave the  file  column in your CSV empty.  If you want do not want to create media for any of the rows in your CSV file, include  nodes_only: true  in your configuration file. More detail  is available .  Currently,  file  values can only contain characters in the ASCII or  Latin-1  character sets (see  this issue ). The following characters with diacritics should be safe in filenames: \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d0 \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff.   Things to note about URLs as  file  values:   Workbench downloads files identified by URLs and saves them in the directory named in  input_dir  before processing them further; within this directory, each file is saved in a subdirectory named after the value in the row's  id_field  field. It does not delete the files from these locations after they have been ingested into Islandora unless the  delete_tmp_upload  configuration option is set to  true .  Files identified by URLs must be accessible to the Workbench script, which means they must not require a username/password; however, they can be protected by a firewall, etc. as long as the computer running Workbench is allowed to retrieve the files without authenticating.  Currently Workbench requires that the URLs point directly to a file or a service that generates a file, and not a wrapper page or other indirect route to the file.",
            "title": "Values in the \"file\" column"
        },
        {
            "location": "/fields/#required-columns",
            "text": "A small number of columns are required in your CSV, depending on the task you are performing:     Task  Required in CSV  Note      create  id  See detail in \"Reserved CSV fields\", above     title  The node title.     file  Empty values in the  file  field are allowed if  allow_missing_files  is present in your configuration file, in which case a node will be created but it will have no attached media.    update  node_id  The node ID of an existing node you are updating.    delete  node_id  The node ID of an existing node you are deleting.    add_media  node_id  The node ID of an existing node you are attaching media to.     file  Must contain a filename, file path, or URL.  allow_missing_files  only works with the  create  task.     If a required field is missing from your CSV,  --check  will tell you.",
            "title": "Required columns"
        },
        {
            "location": "/fields/#csv-fields-that-contain-drupal-field-data",
            "text": "These are of two types of Drupal fields, base fields and content-type specific fields.",
            "title": "CSV fields that contain Drupal field data"
        },
        {
            "location": "/fields/#base-fields",
            "text": "Base fields are basic node properties, shared by all content types. The base fields you can include in your CSV file are:   title : This field is required for all rows in your CSV for the  create  task. Optional for the 'update' task. Drupal limits the title's length to 255 characters, and Workbench will check that titles are less than 255 characters unless your configuration file contains  validate_title_length: false  as described above.  langcode : The language of the node. Optional. If included, use one of Drupal's language codes as values (common values are 'en', 'fr', and 'es'; the entire list can be seen  here . If absent, Drupal sets the value to the default value for your content type.  uid : The Drupal user ID to assign to the node and media created with the node. Optional. Only available in  create  tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).  created : The timestamp to use in the node's \"created\" attribute and in the \"created\" attribute of the media created with the node. Optional, but if present, it must be in format 2020-11-15T23:49:22+00:00 (the +00:00 is the difference to Greenwich time/GMT). Only available in  create  tasks. If you are creating paged/compound objects from directories, this value is applied to the parent's children (if you are creating them using the page/child-level metadata method, these fields must be in your CSV metadata).",
            "title": "Base fields"
        },
        {
            "location": "/fields/#content-type-specific-fields",
            "text": "These fields correspond directly to fields configured in Drupal nodes, and data you provide in them populates their equivalent field in Drupal entities. The column headings in the CSV file must match machine names of fields that exist in the target node content type. Fields' machine names are visible within the \"Manage fields\" section of each content type's configuration, here circled in red:   These field names, plus the fields indicated in the \"Reserved CSV fields\" section above, are the column headers in your CSV file, like this:  file,id,title,field_model,field_description\nIMG_1410.tif,01,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\nIMG_2549.jp2,02,Manhatten Island,25,\"Taken from the ferry from downtown New York to Highlands, NJ. Weather was windy.\"\nIMG_2940.JPG,03,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain. Simon Fraser University is visible on the top of the mountain in the distance.\nIMG_2958.JPG,04,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\nIMG_5083.JPG,05,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"   Note  If content-type field values apply to all of the rows in your CSV file, you can avoid including them in the CSV and instead use \" CSV field templates \".",
            "title": "Content type-specific fields"
        },
        {
            "location": "/fields/#single-and-multi-valued-fields",
            "text": "Drupal allows for fields to have a single value, a specific maximum number of values, or unlimited number of values. In the CSV input file, each Drupal field corresponds to a single CSV field. In other words, the CSV column names must be unique, even if a Drupal field allows multiple values. Populating multivalued fields is explained below.",
            "title": "Single and multi-valued fields"
        },
        {
            "location": "/fields/#single-valued-fields",
            "text": "In your CSV file, single-valued fields simply contain the value, which, depending on the field type, can be a string or an integer. For example, using the fields defined by the Islandora Defaults module for the \"Repository Item\" content type, your CSV file could look like this:  file,title,id,field_model,field_description,field_rights,field_extent,field_access_terms,field_member_of\nmyfile.jpg,My nice image,obj_00001,24,\"A fine image, yes?\",Do whatever you want with it.,There's only one image.,27,45  In this example, the term ID for the tag you want to assign in  field_access_terms  is 27, and the node ID of the collection you want to add the object to (in  field_member_of ) is 45.",
            "title": "Single-valued fields"
        },
        {
            "location": "/fields/#multivalued-fields",
            "text": "For multivalued fields, you separate the values within a field with a pipe ( | ), like this:  file,title,field_something\nIMG_1410.tif,Small boats in Havana Harbour,One subvalue|Another subvalue\nIMG_2549.jp2,Manhatten Island,first subvalue|second subvalue|third subvalue  This works for string fields as well as taxonomy reference fields, e.g.:  file,title,field_my_multivalued_taxonomy_field\nIMG_1410.tif,Small boats in Havana Harbour,35|46\nIMG_2549.jp2,Manhatten Island,34|56|28  Drupal strictly enforces the maximum number of values allowed in a field. If the number of values in your CSV file for a field exceed a field's configured maximum number of fields, Workbench will only populate the field to the field's configured limit.  The subdelimiter character defaults to a pipe ( | ) but can be set in your config file using the  subdelimiter: \";\"  option.",
            "title": "Multivalued fields"
        },
        {
            "location": "/fields/#drupal-field-types",
            "text": "The following types of Drupal fields can be popualted from data in your input CSV file:   text (plain, plain long, etc.) fields  integer fields  boolean fields, with values 1 or 0  EDTF date fields  entity reference (taxonomy and linked node) fields  typed relation (taxonomy and linked node) fields  link fields  geolocation fields   Drupal is very strict about not accepting malformed data. Therefore, Islandora Workbench needs to provide data to Drupal that is consistent with field types (string, taxonomy reference, EDTF, etc.) we are populating. This applies not only to Drupal's base fields (as we saw above) but to all fields. A field's type is indicated in the same place as its machine name, within the \"Manage fields\" section of each content type's configuration. The field types are circled in red in the screen shot below:   Below are guidelines for preparing CSV data that is compatible with common field types configured in Islandora repositories.",
            "title": "Drupal field types"
        },
        {
            "location": "/fields/#text-fields",
            "text": "Generally speaking, any Drupal field where the user enters free text into a node add/edit form is configured to be one of the Drupal \"Text\" field types.  Islandora Workbench supports non-Latin characters in CSV, provided the CSV file is encoded as ASCII or UTF-8. For example, the following non-Latin text will be added as expected to Drupal fields:   \u4e00\u4e5d\u4e8c\u56db\u5e74\u516d\u6708\u5341\u4e8c\u65e5 (Traditional Chinese)  \u0938\u0930\u0915\u093e\u0930\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u095b, \u0905\u0916\u092c\u093e\u0930\u094b\u0902 \u092e\u0947\u0902 \u091b\u092a\u0947 \u0932\u0947\u0916, \u0905\u0915\u093e\u0926\u092e\u093f\u0915 \u0915\u093f\u0924\u093e\u092c\u0947\u0902 (Hindi)  \u140a\u1455\u1405\u14ef\u1585 \u14c4\u14c7, \u1405\u14c4\u1585\u1450\u1466 \u14c2\u1432\u1466 (Inuktitut)   Some things to note about Drupal text fields:   Islandora Workbench populates Drupal text fields verbatim with the content provided in the CSV file, but, depending on a field's configuration, Drupal may apply  text filters .  Text fields may be configured to have a maximum length. Running Workbench with  --check  will produce a warning if any of the values in your CSV file surpass the configured maximum length of a field.  Some specialized forms of text fields, such as EDTF, enforce or prohibit the presence of specific types of characters (see below for EDTF's requirements).",
            "title": "Text fields"
        },
        {
            "location": "/fields/#taxonomy-reference-fields",
            "text": "Note  In the list of a content type's fields, as pictured above, Drupal uses \"Entity reference\" for all types of entity reference fields, of which Taxonomy references are one. The other most common kink of entity reference field is a node reference field.     Islandora Workbench lets you assign both existing and new taxonomy terms to nodes. Creating new terms on demand during node creation reduces the need to prepopulate your vocabularies prior to creating nodes.  In CSV columns for taxonomy fields, you can use either term IDs (integers) or term names (strings). You can even mix IDs and names in the same field:  file,title,field_my_multivalued_taxonomy_field\nimg001.png,Picture of cats and yarn,Cats|46\nimg002.png,Picture of dogs and sticks,Dogs|Sticks\nimg003.png,Picture of yarn and needles,\"Yarn, Balls of|Knitting needles\"  By default, if you use a term name in your CSV data that doesn't match a term name that exists in the referenced taxonomy, Workbench will detect this when you use  --check , warn you, and exit. This strict default is intended to prevent users from accidentally adding unwanted terms through data entry error.  Terms can be from any level in a vocabulary's hierarchy. In other words, if you have a vocabulary whose structure looks like this:   you can use the terms IDs or labels for \"Automobiles\", \"Sports cars\", or \"Land Rover\" in your CSV. The term name (or ID) is all you need; no indication of the term's place in the hierarchy is required.  If you add  allow_adding_terms: true  to your configuration file for  create  and  update  tasks, Workbench will create the new term the first time it is used in the CSV file following these rultes:   If multiple records in your CSV contain the same new term name in the same field, the term is only created once.  When Workbench checks to see if the term with the new name exists in the target vocabulary, it normalizes it and compares it with existing term names in that vocabulary, applying these normalization rules to both the new term and the existing terms:  It strips all leading and trailing whitespace.  It replaces all other whitespace with a single space character.  It converts all text to lower case.  It removes all punctuation.  After normalizing the term name using the above four rules, if the term name you provide in the CSV file does not match any existing term names in the vocabulary linked to the field after these normalization rules are applied, it is used to create a new taxonomy term. If it does match, Workbench populates the field in your nodes with the matching term.     Adding new terms has some contraints:   Terms created in this way do not have any external URIs. If you want your terms to have external URIs, you will need to either create the terms manually or add the URIs manually after the terms are created by Islandora Workbench.  --check  will identify any new terms that exceed Drupal's maxiumum allowed length for term names, 255 characters. If a term name is longer than 255 characters, Workbench will truncate it at that length, log that it has done so, and create the term.  Taxonomy terms created with new nodes are not removed when you delete the nodes.  Currently, Islandora Workbench has the following limitations:  It cannot create new taxonomy terms that have required fields other than the core term name field.  This issue  addresses that limitation. As that issue documents, in order to support additional fields on taxonomy terms (both required and optional), Workbench will need a way to express complex term data in its input CSV. If you have an opinion on how this can be done, please leave a comment at that issue.  Workbench cannot currently create a new term that has another term as its parent (i.e. terms below the top leve of a hierarchical taxonomy). However, for existing terms, Workbench doesn't care where they are in a taxonomy's hierarchy.  Issue 236  will provide the ability to create terms at any level of a vocabulary's hierarchy. Creating taxonomy terms by including them in your CSV file adds new terms to the root of the applicable vocabulary.      Note  If you woud rather import vocabularies before referencing them using Workbench, check out the  Taxonomy Import  contrib module.",
            "title": "Taxonomy reference fields"
        },
        {
            "location": "/fields/#using-term-names-in-multi-vocabulary-fields",
            "text": "While most node taxonomy fields reference only a single vocabulary, Drupal does allow fields to reference multiple vocabularies. This ability poses a problem when we use term names instead of term IDs in our CSV files: in a multi-vocabulary field, Workbench can't be sure which term name belongs in which of the multiple vocabularies referenced by that field. This applies to both existing terms and to new terms we want to add when creating node content.  To avoid this problem, we need to tell Workbench which of the multple vocabularies each term name should (or does) belong to. We do this by namespacing terms with the applicable vocabulary ID.  For example, let's imagine we have a node field whose name is  field_sample_tags , and this field references two vocabularies, \"cats\" and \"dogs\". To use the terms  Tuxedo ,  Tabby ,  German Shepherd  in the CSV when adding new nodes, we need to namespace them with vocabulary IDs like this:  field_sample_tags\ncats:Tabby\ncats:Tuxedo\ndogs:German Shepherd  If you want to use multiple terms in a single field, you would namespace them all:  cats:Tuxedo|cats:Misbehaving|dogs:German Shepherd  CSV values containing term names that have commas ( , ) in multi-valued, multi-vocabulary fields need to be wrapped in quotation marks (like any CSV value containing a comma), and in addition, the need to specify the namespace within each of the subvalues:  \"tags:gum, Bubble|tags:candy, Hard\"  Using these conventions, Workbench will be certain which vocabulary the term names belong to. Workbench will remind you during its  --check  operation that you need to namespace terms. It determines 1) if the field references multiple vocabularies, and then checks to see 2) if the field's values in the CSV are term IDs or term names. If you use term names in multi-vocabulary fields, and the term names aren't namespaced, Workbench will warn you:  Error: Term names in multi-vocabulary CSV field \"field_tags\" require a vocabulary namespace; value \"Dogs\" in row 4 does not have one.  Note that since  :  is a special character when you use term names in multi-vocabulary CSV fields, you can't add a namespaced term that itself contains a  : . You need to add it manually to Drupal and then use its term ID (or name, or URI) in your CSV file.",
            "title": "Using term names in multi-vocabulary fields"
        },
        {
            "location": "/fields/#using-term-uris-instead-of-term-ids",
            "text": "Islandora Workbench lets you use URIs assigned to terms instead of term IDs. You can use a term URI in the  media_use_tid  configuration option (for example,  \"http://pcdm.org/use#OriginalFile\" ) and in taxonomy fields in your metadata CSV file:  field_model\nhttps://schema.org/DigitalDocument\nhttp://purl.org/coar/resource_type/c_18cc  During  --check , Workbench will validate that URIs correspond to existing taxonomy terms.  Using term URIs has some constraints:   You cannot create a new term by providing a URI like you can by providing a term name.  If the same URI is registered with more than one term, Workbench will choose one and write a warning to the log indicating which term it chose and which terms the URI is registered with. However,  --check  will detect that a URI is registered with more than one term and warn you. At that point you can edit your CSV file to use the correct term ID rather than the URI.",
            "title": "Using term URIs instead of term IDs"
        },
        {
            "location": "/fields/#typed-relation-fields",
            "text": "Typed relation fields contain information about the relationship (or \"relation\") between a taxonomy term and the node it is attached to. For example, a term from the Person vocabulary, \"Jordan, Mark\", can be an author, illustrator, or editor of the book described in the node. In this example, \"author\", \"illustrator\", and \"editor\" are the typed relations.  The Controlled Access Terms module allows the relations to be sets of terms from external authority lists (for example like the  MARC Relators  list maintained by the Library of Congress). Within a Typed Relation field's configuration, the configured relations look like this:   In this screenshot, \"relators\" is a namespace for the MARC Relators authority list, the codes \"acp\", \"adi\", etc are the codes for each relator, and \"Art copyist\", \"Art director\", etc. are the human-readable label for each relator.  Within the edit form of a node that has a Typed Relation field, the user interface adds a select list of the relation (the target taxonomy term here is \"Jordan, Mark (30))\", like this:   To be able to populate Typed Relation fields using CSV data with the three pieces of required data (authority list, relation type, target term), Islandora Workbench supports CSV values that contain the corresponding namespace, relator code, and taxonomy term ID, each separated by a colon ( : ), like this:  relators:art:30  In this example CSV value,  relators  is the namespace that the relation type  art  is from (the Library of Congress  Relators  vocabulary), and the target taxonomy term ID is  30 .   Note  Note that the structure required for typed relation values in the CSV file is not the same as the structure of the relations configuration depicted in the screenshot of the \"Available Relations\" list above.   A second option for populating Typed Relation fields is to use taxonomy term names (as opposed to term IDs) as targets:  \"relators:art:Jordan, Mark\"   Warning  In the next few paragraphs, the word \"namespace\" is used to describe two different kinds of namespaces - first, a vocabulary ID in the local Drupal and second, an ID for the external authority list of relators, for example by the Library of Congress.   As we saw in the \"Using term names in multi-vocabulary fields\" section above, if the field that we are populating references multiple vocabularies, we need to tell Drupal which vocabulary we are referring to with a local vocabulary namespace. To add a local vocabulary namespace to Typed Relation field CSV structure, we prepend it to the term name, like this (note the addition of \"person\"):  \"relators:art:person:Jordan, Mark\"  (In ths example,  relators  is the external authority lists's namespace, and  person  is the local Drupal vocabulary namespace, prepended to the taxonomy term name, \"Jordan, Mark\".)  If this seems confusing and abstruse, don't worry. Running  --check  will tell you that you need to add the Drupal vocabulary namespace to values in specific CSV columns.  The final option for popluating Typed Relation field is to use HTTP URIs as typed relation targets:  relators:art:http://markjordan.net  If you want to include multiple typed relation values in a single field of your CSV file (such as in \"field_linked_agent\"), separate the three-part values with the same subdelimiter character you use in other fields, e.g. ( | ) (or whatever you have configured as your  subdelimiter ):  relators:art:30|relators:art:45  or  \"relators:art:person:Jordan, Mark|relators:art:45\"",
            "title": "Typed Relation fields"
        },
        {
            "location": "/fields/#adding-new-typed-relation-targets",
            "text": "Islandora Workbench allows you to add new typed relation targets while creating and updating nodes. These targets are taxonomy terms. Your configuration file must include the  allow_adding_terms: true  option to add new targets. In general, adding new typed relation targets is just like adding new taxonomy terms as described above in the \"Taxonomy relation fields\" section.  An example of a CSV value that adds a new target term is:  \"relators:art:person:Jordan, Mark\"  You can also add multiple new targets:  \"relators:art:person:Annez, Melissa|relators:art:person:Jordan, Mark\"  Note that:   For multi-vocabulary fields, new typed relator targets must be accompanied by a vocabulary namespace ( person  in the above examples).  You cannot add new relators (e.g.  relators:foo ) in your CSV file, only new target terms.",
            "title": "Adding new typed relation targets"
        },
        {
            "location": "/fields/#edtf-fields",
            "text": "Note  The date types named below are a subset of the EDTF specification. If you need validatation of additional EDTF date types, please  open an issue .   Running Islandora Workbench with  --check  will validate the following subset of  Extended Date/Time Format (EDTF) Specification  date types in EDTF fields:     Type  Examples      Date  1976-04-23     1976-04     1976    Qualified date  1976?     1976-04~     1976-04-24%    Date and time  1985-04-12T23:20:30    Interval  1964/2008     2004-06/2006-08     2004-06-04/2006-08-01     2004-06/2006-08-01    Set  [1667,1668,1670..1672]     [1672..1682]     [1672,1673]     [..1672]     [1672..]     Subvalues in multivalued CSV fields are validated separately, e.g. if your CSV value is  2004-06/2006-08|2007-01/2007-04 ,  2004-06/2006-08  and  2007-01/2007-04  are validated separately.",
            "title": "EDTF fields"
        },
        {
            "location": "/fields/#link-fields",
            "text": "The Link field type stores URLs (e.g.  https://acme.com ) and link text in separate data elements. To add or update fields of this type, Workbench needs to provide the URL and link text in the stucture Drupal expects. To accomplish this within a single CSV field, we separate the URL and link text pairs in CSV values with double percent signs ( %% ), like this:  field_related_websites\nhttp://acme.com%%Acme Products Inc.  You can include multiple pairs of URL/link text pais in one CSV field if you separate them with the subdelimiter character:  field_related_websites\nhttp://acme.com%%Acme Products Inc.|http://diy-first-aid.net%%DIY First Aid  The URL is required, but the link text is not. If you don't have or want any link text, omit it and the double quotation marks:  field_related_websites\nhttp://acme.com  field_related_websites\nhttp://acme.com|http://diy-first-aid.net%%DIY First Aid",
            "title": "Link fields"
        },
        {
            "location": "/fields/#geolocation-fields",
            "text": "The Geolocation field type, managed by the  Geolocation Field  contrib module, stores latitude and longitude coordinates in separate data elements. To add or update fields of this type, Workbench needs to provide the latitude and longitude data in these separate elements.  To simplify entering geocoordinates in the CSV file, Workbench allows geocoordinates to be in  lat,long  format, i.e., the latitude coordinate followed by a comma followed by the longitude coordinate. When Workbench reads your CSV file, it will split data on the comma into the required lat and long parts. An example of a single geocoordinate in a field would be:  field_coordinates\n\"49.16667,-123.93333\"  You can include multiple pairs of geocoordinates in one CSV field if you separate them with the subdelimiter character:  field_coordinates\n\"49.16667,-123.93333|49.25,-124.8\"  Note that:   Geocoordinate values in your CSV need to be wrapped in double quotation marks, unless the  delimiter  key in your configuration file is set to something other than a comma.  If you are entering geocoordinates into a spreadsheet, a leading  +  will make the spreadsheet application think you are entering a formula. You can work around this by escaping the  +  with a backslash ( \\ ), e.g.,  49.16667,-123.93333  should be  \\+49.16667,-123.93333 , and  49.16667,-123.93333|49.25,-124.8  should be  \\+49.16667,-123.93333|\\+49.25,-124.8 . Workbench will strip the leading  \\  before it populates the Drupal fields.",
            "title": "Geolocation fields"
        },
        {
            "location": "/fields/#commenting-out-csv-rows",
            "text": "You can comment out rows in your input CSV, Excel file, or Google Sheet by adding a hash mark ( # ) as the first character of the value in the first column. Workbench ignores these rows, both when it is run with and without  --check . Commenting out rows works in all tasks that use CSV data.  For example, the third row in the following CSV file is commented out:  file,id,title,field_model,field_description\nIMG_1410.tif,01,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\nIMG_2549.jp2,02,Manhatten Island,25,Weather was windy.\n#IMG_2940.JPG,03,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain.\nIMG_2958.JPG,04,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\nIMG_5083.JPG,05,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"  Since column order doesn't matter to Workbench, the same row is commented out in both the previous example and in this one:  id,file,title,field_model,field_description\n01,IMG_1410.tif,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\n02,IMG_2549.jp2,Manhatten Island,25,Weather was windy.\n# 03,IMG_2940.JPG,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain.\n04,IMG_2958.JPG,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\n05,IMG_5083.JPG,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"  Commenting works the same with in Excel and Google Sheets. Here is the CSV file used above in a Google Sheet:   You can also use commenting to include actual  comments  in your CSV/Google Sheet/Excel file:  id,file,title,field_model,field_description\n01,IMG_1410.tif,Small boats in Havana Harbour,25,Taken on vacation in Cuba.\n02,IMG_2549.jp2,Manhatten Island,25,Weather was windy.\n# Let's not load the following record right now.\n# 03,IMG_2940.JPG,Looking across Burrard Inlet,25,View from Deep Cove to Burnaby Mountain.\n04,IMG_2958.JPG,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\n05,IMG_5083.JPG,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"",
            "title": "Commenting out CSV rows"
        },
        {
            "location": "/csv_file_templates/",
            "text": "Note\n\n\nThis section describes creating CSV \nfile\n templates. For information on CSV \nfield\n templates, see the \"\nUsing CSV field templates\n\" section.\n\n\n\n\nYou can generate a template CSV file by running Workbench with the \n--get_csv_template\n argument:\n\n\n./workbench --config config.yml --get_csv_template\n\n\nWith this option, Workbench will fetch the field definitions for the content type named in your configuration's \ncontent_type\n option and save a CSV file with a column for each of the content type's fields. You can then populate this template with values you want to use in a \ncreate\n task. The template file is saved in the directory indicated in your configuration's \ninput_dir\n option, using the filename defined in \ninput_csv\n with \n.csv_file_template\n appended.\n\n\nThe template also contains three additional rows:\n\n\n\n\nhuman-readable label\n\n\nwhether or not the field is required in your CSV for \ncreate\n tasks\n\n\nsample data\n\n\nnumber of values allowed (either a specific maximum number or 'unlimited')\n\n\nthe name of the section in the documentation covering the field type\n\n\n\n\nHere is a screenshot of this CSV file template loaded into a spreadsheet application:\n\n\n\n\nNote that the first column, and all the rows other than the field machine names, should be deleted before you use a popluated version of this CSV file in a \ncreate\n task. Also, you can remove any columns you do not intend on populating:",
            "title": "CSV file templates"
        },
        {
            "location": "/field_templates/",
            "text": "Note\n\n\nThis section describes using CSV \nfield\n templates in your configuration file. For information on CSV \nfile\n templates, see the \"\nGenerating a template CSV file\n\" section.\n\n\n\n\nIn \ncreate\n and \nupdate\n tasks, you can configure field templates that are applied to each node as if the fields were present in your CSV file. The templates are configured in the \ncsv_field_templates\n option. An example looks like this:\n\n\ncsv_field_templates:\n - field_rights: \"The author of this work dedicates any and all copyright interest to the public domain.\"\n - field_member_of: 205\n - field_model: 25\n - field_tags: 231|257\n\n\n\n\nValues in CSV field templates are structured the same as field values in your CSV (e.g., in the example above, \nfield_tags\n is multivalued), and are validated against Drupal's configuration in the same way that values present in your CSV are validated.\n\n\nIf a column with the field name used in a template is present in the CSV file, Workbench ignores the template and uses the data in the CSV file.",
            "title": "CSV field templates"
        },
        {
            "location": "/paged_and_compound/",
            "text": "Islandora Workbench provides three ways to create paged and compound content:\n\n\n\n\nusing a specific subdirectory structure to define the relationship between the parent item and its children\n\n\nusing page-level metadata in the CSV to establish that relationship\n\n\nusing a secondary task.\n\n\n\n\nUsing subdirectories\n\n\nEnable this method by including \npaged_content_from_directories: true\n in your configuration file. Use this method when you are creating books, newspaper issues, or other paged content where your pages don't have their own metadata. This method groups page-level files into subdirectories that correspond to each parent, and does not require (or allow) page-level metadata in the CSV file. Each parent (book, newspaper issue, etc.) has a row on the CSV file, e.g.:\n\n\nid,title,field_model,field_display_hints\nbook1,How to Use Islandora Workbench like a Pro,28,2\nbook2,Using Islandora Workbench for Fun and Profit,28,2\n\n\n\n\nEach parent's pages are located in a subdirectory of the input directory that is named to match the value of the \nid\n field of the parent item they are pages of:\n\n\nsamplebook/\n\u251c\u2500\u2500 book1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u251c\u2500\u2500 book2\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 isbn-1843341778-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 using-islandora-workbench-page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u2514\u2500\u2500 metadata.csv\n\n\n\n\nThe page filenames have significance. The sequence of the page is determined by the last segment of each filename before the extension, and is separated from the rest of the filename by a dash (\n-\n), although you can use another character by setting the \npaged_content_sequence_seprator\n option in your configuration file. For example, using the filenames for \"book1\" above, the sequence of \"page-001.jpg\" is \"001\". Dashes (or whatever your separator character is) can exist elsewhere in filenames, since Workbench will always use the string after the \nlast\n dash as the sequence number; for example, the sequence of \"isbn-1843341778-001.jpg\" for \"book2\" is also \"001\". Workbench takes this sequence number, strips of any leader zeros, and uses it to populate the \nfield_weight\n in the page nodes, so \"001\" becomes a weight value of 1, \"002\" becomes a weight value of 2, and so on.\n\n\nTitles for pages are generated automatically using the pattern \nparent_title\n + \n, page\n + \nsequence_number\n, where \"parent title\" is inherited from the page's parent node and \"sequence number\" is the page's sequence. For example, if a page's parent has the title \"How to Write a Book\" and its sequence number is 450, its automatically generated title will be \"How to Write a Book, page 450\".\n\n\nFinally, even though only minimal metadata is assigned to pages using this method (i.e., the automatically generated title and Islandora model), you can add additional metadata to pages using a separate \nupdate\n task.\n\n\nImportant things to note when using this method:\n\n\n\n\nTo use this method of creating paged content, you must include the following in your configuration file:\n\n\npaged_content_sequence_seprator: true\n\n\npaged_content_page_model_tid\n set to your Islandora's term ID for pages\n\n\nThe Islandora model of the parent is not set automatically. You need to include a \nfield_model\n value for each item in your CSV file.\n\n\nYou should also include a \nfield_display_hints\n column in your CSV. This value is applied to the parent nodes and also the page nodes, unless the \npaged_content_page_display_hints\n setting is present in you configuration file. However, if you normally don't set the \"Display hints\" field in your objects but use a Context to determine how objects display, you should not include a \nfield_display_hints\n column in your CSV file.\n\n\nUnlike every other Islandora Workbench configuration, the metadata CSV should not contain a \nfile\n column.\n\n\nid\n can be defined as another field name using the \nid_field\n configuration option. If you do define a different ID field using the \nid_field\n option, creating the parent/paged item relationships will still work.\n\n\nThe Drupal content type for page nodes is inherited from the parent, unless you specify a different content type in the \npaged_content_page_content_type\n setting in your configuration file.\n\n\n\n\nWith page/child-level metadata\n\n\nUsing this method, the metadata CSV file contains a row for each parent and all child items. You should use this method when you are creating books, newspaper issues, or other paged or compound content where each page has its own metadata, or when you are creating compound objects of any Islandora model. The files for each page are named explicitly in the \nfile\n column rather than being in a subdirectory. To link the pages to the parent, Workbench establishes parent/child relationships between items with \nparent_id\n values (the pages/children) with that are the same as the \nid\n value of another item (the parent). For this to work, your CSV file must contain a \nparent_id\n field plus the standard Islandora fields \nfield_weight\n, \nfield_member_of\n, and \nfield_model\n (the role of these last three fields will be explained below). The \nid\n field is required in all CSV files used to create content, so in this case, your CSV needs both an \nid\n field and a \nparent_id\n field.\n\n\nThe following example illustrates how this works. Here is the raw CSV data:\n\n\nid,parent_id,field_weight,file,title,field_description,field_model,field_member_of\n001,,,,Postcard 1,The first postcard,28,197\n003,001,1,image456.jpg,Front of postcard 1,The first postcard's front,29,\n004,001,2,image389.jpg,Back of postcard 1,The first postcard's back,29,\n002,,,,Postcard 2,The second postcard,28,197\n006,002,1,image2828.jpg,Front of postcard 2,The second postcard's front,29,\n007,002,2,image777.jpg,Back of postcard 2,The second postcard's back,29,\n\n\n\n\nThe empty cells make this CSV difficult to read. Here is the same data in a spreadsheet:\n\n\n\n\nThe data contains rows for two postcards (rows with \nid\n values \"001\" and \"002\") plus a back and front for each (the remaining four rows). The \nparent_id\n value for items with \nid\n values \"003\" and \"004\" is the same as the \nid\n value for item \"001\", which will tell Workbench to make both of those items children of item \"001\"; the \nparent_id\n value for items with \nid\n values \"006\" and \"007\" is the same as the \nid\n value for item \"002\", which will tell Workbench to make both of those items children of the item \"002\". We can't populate  \nfield_member_of\n for the child pages in our CSV because we won't have node IDs for the parents until they are created as part of the same batch as the children.\n\n\nIn this example, the rows for our postcard objects have empty \nparent_id\n, \nfield_weight\n, and \nfile\n columns because our postcards are not children of other nodes and don't have their own media. (However, the records for our postcard objects do have a value in \nfield_member_of\n, which is the node ID of the \"Postcards\" collection that already/hypothetically exists.) Rows for the postcard front and back image objects have a value in their \nfield_weight\n field, and they have values in their \nfile\n column because we are creating objects that contain image media. Importantly, they have no value in their \nfield_member_of\n field because the node ID of the parent isn't known when you create your CSV; instead, Islandora Workbench assigns each child's \nfield_member_of\n dynamically, just after its parent node is created.\n\n\nSome important things to note:\n\n\n\n\nid\n can be defined as another field name using the \nid_field\n configuration option. If you do define a different ID field using the \nid_field\n option, creating the parent/child relationships will still work.\n\n\nThe values of the \nid\n and \nparent_id\n columns do not have to follow any sequential pattern. Islandora Workbench treats them as simple strings and matches them on that basis, without looking for sequential relationships of any kind between the two fields.\n\n\nThe CSV records for children items don't need to come \nimmediately\n after the record for their parent, but they do need to come after that record. This is because Workbench creates nodes in the order their records are in the CSV file (top to bottom). As long as the parent node has already been created when a child node is created, the parent/child relationship via the child's \nfield_member_of\n will be correct.\n\n\nCurrently, you must include values in the children's \nfield_weight\n column (except when creating a collection and its members at the same time; see below). It may be possible to automatically generate values for this field (see \nthis issue\n).\n\n\nCurrently, Islandora model values (e.g. \"Paged Content\", \"Page\") are not automatically assigned. You must include the correct \"Islandora Models\" taxonomy term IDs in your \nfield_model\n column for all parent and child records, as you would for any other Islandora objects you are creating. Like for \nfield_weight\n, it may be possible to automatically generate values for this field (see \nthis issue\n).\n\n\n\n\nUsing a secondary task\n\n\nYou can configure Islandora Workbench to execute two \"create\" tasks - a primary and a secondary - that will result in all of the objects described in both CSV files being ingested during the same Workbench job. By referencing the row IDs in the primary task's CSV file from the secondary task's CSV file, you can establish parent-child relationships. The benefit of using this method that each task has its own configuration file, allowing you to create children that have a different Drupal content type than their parents.\n\n\nThe primary task's CSV describes the parent objects, and the secondary task's CSV describes the children. The two are linked via references from children CSV's \nparent_id\n values to their parent's \nid\n values, much the same way as in the \"With page/child-level metadata\" method described above. The difference is that the references span CSV files. The parents and children each have their own CSV input file (and in fact, their own configuration file).\n\n\nIn the following example, the top CSV file (the primary) describes the parents, and the bottom CSV file (the secondary) describes the children:\n\n\n\n\nAs you can see, values in the \nparent_id\n column in the secondary CSV reference values in the \nid\n column in the primary CSV: \nparent_id\n 001 in the secondary CSV matches \nid\n 001 in the primary, \nparent_id\n 003 matches \nid\n 003 in the secondary, and so on.\n\n\nYou configure secondary tasks by adding the \nsecondary_tasks\n setting to your primary configuration file, like this:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n# This is the setting that links the two configuration files together.\nsecondary_tasks: ['children.yml']\ninput_csv: parents.csv\nnodes_only: true\n\n\n\n\nIn the \nsecondary_tasks\n setting, you name the configuration file of the secondary task. The secondary task's configuration file (in this example, named \"children.yml\") contains no indication that it's a secondary task:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: kids.csv\ncsv_field_templates:\n - field_model: http://purl.org/coar/resource_type/c_c513\n\n\n\n\nWhen you run Workbench, it executes the primary task first, then the secondary task. Workbench keeps track of pairs of \nid\n + node IDs created in the primary task, and during the execution of the secondary task, uses these to populate the \nfield_member_of\n values in the secondary task with the node IDs corresponding to the referenced primary \nid\n values.\n\n\nSome things to note about secondary tasks:\n\n\n\n\nOnly \"create\" tasks can be used as the primary and secondary tasks.\n\n\nWhen you have a secondary task configured, running \n--check\n will validate both tasks' configuration and input data.\n\n\nThe secondary CSV must contain \nparent_id\n, \nfield_weight\n, and \nfield_member_of\n columns. \nfield_member_of\n must be empty, since it is auto-populated by Workbench.\n\n\nAs already stated, each task has its own configuration file, so you can specify a \ncontent_type\n value in your secondary configuration file that differs from the \ncontent_type\n of the primary task.\n\n\nYou can include more than one secondary task in your configuration. For example, \nsecondary_tasks: ['first.yml', 'second.yml']\n will execute the primary task, then the \"first.yml\" secondary task, then the \"second.yml\" secondary task in that order.\n\n\nnodes_only: true\n in the example primary configuration file and the \ncsv_field_templates\n setting in the secondary are not relevent to the primary/secondary task functionality; they're included to illustrate that the two configuration files can differ. \n\n\n\n\nCreating collections and members together\n\n\nUsing a variation of the \"With page/child-level metadata\" approach, you can create a collection node and assign members to it at the same time (i.e., in a single Workbench job). Here is a simple example CSV:\n\n\nid,parent_id,file,title,field_model,field_member_of,field_weight\n1,,,A collection of animal photos,24,,\n2,1,cat.jpg,Picture of a cat,25,,\n3,1,dog.jpg,Picture of a dog,25,,\n3,1,horse.jpg,Picture of a horse,25,,\n\n\n\n\nThe use of the \nparent_id\n and \nfield_member_of\n fields is the same here as when creating paged or compound children. However, unlike with paged or compound objects, in this case we leave the values in \nfield_weight\n empty, since Islandora collections don't use \nfield_weight\n to determine order of members. Collection Views are sorted using other fields.",
            "title": "Creating paged, compound, and collection content"
        },
        {
            "location": "/paged_and_compound/#using-subdirectories",
            "text": "Enable this method by including  paged_content_from_directories: true  in your configuration file. Use this method when you are creating books, newspaper issues, or other paged content where your pages don't have their own metadata. This method groups page-level files into subdirectories that correspond to each parent, and does not require (or allow) page-level metadata in the CSV file. Each parent (book, newspaper issue, etc.) has a row on the CSV file, e.g.:  id,title,field_model,field_display_hints\nbook1,How to Use Islandora Workbench like a Pro,28,2\nbook2,Using Islandora Workbench for Fun and Profit,28,2  Each parent's pages are located in a subdirectory of the input directory that is named to match the value of the  id  field of the parent item they are pages of:  samplebook/\n\u251c\u2500\u2500 book1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u251c\u2500\u2500 book2\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 isbn-1843341778-001.jpg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 using-islandora-workbench-page-002.jpg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page-003.jpg\n\u2514\u2500\u2500 metadata.csv  The page filenames have significance. The sequence of the page is determined by the last segment of each filename before the extension, and is separated from the rest of the filename by a dash ( - ), although you can use another character by setting the  paged_content_sequence_seprator  option in your configuration file. For example, using the filenames for \"book1\" above, the sequence of \"page-001.jpg\" is \"001\". Dashes (or whatever your separator character is) can exist elsewhere in filenames, since Workbench will always use the string after the  last  dash as the sequence number; for example, the sequence of \"isbn-1843341778-001.jpg\" for \"book2\" is also \"001\". Workbench takes this sequence number, strips of any leader zeros, and uses it to populate the  field_weight  in the page nodes, so \"001\" becomes a weight value of 1, \"002\" becomes a weight value of 2, and so on.  Titles for pages are generated automatically using the pattern  parent_title  +  , page  +  sequence_number , where \"parent title\" is inherited from the page's parent node and \"sequence number\" is the page's sequence. For example, if a page's parent has the title \"How to Write a Book\" and its sequence number is 450, its automatically generated title will be \"How to Write a Book, page 450\".  Finally, even though only minimal metadata is assigned to pages using this method (i.e., the automatically generated title and Islandora model), you can add additional metadata to pages using a separate  update  task.  Important things to note when using this method:   To use this method of creating paged content, you must include the following in your configuration file:  paged_content_sequence_seprator: true  paged_content_page_model_tid  set to your Islandora's term ID for pages  The Islandora model of the parent is not set automatically. You need to include a  field_model  value for each item in your CSV file.  You should also include a  field_display_hints  column in your CSV. This value is applied to the parent nodes and also the page nodes, unless the  paged_content_page_display_hints  setting is present in you configuration file. However, if you normally don't set the \"Display hints\" field in your objects but use a Context to determine how objects display, you should not include a  field_display_hints  column in your CSV file.  Unlike every other Islandora Workbench configuration, the metadata CSV should not contain a  file  column.  id  can be defined as another field name using the  id_field  configuration option. If you do define a different ID field using the  id_field  option, creating the parent/paged item relationships will still work.  The Drupal content type for page nodes is inherited from the parent, unless you specify a different content type in the  paged_content_page_content_type  setting in your configuration file.",
            "title": "Using subdirectories"
        },
        {
            "location": "/paged_and_compound/#with-pagechild-level-metadata",
            "text": "Using this method, the metadata CSV file contains a row for each parent and all child items. You should use this method when you are creating books, newspaper issues, or other paged or compound content where each page has its own metadata, or when you are creating compound objects of any Islandora model. The files for each page are named explicitly in the  file  column rather than being in a subdirectory. To link the pages to the parent, Workbench establishes parent/child relationships between items with  parent_id  values (the pages/children) with that are the same as the  id  value of another item (the parent). For this to work, your CSV file must contain a  parent_id  field plus the standard Islandora fields  field_weight ,  field_member_of , and  field_model  (the role of these last three fields will be explained below). The  id  field is required in all CSV files used to create content, so in this case, your CSV needs both an  id  field and a  parent_id  field.  The following example illustrates how this works. Here is the raw CSV data:  id,parent_id,field_weight,file,title,field_description,field_model,field_member_of\n001,,,,Postcard 1,The first postcard,28,197\n003,001,1,image456.jpg,Front of postcard 1,The first postcard's front,29,\n004,001,2,image389.jpg,Back of postcard 1,The first postcard's back,29,\n002,,,,Postcard 2,The second postcard,28,197\n006,002,1,image2828.jpg,Front of postcard 2,The second postcard's front,29,\n007,002,2,image777.jpg,Back of postcard 2,The second postcard's back,29,  The empty cells make this CSV difficult to read. Here is the same data in a spreadsheet:   The data contains rows for two postcards (rows with  id  values \"001\" and \"002\") plus a back and front for each (the remaining four rows). The  parent_id  value for items with  id  values \"003\" and \"004\" is the same as the  id  value for item \"001\", which will tell Workbench to make both of those items children of item \"001\"; the  parent_id  value for items with  id  values \"006\" and \"007\" is the same as the  id  value for item \"002\", which will tell Workbench to make both of those items children of the item \"002\". We can't populate   field_member_of  for the child pages in our CSV because we won't have node IDs for the parents until they are created as part of the same batch as the children.  In this example, the rows for our postcard objects have empty  parent_id ,  field_weight , and  file  columns because our postcards are not children of other nodes and don't have their own media. (However, the records for our postcard objects do have a value in  field_member_of , which is the node ID of the \"Postcards\" collection that already/hypothetically exists.) Rows for the postcard front and back image objects have a value in their  field_weight  field, and they have values in their  file  column because we are creating objects that contain image media. Importantly, they have no value in their  field_member_of  field because the node ID of the parent isn't known when you create your CSV; instead, Islandora Workbench assigns each child's  field_member_of  dynamically, just after its parent node is created.  Some important things to note:   id  can be defined as another field name using the  id_field  configuration option. If you do define a different ID field using the  id_field  option, creating the parent/child relationships will still work.  The values of the  id  and  parent_id  columns do not have to follow any sequential pattern. Islandora Workbench treats them as simple strings and matches them on that basis, without looking for sequential relationships of any kind between the two fields.  The CSV records for children items don't need to come  immediately  after the record for their parent, but they do need to come after that record. This is because Workbench creates nodes in the order their records are in the CSV file (top to bottom). As long as the parent node has already been created when a child node is created, the parent/child relationship via the child's  field_member_of  will be correct.  Currently, you must include values in the children's  field_weight  column (except when creating a collection and its members at the same time; see below). It may be possible to automatically generate values for this field (see  this issue ).  Currently, Islandora model values (e.g. \"Paged Content\", \"Page\") are not automatically assigned. You must include the correct \"Islandora Models\" taxonomy term IDs in your  field_model  column for all parent and child records, as you would for any other Islandora objects you are creating. Like for  field_weight , it may be possible to automatically generate values for this field (see  this issue ).",
            "title": "With page/child-level metadata"
        },
        {
            "location": "/paged_and_compound/#using-a-secondary-task",
            "text": "You can configure Islandora Workbench to execute two \"create\" tasks - a primary and a secondary - that will result in all of the objects described in both CSV files being ingested during the same Workbench job. By referencing the row IDs in the primary task's CSV file from the secondary task's CSV file, you can establish parent-child relationships. The benefit of using this method that each task has its own configuration file, allowing you to create children that have a different Drupal content type than their parents.  The primary task's CSV describes the parent objects, and the secondary task's CSV describes the children. The two are linked via references from children CSV's  parent_id  values to their parent's  id  values, much the same way as in the \"With page/child-level metadata\" method described above. The difference is that the references span CSV files. The parents and children each have their own CSV input file (and in fact, their own configuration file).  In the following example, the top CSV file (the primary) describes the parents, and the bottom CSV file (the secondary) describes the children:   As you can see, values in the  parent_id  column in the secondary CSV reference values in the  id  column in the primary CSV:  parent_id  001 in the secondary CSV matches  id  001 in the primary,  parent_id  003 matches  id  003 in the secondary, and so on.  You configure secondary tasks by adding the  secondary_tasks  setting to your primary configuration file, like this:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\n# This is the setting that links the two configuration files together.\nsecondary_tasks: ['children.yml']\ninput_csv: parents.csv\nnodes_only: true  In the  secondary_tasks  setting, you name the configuration file of the secondary task. The secondary task's configuration file (in this example, named \"children.yml\") contains no indication that it's a secondary task:  task: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: kids.csv\ncsv_field_templates:\n - field_model: http://purl.org/coar/resource_type/c_c513  When you run Workbench, it executes the primary task first, then the secondary task. Workbench keeps track of pairs of  id  + node IDs created in the primary task, and during the execution of the secondary task, uses these to populate the  field_member_of  values in the secondary task with the node IDs corresponding to the referenced primary  id  values.  Some things to note about secondary tasks:   Only \"create\" tasks can be used as the primary and secondary tasks.  When you have a secondary task configured, running  --check  will validate both tasks' configuration and input data.  The secondary CSV must contain  parent_id ,  field_weight , and  field_member_of  columns.  field_member_of  must be empty, since it is auto-populated by Workbench.  As already stated, each task has its own configuration file, so you can specify a  content_type  value in your secondary configuration file that differs from the  content_type  of the primary task.  You can include more than one secondary task in your configuration. For example,  secondary_tasks: ['first.yml', 'second.yml']  will execute the primary task, then the \"first.yml\" secondary task, then the \"second.yml\" secondary task in that order.  nodes_only: true  in the example primary configuration file and the  csv_field_templates  setting in the secondary are not relevent to the primary/secondary task functionality; they're included to illustrate that the two configuration files can differ.",
            "title": "Using a secondary task"
        },
        {
            "location": "/paged_and_compound/#creating-collections-and-members-together",
            "text": "Using a variation of the \"With page/child-level metadata\" approach, you can create a collection node and assign members to it at the same time (i.e., in a single Workbench job). Here is a simple example CSV:  id,parent_id,file,title,field_model,field_member_of,field_weight\n1,,,A collection of animal photos,24,,\n2,1,cat.jpg,Picture of a cat,25,,\n3,1,dog.jpg,Picture of a dog,25,,\n3,1,horse.jpg,Picture of a horse,25,,  The use of the  parent_id  and  field_member_of  fields is the same here as when creating paged or compound children. However, unlike with paged or compound objects, in this case we leave the values in  field_weight  empty, since Islandora collections don't use  field_weight  to determine order of members. Collection Views are sorted using other fields.",
            "title": "Creating collections and members together"
        },
        {
            "location": "/nodes_only/",
            "text": "During a \ncreate\n task, if you want to create nodes but not any accompanying media, for example if you are testing your metadata values or creating collection nodes, you can include the \nnodes_only: true\n option in your configuration file:\n\n\ntask: create\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\nnodes_only: true\n\n\n\n\nIf this is present, Islandora Workbench will only create nodes and will skip all media creation. During \n--check\n, it will ignore anything in your CSV's \nfiles\n field (in fact, your CSV doesn't even need a \nfile\n column). If \nnodes_only\n is \ntrue\n, your configuration file for the \ncreate\n task doesn't need a \nmedia_use_tid\n, \ndrupal_filesystem\n, or \nmedia_type\n/\nmedia_types\n option.",
            "title": "Creating nodes without media"
        },
        {
            "location": "/creating_nodes_from_files/",
            "text": "If you want to ingest some files without a metadata CSV you can do so using the \ncreate_from_files\n task. A common application of this ability is in automated workflows where Islandora objects are created from files saved to a \nwatch folder\n, and metadata is added later.\n\n\nNodes created using this task have only the following properties/fields populated:\n\n\n\n\nContent type: this is defined in the configuration file, using the \ncontent_type\n setting.\n\n\nTitle: this is derived from the filename minus the extension. Spaces are allowed in the filenames.\n\n\nPublished: published by default, or overridden in the configuration file using the \npublished\n setting.\n\n\nModel: defined in the configuration file using either the \nmodel\n or \nmodels\n setting.\n\n\n\n\nThe media attached to the nodes is the file, with its type (image, document, audio, video, file) assigned by the \nmedia_types\n configuration setting and its Media Use tag defined in the \nmedia_use_tid\n setting.\n\n\nThe configuration options for the \ncreate_from_files\n task are the same as the options used in the \ncreate\n task (with one exception: \ninput_csv\n is not required). The only option specific to this task is \nmodels\n, which is a mapping from terms IDs (or term URIs) in the \"Islandora Models\" vocabulary to file extensions.\n\n\nNote that either the  \nmodels\n or \nmodel\n configuration option is required in the \ncreate_from_files\n task. Use \nmodels\n when your nodes will have different Islandora Model values. Here is a sample configuration file for this task:\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\noutput_csv: /tmp/output.csv\nmodels:\n - 23: ['zip', 'tar', '']\n - 27: ['pdf', 'doc', 'docx', 'ppt', 'pptx']\n - 25: ['tif', 'tiff', 'jp2', 'png', 'gif', 'jpg', 'jpeg']\n - 22: ['mp3', 'wav', 'aac']\n - 26: ['mp4']\n\n\n\n\nUsing \nmodel\n is conventient when all of the objects you are creating are the same Islandora Model:\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\noutput_csv: /tmp/output.csv\nmodel: 25\n\n\n\n\nYou can also use the URIs assigned to terms in the Islandora Models vocabulary, for example:\n\n\ntask: create_from_files\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\noutput_csv: /tmp/output.csv\nmodels:\n - 'http://purl.org/coar/resource_type/c_1843': ['zip', 'tar', '']\n - 'https://schema.org/DigitalDocument': ['pdf', 'doc', 'docx', 'ppt', 'pptx']\n - 'http://purl.org/coar/resource_type/c_c513': ['tif', 'tiff', 'jp2', 'png', 'gif', 'jpg', 'jpeg']\n - 'http://purl.org/coar/resource_type/c_18cc': ['mp3', 'wav', 'aac']\n - 'http://purl.org/coar/resource_type/c_12ce': ['mp4']\n\n\n\n\n\n\nNote\n\n\nIn the workflow described at the beginning of this section, you might want to include the \noutput_csv\n option in the configuration file, since the resulting CSV file can be populated with metadata later and used in an \nupdate\n task to add it to the stub nodes.",
            "title": "Creating nodes from files"
        },
        {
            "location": "/aliases/",
            "text": "In \ncreate\n tasks, you can assign URL aliases to nodes by adding the \nurl_alias\n field to you CSV file, like this:\n\n\nfile,title,field_description,url_alias\nIMG_1410.tif,Small boats in Havana Harbour,Some are blue.,/havana_boats\nIMG_2549.jp2,Manhatten Island,Manhatten is part of New York City.,/manhatten\n\n\n\n\nYou can also assign URL aliases in \nupdate\n tasks:\n\n\nnode_id,url_alias\n345,/this_is_a_cool_item\n367,/soisthisone\n\n\n\n\nNo other configuration is required. URL aliases must start with a forward slash (\n/\n). When you run Workbench with its \n--check\n option, it will check whether each alias starts with this character, and whether the alias already exists.\n\n\n\n\nNote\n\n\nThis method of assigning URL aliases is useful if you have pre-existing aliases. If you want to assign URL aliases that are derived from node-specific field data (like title, date, taxonomy terms, etc.), you can use the Drupal contrib module \nPathauto\n instead.",
            "title": "Assigning URL aliases"
        },
        {
            "location": "/alt_text/",
            "text": "Islandora image media require a value in their \"Alternative text\" field. This text is used as the \nalt\n text in the HTML markup rendering the image.\n\n\nYou can assign alt text values by adding the \nimage_alt_text\n field to you CSV file, like this:\n\n\nfile,title,field_model,image_alt_text\nIMG_2958.JPG,04,Amsterdam waterfront,25,Amsterdam waterfront on an overcast day.\nIMG_5083.JPG,05,Alcatraz Island,25,\"Taken from Fisherman's Wharf, San Francisco.\"\n\n\n\n\nThe value will only be applied to image media. If you do not include this field in your CSV file, or the field is present but empty, Workbench will use the node's title as the alt text. Note that Workbench strips out all HTML markup within the alt text. Also note that this feature is only available in the \ncreate\n task (but see \nthis issue\n).",
            "title": "Adding alt text to images"
        },
        {
            "location": "/rolling_back/",
            "text": "In the \ncreate\n and \ncreate_from_files\n tasks, Workbench generates a \nrollback.yml\n configuration file and a \nrollback.csv\n file in the format described in \"Deleting nodes\", below. These files allow you to easily roll back (i.e., delete) all the nodes and accompanying media you just created. Specifically, this configuration file defines a \ndelete\n task. See the \"\nDeleting nodes\n\" section for more information.\n\n\nTo roll back all the nodes and media you just created, run \n./workbench --config rollback.yml\n.\n\n\nNote that Workbench overwrites the rollback configuration and CSV files each time it runs, so these files only apply to the most recent \ncreate\n and \ncreate_from_files\n runs.",
            "title": "Rolling back nodes and media"
        },
        {
            "location": "/media_types/",
            "text": "Note\n\n\nDrupal's use of Media types (image, video, document, etc.) is distinct from Islandora's use of \"model\", which identifies an intellectual entity as an image, video, collection, compound object, newspaper, etc.\n\n\n\n\nBy default Workbench defines the following file extention to media type mapping:\n\n\n\n\n\n\n\n\nFile extensions\n\n\nMedia type\n\n\n\n\n\n\n\n\n\n\npng, gif, jpg, jpeg\n\n\nimage\n\n\n\n\n\n\npdf, doc, docx, ppt, pptx\n\n\ndocument\n\n\n\n\n\n\ntif, tiff, jp2, zip, tar\n\n\nfile\n\n\n\n\n\n\nmp3, wav, aac\n\n\naudio\n\n\n\n\n\n\nmp4\n\n\nvideo\n\n\n\n\n\n\ntxt\n\n\nextracted_text\n\n\n\n\n\n\n\n\nIf a file's extension is not defined in either this default mapping, the media is assigned the \"file\" type.\n\n\nIf you need to override this default mappping, you can do so in two ways:\n\n\n\n\nFor all media being created, via the \nmedia_type\n (singluar) configuration option. If this is present (for example \nmedia_type: document\n), all media created by Workbench will be assigned that media type. Use this option if all of the files in your batch are to be assigned the same media type, but their extensions are not defined in the default mapping.\n\n\n\n\nOn a per file extension basis, via a mapping in the \nmedia_types\n (plural) option in your configuration file like this one:\n\n\nmedia_types:\n - video: ['mp4', 'ogg']\n\n\nUse this option if all of the files in your batch are not to be assigned the same media type, and their extensions are not defined in the default mapping (or are in addition to the extensions in the default mapping, as in this example).\n\n\n\n\n\n\nNote that:\n\n\n\n\nIf a file's extension is not present in the default mapping or in the \nmedia_types\n custom mapping, the media is assigned the \"file\" type.\n\n\nIf you use the \nmedia_types\n configuration option, your mapping replaces all of Workbench's default mappings. However, you may include multiple entries, e.g.:\n   ```\n   media_types:\n\n\nvideo: ['mp4', 'ogg']\n\n\nimage: ['png', 'gif', 'jpg', 'jpeg']\n   ```\n\n\n\n\n\n\nIf both \nmedia_type\n and \nmedia_types\n are included in the config file, the mapping is ignored and the media type assigned in \nmedia_type\n is used.",
            "title": "Setting media types"
        },
        {
            "location": "/updating_nodes/",
            "text": "You can update existing nodes by providing a CSV file with a \nnode_id\n column plus field data you want to update. Updating preserves existing values in the nodes' fields and adds CSV data to them, it don't replace the values (but see \nthis issue\n). The other column headings in the CSV file must match machine names of fields that exist in the target Islandora content type. Currently, text fields, ETDF fields, taxonomy fields, linked node fields (e.g. \"Member of\" for collection nodes), and typed relation fields can be updated following the same conventions used when creating nodes as described in the \"\nFields\n\" documentation.\n\n\nFor example, using the fields defined by the Islandora Defaults module for the \"Repository Item\" content type, your CSV file could look like this:\n\n\nnode_id,field_description,field_rights,field_access_terms,field_member_of\n100,This is my new title,I have changed my mind. This item is yours to keep.,27,45\n\n\n\n\nMultivalued fields are also supported in the update task. See details in the \"Multivalued fields\" section above.\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'update'):\n\n\ntask: update\nvalidate_title_length: false\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: update.csv\n\n\n\n\nNote that you should include \nvalidate_title_length: false\n in your update configuration file, unless you are updating node titles.",
            "title": "Updating nodes"
        },
        {
            "location": "/deleting_nodes/",
            "text": "You can delete nodes by providing a CSV file that contains a single column, \nnode_id\n, like this:\n\n\nnode_id\n95\n96\n200\n\n\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'delete'):\n\n\ntask: delete\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: delete.csv\n\n\n\n\nNote that when you delete nodes using this method, all media associated with the nodes are also deleted, unless the \ndelete_media_with_nodes\n configuration option is set to \nfalse\n (it defaults to \ntrue\n). Typical output produced by a \ndelete\n task looks like this:\n\n\nNode http://localhost:8000/node/89 deleted.\n+ Media http://localhost:8000/media/329 deleted.\n+ Media http://localhost:8000/media/331 deleted.\n+ Media http://localhost:8000/media/335 deleted.\n\n\n\n\nNote that taxonomy terms created with new nodes are not removed when you delete the nodes.",
            "title": "Deleting nodes"
        },
        {
            "location": "/adding_media/",
            "text": "You can add media to existing nodes by providing a CSV file with a \nnode_id\n column plus a \nfile\n field that contains the name of the file you want to add. For example, your CSV file could look like this:\n\n\nnode_id,file\n100,test.txt\n\n\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'add_media'):\n\n\ntask: add_media\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: add_media.csv",
            "title": "Adding media to nodes"
        },
        {
            "location": "/deleting_media/",
            "text": "You can delete media and their associate files by providing a CSV file with a \nmedia_id\n column that contains the Drupal IDs of media you want to delete. For example, your CSV file could look like this:\n\n\nmedia_id\n100\n103\n104\n\n\n\n\nThe config file for update operations looks like this (note the \ntask\n option is 'delete_media'):\n\n\ntask: delete_media\nhost: \"http://localhost:8000\"\nusername: admin\npassword: islandora\ninput_csv: delete_media.csv",
            "title": "Deleting media"
        },
        {
            "location": "/output_csv/",
            "text": "In some instances, you may want to create stub nodes that only have a small subset of fields, and then populate the remaining fields later. To faciliate this type of workflow, Workbench provides an option to generate a simple CSV file containig a record for every newly created node. This file can then be used later in \nupdate\n tasks to add additional metadata or in \nadd_media\n tasks to add media.\n\n\nYou tell Workbench to generate this file by including the optional \noutput_csv\n setting in your configuration file. If this setting is present, Workbench will write a CSV file at the specified location containing one record per node created. This CSV file contains the following fields:\n\n\n\n\nid\n (or whatever column is specified in your \nid_field\n setting): the value in your input CSV file's ID field\n\n\nnode_id\n: the node ID for the newly created node\n\n\nuuid\n: the new node's UUID\n\n\nstatus\n: true if the node is published, False if it is unpublished\n\n\ntitle\n: the node's title\n\n\n\n\nThe file will also contain empty columns corresponding to all of the fields in the target content type. An example, generated from a 2-record input CSV file, looks like this (only left-most part of the spreadsheet shown):\n\n\n\n\nThis CSV file is suitable as a template for subsequent \nupdate\n tasks, since it already contains the \nnode_id\ns for all the stub nodes plus column headers for all of the fields in those nodes. You can remove from the template any colums you do not want to include in your \nupdate\n task. You can also use the node IDs in this file as the basis for later \nadd_media\n tasks; all you will need to do is delete the other columns and add a \nfile\n column containing the new nodes' corresponding filenames.",
            "title": "Generating an output CSV file"
        },
        {
            "location": "/sample_data/",
            "text": "Islandora Workbench comes with some sample data. Running \n./workbench --config create.yml --check\n should result in the following output:\n\n\nOK, connection to Drupal at http://localhost:8000 verified.\nOK, configuration file has all required values (did not check for optional values).\nOK, CSV file input_data/metadata.csv found.\nOK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\nOK, CSV column headers match Drupal field names.\nOK, required Drupal fields are present in the CSV file.\nOK, term IDs/names in CSV file exist in their respective taxonomies.\nOK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\nOK, files named in the CSV \"file\" column are all present.\nConfiguration and input data appear to be valid.\n\n\n\n\nThen running workbench Workbench without \n--check\n should result in something like:\n\n\nNode for 'Small boats in Havana Harbour' created at http://localhost:8000/node/52.\n+File media for IMG_1410.tif created.\nNode for 'Manhatten Island' created at http://localhost:8000/node/53.\n+File media for IMG_2549.jp2 created.\nNode for 'Looking across Burrard Inlet' created at http://localhost:8000/node/54.\n+Image media for IMG_2940.JPG created.\nNode for 'Amsterdam waterfront' created at http://localhost:8000/node/55.\n+Image media for IMG_2958.JPG created.\nNode for 'Alcatraz Island' created at http://localhost:8000/node/56.\n+Image media for IMG_5083.JPG created.",
            "title": "Creating nodes from the sample data"
        },
        {
            "location": "/exporting_islandora_7_content/",
            "text": "Overview\n\n\nIslandora Workbench's main purpose is to load batches of content into an Islandora 8 repository. However, loading content can also be the last step in migrating from Islandora 7 to Islandora 8. As noted in the \"\nWorkflows\n\" documentation, Workbench can be used in the \"load\" phase of a typical \nextract, transform, load\n (ETL) process.\n\n\nWorkbench comes with a standalone script, \nget_islandora_7_content.py\n, that can be used to extract (a.k.a. \"export\") metadata and OBJ datastreams from an Islandora 7 instance. This data can form the basis for Workbench input data.\n\n\nTo run the script, change into the Workbench \"scripts\" directory and run:\n\n\npython3 get_islandora_7_content.py\n\n\nUnlike \nworkbench\n, this script doesn't use a YAML configuration file. To configure the script, you need to open it in a text editor and change the variables in the \"Configuration variables\" section of the script, as appliable.\n\n\nConfiguring which Solr fields to include in the CSV\n\n\nIslandora 7's Solr schema contains a lot of fields, mirroring the richness of MODS (or other XML-based metadata) and the Fedora 3.x RELS-EXT properties. By default, this script fetches all the fields in the Islandora 7's Solr's index, which will invariably be many more fields that you will normally want in the output CSV.\n\n\nThe script takes the following approach to providing control over what fields end up in the CSV data it generates:\n\n\n\n\nIt fetches a list of all fieldnames used in the Solr index.\n\n\nIt then matches each fieldname against the regular expression pattern defined in the script's \nfield_pattern\n variable, and if the match is successful, includes the fieldname in the CSV. For example, \nfield_pattern = 'mods_.*(_s|_ms)$'\n will match every Solr field that starts with \"mods_\" and ends with either \"_s\" or \"_ms\".\n\n\nNext, it matches each remaining filename against the regular expression patterns defined in the script's \nfield_pattern_do_not_want\n variable, and if the match is successful, \nremoves\n the fieldname from the CSV. For example, \nfield_pattern_do_not_want = '(marcrelator|isSequenceNumberOf)'\n will remove all fieldnames that contain either the string \"marcrelator\" or \"isSequenceNumberOf\". Note that the regular expression used in this configuration variable is not a negative pattern; in other words, if a fieldname matches this pattern, it is excluded from the field list.\n\n\nFinally, it adds to the start of the remaining list of fieldnames every Solr fieldname defined in the \nstandard_fields\n configuration variable. This configuration variable provides a mechanism to ensure than any fields that are not included in step 2 are present in the generated CSV file.\n\n\n\n\n\n\nWarning\n\n\nYou will always want at least the Solr fields \"PID\", \"RELS_EXT_isMemberOfCollection_uri_ms\", \"RELS_EXT_hasModel_uri_s\", \"RELS_EXT_isMemberOfCollection_uri_ms\", \"RELS_EXT_isConstituentOf_uri_ms\", and \"RELS_EXT_isPageOf_uri_ms\" in your \nstandard_fields\n configuration variable since these fields contain information about objects' relationships to each other.\n\n\n\n\nEven with a well-configured set of pattern variables, the column headers are ugly, and there are a lot of them. Here is a sample from a minimal Islandora 7.x:\n\n\nfile,PID,RELS_EXT_hasModel_uri_s,RELS_EXT_isMemberOfCollection_uri_ms,RELS_EXT_isConstituentOf_uri_ms,RELS_EXT_isPageOf_uri_ms,mods_recordInfo_recordOrigin_ms,mods_name_personal_author_ms,mods_abstract_s,mods_name_aut_role_roleTerm_code_s,mods_name_personal_author_s,mods_typeOfResource_s,mods_subject_geographic_ms,mods_identifier_local_ms,mods_genre_ms,mods_name_photographer_role_roleTerm_code_s,mods_physicalDescription_form_all_ms,mods_physicalDescription_extent_ms,mods_subject_topic_ms,mods_name_namePart_s,mods_physicalDescription_form_authority_marcform_ms,mods_name_pht_s,mods_identifier_uuid_ms,mods_language_languageTerm_code_s,mods_physicalDescription_form_s,mods_accessCondition_use_and_reproduction_s,mods_name_personal_role_roleTerm_text_s,mods_name__role_roleTerm_code_ms,mods_originInfo_encoding_w3cdtf_keyDate_yes_dateIssued_ms,mods_name_aut_s,mods_originInfo_encoding_iso8601_dateIssued_s,mods_originInfo_dateIssued_ms,mods_name_photographer_namePart_s,mods_name_pht_role_roleTerm_text_ms,mods_identifier_all_ms,mods_name_namePart_ms,mods_subject_geographic_s,mods_originInfo_publisher_ms,mods_subject_descendants_all_ms,mods_titleInfo_title_all_ms,mods_name_photographer_role_roleTerm_text_ms,mods_name_role_roleTerm_text_s,mods_titleInfo_title_ms,mods_name_photographer_s,mods_originInfo_place_placeTerm_text_s,mods_name_role_roleTerm_code_ms,mods_name_pht_role_roleTerm_code_s,mods_name_pht_namePart_s,mods_name_pht_namePart_ms,mods_name_role_roleTerm_code_s,mods_genre_all_ms,mods_physicalDescription_form_authority_marcform_s,mods_name_pht_role_roleTerm_code_ms,mods_extension_display_date_ms,mods_name_photographer_namePart_ms,mods_genre_authority_bgtchm_ms,mods_name_personal_role_roleTerm_text_ms,mods_name_pht_ms,mods_name_photographer_role_roleTerm_text_s,mods_language_languageTerm_code_ms,mods_originInfo_place_placeTerm_text_ms,mods_titleInfo_title_s,mods_identifier_uuid_s,mods_language_languageTerm_code_authority_iso639-2b_s,mods_genre_s,mods_name_aut_role_roleTerm_code_ms,mods_typeOfResource_ms,mods_originInfo_encoding_iso8601_dateIssued_ms,mods_name_personal_author_role_roleTerm_text_ms,mods_abstract_ms,mods_language_languageTerm_text_s,mods_genre_authority_bgtchm_s,mods_language_languageTerm_s,mods_language_languageTerm_ms,mods_subject_topic_s,mods_name_photographer_ms,mods_name_pht_role_roleTerm_text_s,mods_recordInfo_recordOrigin_s,mods_name_aut_ms,mods_originInfo_publisher_s,mods_identifier_local_s,mods_language_languageTerm_text_ms,mods_physicalDescription_extent_s,mods_language_languageTerm_code_authority_iso639-2b_ms,mods_name__role_roleTerm_code_s,mods_originInfo_encoding_w3cdtf_keyDate_yes_dateIssued_s,mods_name_photographer_role_roleTerm_code_ms,mods_name_role_roleTerm_text_ms,mods_name_personal_author_role_roleTerm_text_s,mods_accessCondition_use_and_reproduction_ms,mods_physicalDescription_form_ms,sequence\n\n\n\n\nUsing the CSV as input for Workbench\n\n\nThe CSV file generated by this script will almost certainly contain many more columns than you will want to ingest into Islandora 8. You will probably want to delete columns you don't need, combine the contents of several columns into one, and edit the contents of others.\n\n\nAs we can see from the example above, the column headings in the CSV are Solr fieldnames (\nRELS_EXT_hasModel_uri_s\n, \nmods_titleInfo_title_ms\n, etc.). You will need to replace those column headers with the equivalent fields \nas defined in your Drupal 8 content type\n. In addition, the metadata stored in Islandora 7's Solr index does not in many cases have the structure Workbench requires, so the data in the CSV file will need to be edited before it can be used by Workbench to create nodes. The content of Islandora 7 Solr fields is derived from MODS (or other) XML elements, and, with the exception of text-type fields, will not necessarily map cleanly to Drupal fields' data types. In other words, to use the CSV data generted by \nget_islandora_7_content.py\n, you will need to do some work to prepare it (or \"transform\" it, to use ETL language) to use it as input for Workbench.\n\n\nHowever, the script adds three columns to the CSV file that do not use Solr fieldnames and whose contents you should \nnot\n edit but that you may need to rename: \nfile\n, \nPID\n, and \nsequence\n:\n\n\nDo not edit name                                        Rename 'sequence' column (e.g., \nor contents of                                          to 'field_weight') but do not\n'file' column.                                          edit its contents.\n |                                / Every other column           |\n |    / Rename 'PID' to the       | will need to be              |           \n |    | value of your 'id_field'  | deleted, renamed,            |\n |    | setting but do not edit   | or its content               |               \n |    | column contents.          | edited.                      |\n v    v                           v                              v\n---------------------------------------------------------------------\nfile,PID,RELS_EXT_hasModel_uri_s,[...],mods_typeOfResource_s,sequence\n\n\n\n\nFirst, the required Workbench column \"file\" is added to the beginning of each CSV row, and is populated with the filename of the OBJ datastream. This filename is based on the object's PID, with the the \n:\n replaced with an underscore, and has an extenstion determined by the OBJ datastream's MIME type.\n\n\nSecond, \"PID\" is the Islandora 7.x PID of each object in the CSV file. This column header can be changed to \"id\" or whatever you have defined in your Workbench confiugration file's \nid_field\n setting. Alternatively, you can set the value of \nid_field\n to \nPID\n and not rename that CSV column.\n\n\nThird, a \"sequence\" column is added at the end of each CSV row. This is where the \nget_islandora_7_content.py\n script stores the sequence number of each child object/page in relation to its parent . If an Islandora 7.x object has a property in its RELS-EXT datastream \nislandora:sSequenceNumberOfxxx\n (where \"xxx\" is the object's parent), the value of that property is added to the \"sequence\" column at the end of each row in the CSV. For paged content, this value is taken from the \nislandora:isSequenceNumber\n RELS-EXT property. These values are ready for use in the \"field_weight\" Drupal field created by the Islandora Defaults module; you can simply rename the \"sequence\" column header to \"field_weight\" when you use the CSV as input for Islandora Workbench. Note that you don't need to configure the script to include fields that contain \"isSequenceNumberOf\" or \"isSequenceNumber\" in your CSV; in fact, because there are so many of them in a typical Islandora 7 Solr index, you will want to \nexclude\n them using the \nfield_pattern_do_not_want\n configuration variable. Excluding them is safe, since the script fetches the sequence information separately from the other CSV data.",
            "title": "Exporting Islandora 7 content"
        },
        {
            "location": "/exporting_islandora_7_content/#overview",
            "text": "Islandora Workbench's main purpose is to load batches of content into an Islandora 8 repository. However, loading content can also be the last step in migrating from Islandora 7 to Islandora 8. As noted in the \" Workflows \" documentation, Workbench can be used in the \"load\" phase of a typical  extract, transform, load  (ETL) process.  Workbench comes with a standalone script,  get_islandora_7_content.py , that can be used to extract (a.k.a. \"export\") metadata and OBJ datastreams from an Islandora 7 instance. This data can form the basis for Workbench input data.  To run the script, change into the Workbench \"scripts\" directory and run:  python3 get_islandora_7_content.py  Unlike  workbench , this script doesn't use a YAML configuration file. To configure the script, you need to open it in a text editor and change the variables in the \"Configuration variables\" section of the script, as appliable.",
            "title": "Overview"
        },
        {
            "location": "/exporting_islandora_7_content/#configuring-which-solr-fields-to-include-in-the-csv",
            "text": "Islandora 7's Solr schema contains a lot of fields, mirroring the richness of MODS (or other XML-based metadata) and the Fedora 3.x RELS-EXT properties. By default, this script fetches all the fields in the Islandora 7's Solr's index, which will invariably be many more fields that you will normally want in the output CSV.  The script takes the following approach to providing control over what fields end up in the CSV data it generates:   It fetches a list of all fieldnames used in the Solr index.  It then matches each fieldname against the regular expression pattern defined in the script's  field_pattern  variable, and if the match is successful, includes the fieldname in the CSV. For example,  field_pattern = 'mods_.*(_s|_ms)$'  will match every Solr field that starts with \"mods_\" and ends with either \"_s\" or \"_ms\".  Next, it matches each remaining filename against the regular expression patterns defined in the script's  field_pattern_do_not_want  variable, and if the match is successful,  removes  the fieldname from the CSV. For example,  field_pattern_do_not_want = '(marcrelator|isSequenceNumberOf)'  will remove all fieldnames that contain either the string \"marcrelator\" or \"isSequenceNumberOf\". Note that the regular expression used in this configuration variable is not a negative pattern; in other words, if a fieldname matches this pattern, it is excluded from the field list.  Finally, it adds to the start of the remaining list of fieldnames every Solr fieldname defined in the  standard_fields  configuration variable. This configuration variable provides a mechanism to ensure than any fields that are not included in step 2 are present in the generated CSV file.    Warning  You will always want at least the Solr fields \"PID\", \"RELS_EXT_isMemberOfCollection_uri_ms\", \"RELS_EXT_hasModel_uri_s\", \"RELS_EXT_isMemberOfCollection_uri_ms\", \"RELS_EXT_isConstituentOf_uri_ms\", and \"RELS_EXT_isPageOf_uri_ms\" in your  standard_fields  configuration variable since these fields contain information about objects' relationships to each other.   Even with a well-configured set of pattern variables, the column headers are ugly, and there are a lot of them. Here is a sample from a minimal Islandora 7.x:  file,PID,RELS_EXT_hasModel_uri_s,RELS_EXT_isMemberOfCollection_uri_ms,RELS_EXT_isConstituentOf_uri_ms,RELS_EXT_isPageOf_uri_ms,mods_recordInfo_recordOrigin_ms,mods_name_personal_author_ms,mods_abstract_s,mods_name_aut_role_roleTerm_code_s,mods_name_personal_author_s,mods_typeOfResource_s,mods_subject_geographic_ms,mods_identifier_local_ms,mods_genre_ms,mods_name_photographer_role_roleTerm_code_s,mods_physicalDescription_form_all_ms,mods_physicalDescription_extent_ms,mods_subject_topic_ms,mods_name_namePart_s,mods_physicalDescription_form_authority_marcform_ms,mods_name_pht_s,mods_identifier_uuid_ms,mods_language_languageTerm_code_s,mods_physicalDescription_form_s,mods_accessCondition_use_and_reproduction_s,mods_name_personal_role_roleTerm_text_s,mods_name__role_roleTerm_code_ms,mods_originInfo_encoding_w3cdtf_keyDate_yes_dateIssued_ms,mods_name_aut_s,mods_originInfo_encoding_iso8601_dateIssued_s,mods_originInfo_dateIssued_ms,mods_name_photographer_namePart_s,mods_name_pht_role_roleTerm_text_ms,mods_identifier_all_ms,mods_name_namePart_ms,mods_subject_geographic_s,mods_originInfo_publisher_ms,mods_subject_descendants_all_ms,mods_titleInfo_title_all_ms,mods_name_photographer_role_roleTerm_text_ms,mods_name_role_roleTerm_text_s,mods_titleInfo_title_ms,mods_name_photographer_s,mods_originInfo_place_placeTerm_text_s,mods_name_role_roleTerm_code_ms,mods_name_pht_role_roleTerm_code_s,mods_name_pht_namePart_s,mods_name_pht_namePart_ms,mods_name_role_roleTerm_code_s,mods_genre_all_ms,mods_physicalDescription_form_authority_marcform_s,mods_name_pht_role_roleTerm_code_ms,mods_extension_display_date_ms,mods_name_photographer_namePart_ms,mods_genre_authority_bgtchm_ms,mods_name_personal_role_roleTerm_text_ms,mods_name_pht_ms,mods_name_photographer_role_roleTerm_text_s,mods_language_languageTerm_code_ms,mods_originInfo_place_placeTerm_text_ms,mods_titleInfo_title_s,mods_identifier_uuid_s,mods_language_languageTerm_code_authority_iso639-2b_s,mods_genre_s,mods_name_aut_role_roleTerm_code_ms,mods_typeOfResource_ms,mods_originInfo_encoding_iso8601_dateIssued_ms,mods_name_personal_author_role_roleTerm_text_ms,mods_abstract_ms,mods_language_languageTerm_text_s,mods_genre_authority_bgtchm_s,mods_language_languageTerm_s,mods_language_languageTerm_ms,mods_subject_topic_s,mods_name_photographer_ms,mods_name_pht_role_roleTerm_text_s,mods_recordInfo_recordOrigin_s,mods_name_aut_ms,mods_originInfo_publisher_s,mods_identifier_local_s,mods_language_languageTerm_text_ms,mods_physicalDescription_extent_s,mods_language_languageTerm_code_authority_iso639-2b_ms,mods_name__role_roleTerm_code_s,mods_originInfo_encoding_w3cdtf_keyDate_yes_dateIssued_s,mods_name_photographer_role_roleTerm_code_ms,mods_name_role_roleTerm_text_ms,mods_name_personal_author_role_roleTerm_text_s,mods_accessCondition_use_and_reproduction_ms,mods_physicalDescription_form_ms,sequence",
            "title": "Configuring which Solr fields to include in the CSV"
        },
        {
            "location": "/exporting_islandora_7_content/#using-the-csv-as-input-for-workbench",
            "text": "The CSV file generated by this script will almost certainly contain many more columns than you will want to ingest into Islandora 8. You will probably want to delete columns you don't need, combine the contents of several columns into one, and edit the contents of others.  As we can see from the example above, the column headings in the CSV are Solr fieldnames ( RELS_EXT_hasModel_uri_s ,  mods_titleInfo_title_ms , etc.). You will need to replace those column headers with the equivalent fields  as defined in your Drupal 8 content type . In addition, the metadata stored in Islandora 7's Solr index does not in many cases have the structure Workbench requires, so the data in the CSV file will need to be edited before it can be used by Workbench to create nodes. The content of Islandora 7 Solr fields is derived from MODS (or other) XML elements, and, with the exception of text-type fields, will not necessarily map cleanly to Drupal fields' data types. In other words, to use the CSV data generted by  get_islandora_7_content.py , you will need to do some work to prepare it (or \"transform\" it, to use ETL language) to use it as input for Workbench.  However, the script adds three columns to the CSV file that do not use Solr fieldnames and whose contents you should  not  edit but that you may need to rename:  file ,  PID , and  sequence :  Do not edit name                                        Rename 'sequence' column (e.g., \nor contents of                                          to 'field_weight') but do not\n'file' column.                                          edit its contents.\n |                                / Every other column           |\n |    / Rename 'PID' to the       | will need to be              |           \n |    | value of your 'id_field'  | deleted, renamed,            |\n |    | setting but do not edit   | or its content               |               \n |    | column contents.          | edited.                      |\n v    v                           v                              v\n---------------------------------------------------------------------\nfile,PID,RELS_EXT_hasModel_uri_s,[...],mods_typeOfResource_s,sequence  First, the required Workbench column \"file\" is added to the beginning of each CSV row, and is populated with the filename of the OBJ datastream. This filename is based on the object's PID, with the the  :  replaced with an underscore, and has an extenstion determined by the OBJ datastream's MIME type.  Second, \"PID\" is the Islandora 7.x PID of each object in the CSV file. This column header can be changed to \"id\" or whatever you have defined in your Workbench confiugration file's  id_field  setting. Alternatively, you can set the value of  id_field  to  PID  and not rename that CSV column.  Third, a \"sequence\" column is added at the end of each CSV row. This is where the  get_islandora_7_content.py  script stores the sequence number of each child object/page in relation to its parent . If an Islandora 7.x object has a property in its RELS-EXT datastream  islandora:sSequenceNumberOfxxx  (where \"xxx\" is the object's parent), the value of that property is added to the \"sequence\" column at the end of each row in the CSV. For paged content, this value is taken from the  islandora:isSequenceNumber  RELS-EXT property. These values are ready for use in the \"field_weight\" Drupal field created by the Islandora Defaults module; you can simply rename the \"sequence\" column header to \"field_weight\" when you use the CSV as input for Islandora Workbench. Note that you don't need to configure the script to include fields that contain \"isSequenceNumberOf\" or \"isSequenceNumber\" in your CSV; in fact, because there are so many of them in a typical Islandora 7 Solr index, you will want to  exclude  them using the  field_pattern_do_not_want  configuration variable. Excluding them is safe, since the script fetches the sequence information separately from the other CSV data.",
            "title": "Using the CSV as input for Workbench"
        },
        {
            "location": "/generating_sample_content/",
            "text": "If you want to quickly generate some sample images to load into Islandora, Workbench provides a utility script to do that.\n\n\nRunning \npython3 scripts/generate_image_files.py\n from within the Islandora Workbench directory will generate PNG images from the list of titles in the \nsample_filenames.txt\n file. Running this script will result in a group of images whose filenames are normalized versions of the lines in the sample title file. You can then load this sample content into Islandora using the \ncreate_from_files\n task.\n\n\nIf you want to have Workbench generate the sample content automatically, configure the \ngenerate_image_files.py\n script as a bootstrap script. See the \nautogen_content.yml\n configuration file for an example of how to do that.",
            "title": "Generating sample Islandora content"
        },
        {
            "location": "/logging/",
            "text": "Islandora Workbench writes a log file for all tasks to a file named \"workbench.log\" in the workbench directory, unless you specify an alternative log file location using the \nlog_file_path\n configuration option, e.g.:\n\n\nlog_file_path: /tmp/mylogfilepath.log\n\n\nThe log contains information that is similar to what you see when you run Workbench, but with time stamps:\n\n\n24-Dec-20 15:05:06 - INFO - Starting configuration check for \"create\" task using config file create.yml.\n24-Dec-20 15:05:07 - INFO - OK, configuration file has all required values (did not check for optional values).\n24-Dec-20 15:05:07 - INFO - OK, CSV file input_data/metadata.csv found.\n24-Dec-20 15:05:07 - INFO - OK, all 5 rows in the CSV file have the same number of columns as there are headers (5).\n24-Dec-20 15:05:21 - INFO - OK, CSV column headers match Drupal field names.\n24-Dec-20 15:05:21 - INFO - OK, required Drupal fields are present in the CSV file.\n24-Dec-20 15:05:23 - INFO - OK, term IDs/names in CSV file exist in their respective taxonomies.\n24-Dec-20 15:05:23 - INFO - OK, term IDs/names used in typed relation fields in the CSV file exist in their respective taxonomies.\n24-Dec-20 15:05:23 - INFO - OK, files named in the CSV \"file\" column are all present.\n24-Dec-20 15:05:23 - INFO - Configuration checked for \"create\" task using config file create.yml, no problems found.\n\n\n\n\nIt may also contain additional detail that would clutter up the console output, for example which term is being added to a vocabulary.\n\n\nBy default, new entries are appended to this log, unless you indicate that the log file should be overwritten each time Workbench is run by providing the \nlog_file_mode\n configuration option with a value of \"w\":\n\n\nlog_file_mode: w\n\n\n\n\nNote\n\n\nThe only times that the default log file name is used instead of one defined in \nlog_file_path\n is 1) when Workbench can't find the specified configuration file and 2) when Workbench finds the configuration file but detects that the file is not valid YAML, and therefore can't understand the value of \nlog_file_path\n.\n\n\n\n\n.",
            "title": "Logging"
        },
        {
            "location": "/workflows/",
            "text": "Islandora Workbench can be used in a variety of content ingest workflows. Several are outlined below.\n\n\nBatch ingest\n\n\nThis is the most common workflow. A user prepares a CSV file and accompanying media files, and runs Workbench to ingest the content:\n\n\n\n\nNote that within this basic workflow, options exist for creating nodes with \nno media\n, and creating stub nodes \nfrom files\n (i.e., no accompanying CSV file).\n\n\nDistributed batch ingest\n\n\nIt is possible to separate the tasks of creating a node and its accompanying media. This can be done in a couple of ways:\n\n\n\n\ncreating the nodes first, using the \nnodes_only: true\n configuration option, and \nadding media to those nodes\n separately\n\n\ncreating stub nodes \ndirectly from media files\n, and \nupdating the nodes\n separately\n\n\n\n\n\n\nIn this workflow, the person creating the nodes and the person updating them later need not be the same. In both cases, Workbench can create an \noutput CSV\n that can be used in the second half of the workflow.\n\n\nMigrations\n\n\nIslandora Workbench is not intended to replace Drupal's Migrate framework, but it can be used in conjunction with other tools and processes as part of an \"\nextract, transform, load\n\" (ETL) workflow. The source could be any platform. If it is Islandora 7, several tools exist to extract content, including the \nget_islandora_7_content.py\n script that comes with Workbench or the \nIslandora Get CSV\n module for Islandora 7. This content can then be used as input for Islandora Workbench, as illustrated here:\n\n\n\n\nOn the left side of the diagram, \nget_islandora_7_content.py\n or the Islandora Get CSV module are used in the \"extract\" phase of the ETL workflow, and on the right side, running the user's computer, Islandora Workbench is used in the \"load\" phase. Before loading the content, the user would modify the extracted CSV file to confirm with Workbench's CSV content requirements.\n\n\nThe advantage of migrating to Islandora in this way is that the CSV file can be cleaned or supplemented (manually or otherwise) prior to using it as Workbench's input. The specific tasks required during this \"transform\" phase will vary depending on the quality and consistency of metadata and other factors.\n\n\nWatch folders\n\n\nSince Islandora workbench is a command-line tool, it can be run in a scheduled job such as Linux \"cron\". If CSV and file content are present when Workbench runs, Workbench will operate on them in the same way as if a person ran Workbench manually. In the diagram below, the source of the files is the daily output of someone scanning images. If these images are saved in the directory that is specified in Workbench's \ninput_dir\n configuration option, and Workbench is run in a cron job using the \"\ncreate_from_files\n\" task, nodes will be created when the cron job executes (over night, for example):\n\n\n\n\nA variation on this workflow is to combine it with the \"Distributed\" workflow described above:\n\n\n\n\nIn this workflow, the nodes are created overnight and then updated with CSV data the next day.\n\n\n\n\nNote\n\n\nIslandora Workbench does not detect changes in directories. While tools to do so exist, Workbench's ability to ingest Islandora content in batches makes it useful to scheduled jobs, as opposed to realtime detection of new files in a directory.\n\n\n\n\nIntegrations with other systems\n\n\nA combination of the \"Migrations\" workflow and the \"Watch folder\" workflow can be used to automate the periodic movement of content from a source system (in the diagram below, Open Journal Systems or Archivematica) into Islandora:\n\n\n\n\nThe extraction of data from the source system, conversion of it into the CSV and file arrangement Workbench expects, and running of Workbench can all be scripted and executed in sequence using scheduled jobs.\n\n\nSharing the input CSV with other applications\n\n\nSome workflows can benefit from having Workbench share its input CSV with other scripts or applications. For example, you might use Workbench to ingest nodes into Islandora but want to use the same CSV file in a script to create metadata for loading into another application such as a library discovery layer.\n\n\nIslandora Workbench strictly validates the columns in the input CSV to ensure that they match Drupal field names. To accommodate CSV columns that do not correspond to Drupal field names, you can tell Workbench to ignore specific columns that are present in the CSV. To do this, list the non-Workbench column headers in the \nignore_csv_columns\n configuration setting. For example, if you want to include a \ndate_generated\n column in your CSV, include the following in your Workbench configuration file:\n\n\nignore_csv_columns: ['date_generated']\n\n\n\n\nWith this setting in place, Workbench will ignore the \ndate_generated\n column in the input CSV.",
            "title": "Workflows"
        },
        {
            "location": "/workflows/#batch-ingest",
            "text": "This is the most common workflow. A user prepares a CSV file and accompanying media files, and runs Workbench to ingest the content:   Note that within this basic workflow, options exist for creating nodes with  no media , and creating stub nodes  from files  (i.e., no accompanying CSV file).",
            "title": "Batch ingest"
        },
        {
            "location": "/workflows/#distributed-batch-ingest",
            "text": "It is possible to separate the tasks of creating a node and its accompanying media. This can be done in a couple of ways:   creating the nodes first, using the  nodes_only: true  configuration option, and  adding media to those nodes  separately  creating stub nodes  directly from media files , and  updating the nodes  separately    In this workflow, the person creating the nodes and the person updating them later need not be the same. In both cases, Workbench can create an  output CSV  that can be used in the second half of the workflow.",
            "title": "Distributed batch ingest"
        },
        {
            "location": "/workflows/#migrations",
            "text": "Islandora Workbench is not intended to replace Drupal's Migrate framework, but it can be used in conjunction with other tools and processes as part of an \" extract, transform, load \" (ETL) workflow. The source could be any platform. If it is Islandora 7, several tools exist to extract content, including the  get_islandora_7_content.py  script that comes with Workbench or the  Islandora Get CSV  module for Islandora 7. This content can then be used as input for Islandora Workbench, as illustrated here:   On the left side of the diagram,  get_islandora_7_content.py  or the Islandora Get CSV module are used in the \"extract\" phase of the ETL workflow, and on the right side, running the user's computer, Islandora Workbench is used in the \"load\" phase. Before loading the content, the user would modify the extracted CSV file to confirm with Workbench's CSV content requirements.  The advantage of migrating to Islandora in this way is that the CSV file can be cleaned or supplemented (manually or otherwise) prior to using it as Workbench's input. The specific tasks required during this \"transform\" phase will vary depending on the quality and consistency of metadata and other factors.",
            "title": "Migrations"
        },
        {
            "location": "/workflows/#watch-folders",
            "text": "Since Islandora workbench is a command-line tool, it can be run in a scheduled job such as Linux \"cron\". If CSV and file content are present when Workbench runs, Workbench will operate on them in the same way as if a person ran Workbench manually. In the diagram below, the source of the files is the daily output of someone scanning images. If these images are saved in the directory that is specified in Workbench's  input_dir  configuration option, and Workbench is run in a cron job using the \" create_from_files \" task, nodes will be created when the cron job executes (over night, for example):   A variation on this workflow is to combine it with the \"Distributed\" workflow described above:   In this workflow, the nodes are created overnight and then updated with CSV data the next day.   Note  Islandora Workbench does not detect changes in directories. While tools to do so exist, Workbench's ability to ingest Islandora content in batches makes it useful to scheduled jobs, as opposed to realtime detection of new files in a directory.",
            "title": "Watch folders"
        },
        {
            "location": "/workflows/#integrations-with-other-systems",
            "text": "A combination of the \"Migrations\" workflow and the \"Watch folder\" workflow can be used to automate the periodic movement of content from a source system (in the diagram below, Open Journal Systems or Archivematica) into Islandora:   The extraction of data from the source system, conversion of it into the CSV and file arrangement Workbench expects, and running of Workbench can all be scripted and executed in sequence using scheduled jobs.",
            "title": "Integrations with other systems"
        },
        {
            "location": "/workflows/#sharing-the-input-csv-with-other-applications",
            "text": "Some workflows can benefit from having Workbench share its input CSV with other scripts or applications. For example, you might use Workbench to ingest nodes into Islandora but want to use the same CSV file in a script to create metadata for loading into another application such as a library discovery layer.  Islandora Workbench strictly validates the columns in the input CSV to ensure that they match Drupal field names. To accommodate CSV columns that do not correspond to Drupal field names, you can tell Workbench to ignore specific columns that are present in the CSV. To do this, list the non-Workbench column headers in the  ignore_csv_columns  configuration setting. For example, if you want to include a  date_generated  column in your CSV, include the following in your Workbench configuration file:  ignore_csv_columns: ['date_generated']  With this setting in place, Workbench will ignore the  date_generated  column in the input CSV.",
            "title": "Sharing the input CSV with other applications"
        },
        {
            "location": "/troubleshooting/",
            "text": "Note\n\n\nIf you are encountering problems not described here, please \nopen an issue\n and help improve Islandora Workbench!\n\n\n\n\nWorkbench is failing to ingest some nodes and is leaving messages in the log mentioning HTTP response code 422.\n\n\nThis is probably caused by unexpected data in your CSV file that Workbench's \n--check\n validation is not finding. If you encounter these messages, please \nopen an issue\n and share any relevant entries in your Drupal log so we can track down the problem.\n\n\nOne of the most common causes of this error is that one or more of the vocabularies being poplated in your CSV contain required fields other than the defult term name, someting which Islandora Workbench \ncannot currently handle\n. While it is possible to have Workbench create these fields, the additional fields will need to be included in the input CSV. If you have an opinion on how that can be best done (while keeping the CSV relatively human-readable), please leave a comment on the linked Github issue.\n\n\n--check is telling me that one the rows in my CSV file has more columns than headers\n\n\nThe most likely problem is that one of your CSV values contains a comma but is not wrapped in double quotes. \n\n\nThe text in my CSV does not match how it looks when I view it in Drupal\n\n\nIf a field is configured in Drupal to use \ntext filters\n, the HTML that is displayed to the user may not be exactly the same as the content of the node add/edit form field. If you check the node add/edit form, the content of the field should match the content of the CSV field. If it does, it is likely that Drupal is apply a text filter.\n\n\nMy Islandora uses a custom media type and I need to tell Workbench what file field to use.\n\n\nIf you need to create a media that is not one of the standard Islandora types (Image, File, Digital Document, Video, Audio, Extracted Text, or FITS Technical metadata), you will need to include the  \nmedia_file_fields\n setting in your config file, like this:\n\n\nmedia_file_fields:\n - mycustommedia_machine_name: field_custom_file\n - myothercustommedia_machine_name: field_other_custom_file\n\n\n\n\nThis configuration setting adds entries to the following default mapping of media types to file field names:\n\n\n'file': 'field_media_file',\n'document': 'field_media_document',\n'image': 'field_media_image',\n'audio': 'field_media_audio_file',\n'video': 'field_media_video_file',\n'extracted_text': 'field_media_file',\n'fits_technical_metadata': 'field_media_file'",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#workbench-is-failing-to-ingest-some-nodes-and-is-leaving-messages-in-the-log-mentioning-http-response-code-422",
            "text": "This is probably caused by unexpected data in your CSV file that Workbench's  --check  validation is not finding. If you encounter these messages, please  open an issue  and share any relevant entries in your Drupal log so we can track down the problem.  One of the most common causes of this error is that one or more of the vocabularies being poplated in your CSV contain required fields other than the defult term name, someting which Islandora Workbench  cannot currently handle . While it is possible to have Workbench create these fields, the additional fields will need to be included in the input CSV. If you have an opinion on how that can be best done (while keeping the CSV relatively human-readable), please leave a comment on the linked Github issue.",
            "title": "Workbench is failing to ingest some nodes and is leaving messages in the log mentioning HTTP response code 422."
        },
        {
            "location": "/troubleshooting/#-check-is-telling-me-that-one-the-rows-in-my-csv-file-has-more-columns-than-headers",
            "text": "The most likely problem is that one of your CSV values contains a comma but is not wrapped in double quotes.",
            "title": "--check is telling me that one the rows in my CSV file has more columns than headers"
        },
        {
            "location": "/troubleshooting/#the-text-in-my-csv-does-not-match-how-it-looks-when-i-view-it-in-drupal",
            "text": "If a field is configured in Drupal to use  text filters , the HTML that is displayed to the user may not be exactly the same as the content of the node add/edit form field. If you check the node add/edit form, the content of the field should match the content of the CSV field. If it does, it is likely that Drupal is apply a text filter.",
            "title": "The text in my CSV does not match how it looks when I view it in Drupal"
        },
        {
            "location": "/troubleshooting/#my-islandora-uses-a-custom-media-type-and-i-need-to-tell-workbench-what-file-field-to-use",
            "text": "If you need to create a media that is not one of the standard Islandora types (Image, File, Digital Document, Video, Audio, Extracted Text, or FITS Technical metadata), you will need to include the   media_file_fields  setting in your config file, like this:  media_file_fields:\n - mycustommedia_machine_name: field_custom_file\n - myothercustommedia_machine_name: field_other_custom_file  This configuration setting adds entries to the following default mapping of media types to file field names:  'file': 'field_media_file',\n'document': 'field_media_document',\n'image': 'field_media_image',\n'audio': 'field_media_audio_file',\n'video': 'field_media_video_file',\n'extracted_text': 'field_media_file',\n'fits_technical_metadata': 'field_media_file'",
            "title": "My Islandora uses a custom media type and I need to tell Workbench what file field to use."
        }
    ]
}